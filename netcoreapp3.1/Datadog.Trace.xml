<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Datadog.Trace</name>
    </assembly>
    <members>
        <member name="T:Datadog.Trace.AgentHttpHeaderNames">
            <summary>
            Names of HTTP headers that can be used when sending traces to the Trace Agent.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.Language">
            <summary>
            The language-specific tracer that generated this span.
            Always ".NET" for the .NET Tracer.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.LanguageInterpreter">
            <summary>
            The interpreter for the given language, e.g. ".NET Framework" or ".NET Core".
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.LanguageVersion">
            <summary>
            The interpreter version for the given language, e.g. "4.7.2" for .NET Framework or "2.1" for .NET Core.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.TracerVersion">
            <summary>
            The version of the tracer that generated this span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.TraceCount">
            <summary>
            The number of unique traces per request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.ContainerId">
            <summary>
            The id of the container where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.ComputedTopLevelSpan">
            <summary>
            Tells the agent whether top-level spans are computed by the tracer
            </summary>
        </member>
        <member name="F:Datadog.Trace.AgentHttpHeaderNames.AgentVersion">
            <summary>
            Version reported by the Datadog agent
            </summary>
        </member>
        <member name="P:Datadog.Trace.AgentHttpHeaderNames.DefaultHeaders">
            <summary>
            Gets the default constant header that should be added to any request to the agent
            </summary>
        </member>
        <member name="F:Datadog.Trace.Agent.AgentWriter._activeBuffer">
            <summary>
            The currently active buffer.
            Note: Thread-safetiness in this class relies on the fact that only the serialization thread can change the active buffer
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.AgentWriter.FlushBuffers(System.Boolean)">
            <summary>
            Flush the active buffer, and the fallback buffer if full
            </summary>
            <param name="flushAllBuffers">If set to true, then flush the back buffer even if not full</param>
            <returns>Async operation</returns>
        </member>
        <member name="M:Datadog.Trace.Agent.IKeepRateCalculator.IncrementKeeps(System.Int32)">
            <summary>
            Increment the number of kept traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.IKeepRateCalculator.IncrementDrops(System.Int32)">
            <summary>
            Increment the number of dropped traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.IKeepRateCalculator.GetKeepRate">
            <summary>
            Get the current keep rate for traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.IKeepRateCalculator.CancelUpdates">
            <summary>
            Stop updating the buckets. The current Keep rate can continue to be read.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Agent.MovingAverageKeepRateCalculator">
            <summary>
            Used to calculate the Trace Keep Rate, tracking the number of
            traces kept and dropped that should have been sent to the agent.
            Traces that are subsequently dropped by the agent due to sampling
            will not count as dropped in this rate.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.IncrementKeeps(System.Int32)">
            <summary>
            Increment the number of kept traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.IncrementDrops(System.Int32)">
            <summary>
            Increment the number of dropped traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.GetKeepRate">
            <summary>
            Get the current keep rate for traces
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.CancelUpdates">
            <summary>
            Stop updating the buckets. The current Keep rate can continue to be read.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Agent.MovingAverageKeepRateCalculator.UpdateBucket">
            <summary>
            Update the current rate. Internal for testing only. Should not be called in normal usage.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Agent.StreamFactories.TcpStreamFactory">
            <summary>
            Experimental TCP based stream factory for exploring replacing System.Net.Http
            </summary>
        </member>
        <member name="F:Datadog.Trace.Agent.Transports.HttpStreamRequest.ResponseReadBufferSize">
            <summary>
            This value is greater than any reasonable response we would receive from the agent.
            It is smaller than the internal default of 81920
            https://source.dot.net/#System.Private.CoreLib/Stream.cs,122
            It is a multiple of 4096.
            </summary>
        </member>
        <member name="T:Datadog.Trace.AppSec.EventModel.JsonPropertyIgnoreNullValueAttribute">
            <summary>
            Attribute that allows us to declare JsonProperty attributes with
            NullValueHandling.Ignore, without running into the issue where the
            named argument is a custom type.
            </summary>
        </member>
        <member name="T:Datadog.Trace.AppSec.Security">
            <summary>
            The Secure is responsible coordinating app sec
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.Security.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.AppSec.Security"/> class with default settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Security.Instance">
            <summary>
            Gets or sets the global <see cref="T:Datadog.Trace.AppSec.Security"/> instance.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Security.Datadog#Trace#AppSec#IDatadogSecurity#InstrumentationGateway">
            <summary>
            Gets <see cref="P:Datadog.Trace.AppSec.Security.InstrumentationGateway"/> instance
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Security.Datadog#Trace#AppSec#IDatadogSecurity#Settings">
            <summary>
            Gets <see cref="T:Datadog.Trace.AppSec.SecuritySettings"/> instance
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.Security.Dispose">
            <summary>
            Frees resouces
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.SecuritySettings.ExtraHeaders">
            <summary>
            Gets keys indicating the optional custom appsec headers the user wants to send.
            </summary>
        </member>
        <member name="M:Datadog.Trace.AppSec.Transports.Http.IpExtractor.GetRealIpFromValues(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Can be a list of single or comma separated values ips like [ "192.68.12.1", "172.53.22.11, 181.92.91.1, 193.92.91.1".. ]
            </summary>
            <param name="headerValues">all the extracted values from ip related headers</param>
            <param name="https">is a secure connection</param>
            <returns>return ip and port, may be null</returns>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_SIGNED">
            Value shall be decoded as a int64_t (or int32_t on 32bits platforms). *
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_UNSIGNED">
            Value shall be decoded as a uint64_t (or uint32_t on 32bits platforms). *
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_STRING">
            Value shall be decoded as a UTF-8 string of length nbEntries. *
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_ARRAY">
            Value shall be decoded as an array of ddwaf_object of length nbEntries, each item having no parameterName. *
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.DDWAF_OBJ_TYPE.DDWAF_OBJ_MAP">
            Value shall be decoded as an array of ddwaf_object of length nbEntries, each item having a parameterName. *
        </member>
        <member name="T:Datadog.Trace.AppSec.Waf.NativeBindings.NativeLibrary">
            <summary>
            APIs for managing Native Libraries
            </summary>
        </member>
        <member name="T:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-value-types
            https://docs.microsoft.com/en-us/windows/desktop/api/Winreg/nf-winreg-reggetvaluea
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.Any">
            <summary>
            Any - No type restriction. (0x0000ffff)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegNone">
            <summary>
            Restrict type to REG_NONE. (0x00000001)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.Noexpand">
            <summary>
            Do not automatically expand environment strings if the value is of type REG_EXPAND_SZ. (0x10000000)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegBinary">
            <summary>
            Bytes - Restrict type to REG_BINARY. (0x00000008)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.Dword">
            <summary>
            Int32 - Restrict type to 32-bit RRF_RT_REG_BINARY | RRF_RT_REG_DWORD. (0x00000018)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegDword">
            <summary>
            Int32 - Restrict type to REG_DWORD. (0x00000010)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.Qword">
            <summary>
            Int64 - Restrict type to 64-bit RRF_RT_REG_BINARY | RRF_RT_REG_DWORD. (0x00000048)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegQword">
            <summary>
            Int64 - Restrict type to REG_QWORD. (0x00000040)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegSz">
            <summary>
            A null-terminated string.
            This will be either a Unicode or an ANSI string,
            depending on whether you use the Unicode or ANSI functions.
            Restrict type to REG_SZ. (0x00000002)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegMultiSz">
            <summary>
            A sequence of null-terminated strings, terminated by an empty string (\0).
            The following is an example:
            String1\0String2\0String3\0LastString\0\0
            The first \0 terminates the first string, the second to the last \0 terminates the last string,
            and the final \0 terminates the sequence. Note that the final terminator must be factored into the length of the string.
            Restrict type to REG_MULTI_SZ. (0x00000020)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RegExpandSz">
            <summary>
            A null-terminated string that contains unexpanded references to environment variables (for example, "%PATH%").
            It will be a Unicode or ANSI string depending on whether you use the Unicode or ANSI functions.
            To expand the environment variable references, use the ExpandEnvironmentStrings function.
            Restrict type to REG_EXPAND_SZ. (0x00000004)
            </summary>
        </member>
        <member name="F:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RFlags.RrfZeroonfailure">
            <summary>
            If pvData is not NULL, set the contents of the buffer to zeroes on failure. (0x20000000)
            </summary>
        </member>
        <member name="T:Datadog.Trace.AppSec.Waf.NativeBindings.ReducedRegistryAccess.RType">
            <summary>
            https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-value-types
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.Parameter.Address">
            <summary>
            Gets or sets the address containing the value that triggered the rule. For example
            ``http.server.query``.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.Parameter.Highlight">
            <summary>
            Gets or sets the part of the value that triggered the rule.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.Parameter.KeyPath">
            <summary>
            Gets or sets the path of the value that triggered the rule. For example ``["query", 0]`` to refer to
            the value in ``{"query": ["triggering value"]}``.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.Parameter.Value">
            <summary>
            Gets or sets the value that triggered the rule.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.RuleMatch.Operator">
            <summary>
            Gets or sets the rule operator that triggered this event. For example, ``match_regex`` or
            ``phrase_match``.
            </summary>
        </member>
        <member name="P:Datadog.Trace.AppSec.Waf.ReturnTypes.Managed.RuleMatch.OperatorValue">
            <summary>
            Gets or sets the rule operator operand that triggered this event. For example, the word that triggered
            using the ``phrase_match`` operator.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.FeatureTrackingAttribute">
            <summary>
            Expose a constant as a feature tracking value
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.GitInfo">
            <summary>
            Git information class
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.SourceRoot">
            <summary>
            Gets Source root
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.Repository">
            <summary>
            Gets Repository
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.Branch">
            <summary>
            Gets Branch
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.Commit">
            <summary>
            Gets Commit
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.AuthorName">
            <summary>
            Gets Author Name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.AuthorEmail">
            <summary>
            Gets Author Email
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.AuthorDate">
            <summary>
            Gets Author Date
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.CommitterName">
            <summary>
            Gets Committer Name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.CommitterEmail">
            <summary>
            Gets Committer Email
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.CommitterDate">
            <summary>
            Gets Committer Date
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.PgpSignature">
            <summary>
            Gets PGP Signature
            </summary>
        </member>
        <member name="P:Datadog.Trace.Ci.GitInfo.Message">
            <summary>
            Gets Commit Message
            </summary>
        </member>
        <member name="M:Datadog.Trace.Ci.GitInfo.GetFrom(System.String)">
            <summary>
            Gets a GitInfo from a folder
            </summary>
            <param name="folder">Target folder to retrieve the git info</param>
            <returns>Git info</returns>
        </member>
        <member name="M:Datadog.Trace.Ci.GitInfo.GetCurrent">
            <summary>
            Gets a GitInfo from the current folder or assembly attribute
            </summary>
            <returns>Git info</returns>
        </member>
        <member name="T:Datadog.Trace.Ci.Tags.BuildTags">
            <summary>
            Span tags for build data model
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildOperationName">
            <summary>
            Build operation name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildName">
            <summary>
            Build name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildCommand">
            <summary>
            Build command
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildWorkingFolder">
            <summary>
            Build working folder
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildEnvironment">
            <summary>
            Build environment
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildStartMessage">
            <summary>
            Build start message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildEndMessage">
            <summary>
            Build start message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildStatus">
            <summary>
            Build status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildSucceededStatus">
            <summary>
            Build succeeded status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.BuildFailedStatus">
            <summary>
            Build failed status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectProperties">
            <summary>
            Project properties
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectFile">
            <summary>
            Project filename
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectSenderName">
            <summary>
            Project sender entity
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectTargetNames">
            <summary>
            Project target names
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ProjectToolsVersion">
            <summary>
            Project tools version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorMessage">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorType">
            <summary>
            Error type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorFile">
            <summary>
            Error file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorStartLine">
            <summary>
            Error start line
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorStartColumn">
            <summary>
            Error start column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorEndLine">
            <summary>
            Error end line
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorEndColumn">
            <summary>
            Error end column
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorProjectFile">
            <summary>
            Error project file
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorSubCategory">
            <summary>
            Error sub category
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.BuildTags.ErrorStack">
            <summary>
            Error stack
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.Tags.CommonTags">
            <summary>
            Common Span tags for test/build data model
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitRepository">
            <summary>
            GIT Repository
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommit">
            <summary>
            GIT Commit hash
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitBranch">
            <summary>
            GIT Branch name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitTag">
            <summary>
            GIT Tag name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitAuthorName">
            <summary>
            GIT Commit Author name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitAuthorEmail">
            <summary>
            GIT Commit Author email
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitAuthorDate">
            <summary>
            GIT Commit Author date
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitCommitterName">
            <summary>
            GIT Commit Committer name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitCommitterEmail">
            <summary>
            GIT Commit Committer email
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitCommitterDate">
            <summary>
            GIT Commit Committer date
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.GitCommitMessage">
            <summary>
            GIT Commit message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.BuildSourceRoot">
            <summary>
            Build Source root
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIProvider">
            <summary>
            CI Provider
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIPipelineId">
            <summary>
            CI Pipeline id
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIPipelineName">
            <summary>
            CI Pipeline name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIPipelineNumber">
            <summary>
            CI Pipeline number
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIPipelineUrl">
            <summary>
            CI Pipeline url
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIJobUrl">
            <summary>
            CI Job url
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIJobName">
            <summary>
            CI Job Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.StageName">
            <summary>
            CI Stage Name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.CIWorkspacePath">
            <summary>
            CI Job url
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.RuntimeName">
            <summary>
            Runtime name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.OSArchitecture">
            <summary>
            OS architecture
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.OSPlatform">
            <summary>
            OS platform
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.OSVersion">
            <summary>
            OS version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.RuntimeArchitecture">
            <summary>
            Runtime architecture
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.CommonTags.RuntimeVersion">
            <summary>
            Runtime version
            </summary>
        </member>
        <member name="T:Datadog.Trace.Ci.Tags.TestTags">
            <summary>
            Span tags for test data model
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Suite">
            <summary>
            Test suite name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Name">
            <summary>
            Test name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Type">
            <summary>
            Test type
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.TypeTest">
            <summary>
            Test type test
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.TypeBenchmark">
            <summary>
            Test type benchmark
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Framework">
            <summary>
            Test framework
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.FrameworkVersion">
            <summary>
            Test framework version
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Parameters">
            <summary>
            Test parameters
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Traits">
            <summary>
            Test traits
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Status">
            <summary>
            Test status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.StatusPass">
            <summary>
            Test Pass status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.StatusFail">
            <summary>
            Test Fail status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.StatusSkip">
            <summary>
            Test Skip status
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.SkipReason">
            <summary>
            Test skip reason
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.Message">
            <summary>
            Test output message
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.MetadataTestName">
            <summary>
            Parameters metadata TestName
            </summary>
        </member>
        <member name="F:Datadog.Trace.Ci.Tags.TestTags.CIAppTestOriginName">
            <summary>
            Origin value for CIApp Test
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[int] [Command].ExecuteNonQueryAsync(CancellationToken)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryAsyncIntegration.OnMethodBegin``1(``0,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryIntegration">
            <summary>
            CallTarget instrumentation for:
            int [Command].ExecuteNonQuery()
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryWithBehaviorIntegration">
            <summary>
            CallTarget instrumentation for:
            int [Command].ExecuteNonQuery(CommandBehavior)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryWithBehaviorIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteNonQueryWithBehaviorIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[*DataReader] [Command].ExecuteReaderAsync()
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderAsyncIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderIntegration">
            <summary>
            CallTarget instrumentation for:
            [*]DataReader [Command].ExecuteReader()
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAndCancellationAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[*DataReader] [Command].ExecuteReaderAsync(CommandBehavior, CancellationToken)
            Task[DbDataReader] [Command].ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAndCancellationAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAndCancellationAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[*DataReader] [Command].ExecuteReaderAsync(CommandBehavior)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAsyncIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorIntegration">
            <summary>
            CallTarget instrumentation for:
            [*]DataReader [Command].ExecuteReader(CommandBehavior)
            [*]DataReader [Command].ExecuteDbDataReader(CommandBehavior)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithBehaviorIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithCancellationAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[*DataReader] [Command].ExecuteReaderAsync(CancellationToken)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithCancellationAsyncIntegration.OnMethodBegin``1(``0,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteReaderWithCancellationAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarAsyncIntegration">
            <summary>
            CallTarget instrumentation for:
            Task[object] [Command].ExecuteScalarAsync(CancellationToken)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarAsyncIntegration.OnMethodBegin``1(``0,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarIntegration">
            <summary>
            CallTarget instrumentation for:
            object [Command].ExecuteScalar()
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarWithBehaviorIntegration">
            <summary>
            CallTarget instrumentation for:
            object [Command].ExecuteScalar(CommandBehavior)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarWithBehaviorIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBehavior">Command Behavior type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="commandBehavior">Command behavior</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AdoNet.CommandExecuteScalarWithBehaviorIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.AsyncCommandIntegration">
            <summary>
            AsyncCommand ExecuteCommand calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.AsyncCommandIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.AsyncCommandIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.SyncCommandIntegration">
            <summary>
            SyncCommand ExecuteCommand calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.SyncCommandIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Aerospike.SyncCommandIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ExceptionHandlerExtensions_HandleAsync_Integration">
            <summary>
            System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions calltarget instrumentation
            This instrumentation is based off the ASP.NET Web API 2 error handling design that is documented here:
            https://docs.microsoft.com/en-us/aspnet/web-api/overview/error-handling/web-api-global-error-handling
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ExceptionHandlerExtensions_HandleAsync_Integration.OnMethodBegin``3(``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExceptionHandler">Type of the configuration callback action</typeparam>
            <typeparam name="TExceptionContext">Type of the exception context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method. This will be null because the method is static</param>
            <param name="handler">The configured exception handler value</param>
            <param name="context">The exception context value</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpConfigurationStruct">
            <summary>
            System.Web.Http.HttpConfiguration
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.HttpConfigurationStruct.MessageHandlers">
            <summary>
            Gets the MessageHandlers collection
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IExceptionContext">
            <summary>
            System.Web.Http.ExceptionHandling.ExceptionContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IExceptionContext.Exception">
            <summary>
            Gets the exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpContext">
            <summary>
            System.Web.HttpContext interface for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IHttpContext.Items">
            <summary>
            Gets the items dictionary
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IThreadContext">
            <summary>
            System.Web.HttpApplication interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.IThreadContext.HttpContext">
            <summary>
            Gets the HttpContext of the thread context
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ThreadContext_AssociateWithCurrentThread_Integration">
            <summary>
            System.Web.ThreadContext.AssociateWithCurrentThread calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ThreadContext_AssociateWithCurrentThread_Integration.OnMethodBegin``1(``0,System.Boolean)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="setImpersonationContext">A flag to set the impersonation context</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ThreadContext_DisassociateFromCurrentThread_Integration">
            <summary>
            System.Web.ThreadContext.DisassociateFromCurrentThread calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AspNet.ThreadContext_DisassociateFromCurrentThread_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse">
            <summary>
            AmazonWebServiceResponse interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse.ContentLength">
            <summary>
            Gets the length of the content
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse.ResponseMetadata">
            <summary>
            Gets the response metadata
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IAmazonWebServiceResponse.HttpStatusCode">
            <summary>
            Gets the http status code of the AWS request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IClientConfig">
            <summary>
            IClientConfig interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IClientConfig.RegionEndpoint">
            <summary>
            Gets the region endpoint of the config
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IExecutionContext">
            <summary>
            IExecutionContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IExecutionContext.RequestContext">
            <summary>
            Gets the RequestContext
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IExecutionContext.ResponseContext">
            <summary>
            Gets the ResponseContext
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRegionEndpoint">
            <summary>
            IRegionEndpoint interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRegionEndpoint.SystemName">
            <summary>
            Gets the system name of the region endpoint
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequest">
            <summary>
            IRequest interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequest.HttpMethod">
            <summary>
            Gets the HTTP method
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequestContext">
            <summary>
            IRequestContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequestContext.ClientConfig">
            <summary>
            Gets the client config
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IRequestContext.Request">
            <summary>
            Gets the Request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseContext">
            <summary>
            IResponseContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseContext.Response">
            <summary>
            Gets the SDK response
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseMetadata">
            <summary>
            ResponseMetadata interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseMetadata.RequestId">
            <summary>
            Gets the ID of the request
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.IResponseMetadata.Metadata">
            <summary>
            Gets the metadata associated with the request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeAsyncIntegration">
            <summary>
            AWSSDK.Core InvokeAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeAsyncIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionContext">Type of the execution context object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="executionContext">The execution context for the AWS SDK operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeSyncIntegration">
            <summary>
            AWSSDK.Core InvokeSync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeSyncIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionContext">Type of the execution context object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="executionContext">The execution context for the AWS SDK operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SDK.RuntimePipelineInvokeSyncIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponseContext">Type of the response contex</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseContext">Response context instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueAsyncIntegration">
            <summary>
            AWSSDK.SQS CreateQueueAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TCreateQueueRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueIntegration">
            <summary>
            AWSSDK.SQS CreateQueue calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TCreateQueueRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.CreateQueueIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageAsyncIntegration">
            <summary>
            AWSSDK.SQS DeleteMessageAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchAsyncIntegration">
            <summary>
            AWSSDK.SQS DeleteMessageBatchAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteMessageBatchRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchIntegration">
            <summary>
            AWSSDK.SQS DeleteMessageBatch calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteMessageBatchRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageBatchIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageIntegration">
            <summary>
            AWSSDK.SQS DeleteMessage calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteMessageIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueAsyncIntegration">
            <summary>
            AWSSDK.SQS DeleteQueueAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteQueueRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueIntegration">
            <summary>
            AWSSDK.SQS DeleteQueue calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TDeleteQueueRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.DeleteQueueIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl">
            <summary>
            Interface for ducktyping AmazonSQSRequest implementations with the QueueUrl property
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IAmazonSQSRequestWithQueueUrl.QueueUrl">
            <summary>
            Gets the URL of the queue
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IContainsMessageAttributes">
            <summary>
            MessageAttributes interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.IContainsMessageAttributes.MessageAttributes">
            <summary>
            Gets or sets the message attributes
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueRequest">
            <summary>
            CreateQueueRequest interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueRequest.QueueName">
            <summary>
            Gets the name of the queue
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueRequest.Attributes">
            <summary>
            Gets the message attributes
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueResponse">
            <summary>
            CreateQueueResponse interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ICreateQueueResponse.QueueUrl">
            <summary>
            Gets the URL of the created Amazon SQS queue
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ISendMessageBatchRequest">
            <summary>
            SendMessageBatchRequest interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ISendMessageBatchRequest.Entries">
            <summary>
            Gets the message entries
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ISendMessageRequest">
            <summary>
            SendMessageRequest interface for ducktyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageAsyncIntegration">
            <summary>
            AWSSDK.SQS ReceiveMessageAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReceiveMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageIntegration">
            <summary>
            AWSSDK.SQS ReceiveMessage calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReceiveMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.ReceiveMessageIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageAsyncIntegration">
            <summary>
            AWSSDK.SQS SendMessageAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSendMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchAsyncIntegration">
            <summary>
            AWSSDK.SQS SendMessageBatchAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSendMessageBatchRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchIntegration">
            <summary>
            AWSSDK.SQS SendMessageBatch calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSendMessageBatchRequest">Type of the SendMessage request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageBatchIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageIntegration">
            <summary>
            AWSSDK.SQS SendMessage calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSendMessageRequest">Type of the request object</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method</param>
            <param name="request">The request for the SQS operation</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.AWS.SQS.SendMessageIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.AzureFunctionsExecutionReason">
            <summary>
            Enum for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.AzureFunctionsExecutionReason.AutomaticTrigger">
            <summary>Indicates a function executed because of an automatic trigger.</summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.AzureFunctionsExecutionReason.HostCall">
            <summary>Indicates a function executed because of a programmatic host call.</summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.AzureFunctionsExecutionReason.Dashboard">
            <summary>Indicates a function executed because of a request from a dashboard user.</summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.AzureFunctionsExecutorTryExecuteAsyncIntegration">
            <summary>
            Azure Function calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.AzureFunctionsExecutorTryExecuteAsyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TFunction">Type of the invoker</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="functionInstance">First argument</param>
            <param name="cancellationToken">Second argument</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.AzureFunctionsExecutorTryExecuteAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.FunctionInvocationMiddlewareInvokeIntegration">
            <summary>
            Azure Function calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.FunctionInvocationMiddlewareInvokeIntegration.OnMethodBegin``1(``0,Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="httpContext">First argument</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.FunctionInvocationMiddlewareInvokeIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionDescriptor">
            <summary>
            For duck typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionDescriptor.Id">
            <summary>Gets the ID of the function.</summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionDescriptor.FullName">
            <summary>Gets the fully qualified name of the function. This is 'Namespace.Class.Method' </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionDescriptor.ShortName">
            <summary>Gets the display name of the function. This is commonly 'Class.Method' </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionDescriptor.LogName">
            <summary>Gets the name used for logging. This is 'Method' or the value overwritten by [FunctionName] </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionInstance">
            <summary>
            For duck typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionInstance.Id">
            <summary>
            Gets Function unique id
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionInstance.TriggerDetails">
            <summary>
            Gets trigger details
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionInstance.Reason">
            <summary>
            Gets reason for invocation
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionInstance.BindingSource">
            <summary>
            Gets access to the binding source object for trigger inspection
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.IFunctionInstance.FunctionDescriptor">
            <summary>
            Gets Function description object
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ClientQueryIteratorsIntegrations">
            <summary>
            Microsoft.Azure.Cosmos.Container.QueryIteratorsIntegrations calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ClientQueryIteratorsIntegrations.OnMethodBegin``3(``0,``1,System.String,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of target</typeparam>
            <typeparam name="TQueryDefinition">Type of the query definition</typeparam>
            <typeparam name="TQueryRequestOptions">Type of the query request options</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queryDefinition">Query definition instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="queryRequestOptions">Query request options</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ClientQueryIteratorsIntegrations.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerNewStruct">
            <summary>
            Microsoft.Azure.Cosmos.Container for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerNewStruct.Id">
            <summary>
            Gets the Id of the Cosmos container
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerNewStruct.Database">
            <summary>
            Gets the parent Database reference
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerOldStruct">
            <summary>
            Microsoft.Azure.Cosmos.Container for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerOldStruct.Id">
            <summary>
            Gets the Id of the Cosmos container
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerOldStruct.Database">
            <summary>
            Gets the parent Database reference
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerQueryIteratorsIntegrations">
            <summary>
            Microsoft.Azure.Cosmos.Container.QueryIteratorsIntegrations calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerQueryIteratorsIntegrations.OnMethodBegin``3(``0,``1,System.String,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of target</typeparam>
            <typeparam name="TQueryDefinition">Type of the query definition</typeparam>
            <typeparam name="TQueryRequestOptions">Type of the query request options</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queryDefinition">Query definition instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="queryRequestOptions">Query request options</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.ContainerQueryIteratorsIntegrations.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosClientStruct">
            <summary>
            Microsoft.Azure.Cosmos.CosmosClient
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosClientStruct.Endpoint">
            <summary>
            Gets the endpoint Uri for the Azure Cosmos DB service.
            </summary>
            <value>
            The Uri for the account endpoint.
            </value>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosContextClientStruct">
            <summary>
            Microsoft.Azure.Cosmos.CosmosClientContext for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.CosmosContextClientStruct.Client">
            <summary>
            Gets the CosmosClient
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseNewStruct">
            <summary>
            Microsoft.Azure.Cosmos.Database for duct typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseNewStruct.Id">
            <summary>
            Gets the Id of the Cosmos database
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseNewStruct.Client">
            <summary>
            Gets the parent Cosmos client instance related the database instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseOldStruct">
            <summary>
            Microsoft.Azure.Cosmos.Database for duct typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseOldStruct.Id">
            <summary>
            Gets the Id of the Cosmos database
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseOldStruct.ClientContext">
            <summary>
            Gets the parent Cosmos client instance related the database instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseQueryIteratorsIntegrations">
            <summary>
            Microsoft.Azure.Cosmos.Container.QueryIteratorsIntegrations calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseQueryIteratorsIntegrations.OnMethodBegin``3(``0,``1,System.String,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of target</typeparam>
            <typeparam name="TQueryDefinition">Type of the query definition</typeparam>
            <typeparam name="TQueryRequestOptions">Type of the query request options</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queryDefinition">Query definition instance</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="queryRequestOptions">Query request options</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.DatabaseQueryIteratorsIntegrations.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.QueryDefinitionStruct">
            <summary>
            Microsoft.Azure.Cosmos.QueryDefinition for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.CosmosDb.QueryDefinitionStruct.QueryText">
            <summary>
            Gets the text of the Azure Cosmos DB SQL query.
            </summary>
            <value>The text of the SQL query.</value>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.HttpMethod">
            <summary>
            HTTP method
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData">
            <summary>
            Version-agnostic interface for Elasticsearch RequestData
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData.Path">
            <summary>
            Gets the path of the request
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData.Uri">
            <summary>
            Gets the URI of the request
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.IRequestData.Method">
            <summary>
            Gets the HTTP method of the request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.RequestPipelineStruct">
            <summary>
            Duck-copy struct for RequestPipeline
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestDataV5">
            <summary>
            Duck-copy struct for RequestData
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearchAsync_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearchAsync&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearchAsync_Integration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequestData">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestData">The request data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearchAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionResult">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearch_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearch&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearch_Integration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequestData">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestData">The request data</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V5.RequestPipeline_CallElasticsearch_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestDataV6">
            <summary>
            Duck-copy struct for RequestData
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearchAsync_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearchAsync&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearchAsync_Integration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequestData">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestData">The request data</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearchAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionResult">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearch_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearch&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearch_Integration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequestData">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestData">The request data</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V6.RequestPipeline_CallElasticsearch_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_RequestAsync_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearchAsync&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_RequestAsync_Integration.OnMethodBegin``4(``0,``1,System.String,System.Threading.CancellationToken,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="THttpMethod">The type of the HttpMethod parameter</typeparam>
            <typeparam name="TPostData">The type of the PostData parameter</typeparam>
            <typeparam name="TRequestParameters">The type of the request parameters</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="method">The HTTP method of the request</param>
            <param name="path">The path of the request</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="postData">The payload of the request</param>
            <param name="requestParameters">The parameters of the request</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_RequestAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">The response</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_Request_Integration">
            <summary>
            Elasticsearch.Net.RequestPipeline.CallElasticsearch&lt;T&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_Request_Integration.OnMethodBegin``4(``0,``1,System.String,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="THttpMethod">The type of the HttpMethod parameter</typeparam>
            <typeparam name="TPostData">The type of the PostData parameter</typeparam>
            <typeparam name="TRequestParameters">The type of the request parameters</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="method">The HTTP method of the request</param>
            <param name="path">The path of the request</param>
            <param name="postData">The payload of the request</param>
            <param name="requestParameters">The parameters of the request</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Elasticsearch.V7.Transport_Request_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ErrorLocationStruct">
            <summary>
            GraphQL.ErrorLocation interface for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ErrorLocationStruct.Line">
            <summary>
            Gets the line number of the document where the error occurred
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ErrorLocationStruct.Column">
            <summary>
            Gets the column number of the document where the error occurred
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ExecuteAsyncIntegration">
            <summary>
            GraphQL.Execution.ExecutionStrategy calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ExecuteAsyncIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TContext">Type of the execution context</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="context">The execution context of the GraphQL operation.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ExecuteAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TExecutionResult">Type of the execution result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IDocument">
            <summary>
            GraphQL.Language.AST.Document interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IDocument.OriginalQuery">
            <summary>
            Gets the original query from the document
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContext">
            <summary>
            GraphQL.Execution.ExecutionContext interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContext.Document">
            <summary>
            Gets the document associated with the execution context
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContext.Operation">
            <summary>
            Gets the operation associated with the execution context
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionContext.Errors">
            <summary>
            Gets the execution errors
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError">
            <summary>
            GraphQL.ExecutionError interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError.Code">
            <summary>
            Gets a code for the error
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError.Locations">
            <summary>
            Gets a list of locations in the document where the error applies
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError.Message">
            <summary>
            Gets a message for the error
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionError.Path">
            <summary>
            Gets the path in the document where the error applies
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionErrors">
            <summary>
            GraphQL.ExecutionErrors interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionErrors.Count">
            <summary>
            Gets the number of errors
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IExecutionErrors.Item(System.Int32)">
            <summary>
            Gets the ExecutionError at the specified index
            </summary>
            <param name="index">Index to lookup</param>
            <returns>An execution error</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IOperation">
            <summary>
            GraphQL.Language.AST.Operation interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IOperation.Name">
            <summary>
            Gets the name of the operation
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IOperation.OperationType">
            <summary>
            Gets the type of the operation
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IValidationResult">
            <summary>
            GraphQL.Validation.IValidationResult interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IValidationResult.Errors">
            <summary>
            Gets the execution errors
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.IValidationResultTuple">
            <summary>
            ValueTuple returned by DocumentValidator in GraphQL4
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationTypeProxy">
            <summary>
            A proxy enum for GraphQL.Language.AST.OperationType.
            The enum values must match those of GraphQL.Language.AST.OperationType for spans
            to be decorated with the correct operation. Since the original type is public,
            we not expect changes between minor versions of the GraphQL library.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationTypeProxy.Query">
            <summary>
            A query operation.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationTypeProxy.Mutation">
            <summary>
            A mutation operation.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.OperationTypeProxy.Subscription">
            <summary>
            A subscription operation.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsync4Integration">
            <summary>
            GraphQL.Validation.DocumentValidator calltarget instrumentation for GraphQL 4
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsync4Integration.OnMethodBegin``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSchema">Type of the schema</typeparam>
            <typeparam name="TDocument">Type of the document</typeparam>
            <typeparam name="TVariables">Type of the variables</typeparam>
            <typeparam name="TRules">Type of the rules</typeparam>
            <typeparam name="TUserContext">Type of the user context</typeparam>
            <typeparam name="TInputs">Type of the inputs</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="schema">The GraphQL schema value</param>
            <param name="document">The GraphQL document value</param>
            <param name="variables">The GraphQL variables</param>
            <param name="rules">The list of validation rules</param>
            <param name="userContext">The user context</param>
            <param name="inputs">The input variables</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsync4Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TValidationResult">Type of the validation result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="validationResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsyncIntegration">
            <summary>
            GraphQL.Validation.DocumentValidator calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsyncIntegration.OnMethodBegin``6(``0,System.String,``1,``2,``3,``4,``5)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSchema">Type of the schema</typeparam>
            <typeparam name="TDocument">Type of the document</typeparam>
            <typeparam name="TRules">Type of the rules</typeparam>
            <typeparam name="TUserContext">Type of the user context</typeparam>
            <typeparam name="TInputs">Type of the inputs</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="originalQuery">The source of the original GraphQL query</param>
            <param name="schema">The GraphQL schema value</param>
            <param name="document">The GraphQL document value</param>
            <param name="rules">The list of validation rules</param>
            <param name="userContext">The user context</param>
            <param name="inputs">The input variables</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TValidationResult">Type of the validation result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="validationResult">ExecutionResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateIntegration">
            <summary>
            GraphQL.Validation.DocumentValidator calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateIntegration.OnMethodBegin``6(``0,System.String,``1,``2,``3,``4,``5)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSchema">Type of the schema</typeparam>
            <typeparam name="TDocument">Type of the document</typeparam>
            <typeparam name="TRules">Type of the rules</typeparam>
            <typeparam name="TUserContext">Type of the user context</typeparam>
            <typeparam name="TInputs">Type of the inputs</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="originalQuery">The source of the original GraphQL query</param>
            <param name="schema">The GraphQL schema value</param>
            <param name="document">The GraphQL document value</param>
            <param name="rules">The list of validation rules</param>
            <param name="userContext">The user context</param>
            <param name="inputs">The input variables</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.GraphQL.ValidateIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TValidationResult">Type of the validation result value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="validationResult">IValidationResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.CurlHandler.CurlHandlerIntegration">
            <summary>
            System.Net.Http.CurlHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.CurlHandler.CurlHandlerIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.CurlHandler.CurlHandlerIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerIntegration">
            <summary>
            System.Net.Http.HttpClientHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerSyncIntegration">
            <summary>
            System.Net.Http.HttpClientHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerSyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpClientHandler.HttpClientHandlerSyncIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpMethodStruct">
            <summary>
            Http method struct copy target for ducktyping
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.HttpMethodStruct.Method">
            <summary>
            Gets the http method in string
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage">
            <summary>
            HttpRequestMessage interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage.Method">
            <summary>
            Gets the Http Method
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage.RequestUri">
            <summary>
            Gets the request uri
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpRequestMessage.Headers">
            <summary>
            Gets the request headers
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage">
            <summary>
            HttpResponseMessage interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IHttpResponseMessage.StatusCode">
            <summary>
            Gets the status code of the http response
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IRequestHeaders">
            <summary>
            RequestHeaders interface for ducktyping
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IRequestHeaders.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Try get values from the headers
            </summary>
            <param name="name">Name of the header</param>
            <param name="values">Values of the header in the request</param>
            <returns>true if the header was found; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IRequestHeaders.Remove(System.String)">
            <summary>
            Removes a header from the request
            </summary>
            <param name="name">Name of the header</param>
            <returns>true if the header was removed; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.IRequestHeaders.Add(System.String,System.String)">
            <summary>
            Adds a header to the request
            </summary>
            <param name="name">Name of the header</param>
            <param name="value">Value of the header</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerIntegration">
            <summary>
            System.Net.Http.SocketsHttpHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerSyncIntegration">
            <summary>
            System.Net.Http.SocketsHttpHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerSyncIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.SocketsHttpHandler.SocketsHttpHandlerSyncIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.WinHttpHandler.WinHttpHandlerIntegration">
            <summary>
            System.Net.Http.WinHttpHandler calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.WinHttpHandler.WinHttpHandlerIntegration.OnMethodBegin``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TRequest">Type of the request</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="requestMessage">HttpRequest message instance</param>
            <param name="cancellationToken">CancellationToken value</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.HttpClient.WinHttpHandler.WinHttpHandlerIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="responseMessage">HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_BeginGetRequestStream_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.BeginGetRequestStream
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_BeginGetRequestStream_Integration.OnMethodBegin``1(``0,System.AsyncCallback,System.Object)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_BeginGetResponse_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.BeginGetResponse
            We only instrument .NET Framework - .NET Core uses an HttpClient
            internally, which is already instrumented
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_BeginGetResponse_Integration.OnMethodBegin``1(``0,System.AsyncCallback,System.Object)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_EndGetResponse_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.GetResponse
            We only instrument .NET Framework - .NET Core uses an HttpClient
            internally, which is already instrumented
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_EndGetResponse_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetRequestStream_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.GetRequestStream
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetRequestStream_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetResponse_Integration">
            <summary>
            CallTarget integration for HttpWebRequest.GetResponse
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetResponse_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.HttpWebRequest_GetResponse_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.IHttpWebRequest">
            <summary>
            Duck type interface for HttpWebRequest
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.IHttpWebRequest.RequestStartTicks">
            <summary>
            Gets the time the HttpWebRequest was created in Ticks (UTC)
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.WebRequestCommon.GetResponse_OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.WebRequest_GetResponseAsync_Integration">
            <summary>
            CallTarget integration for WebRequest.GetResponseAsync
            We're actually instrumenting HttpWebRequest, but the GetResponseAsync method is declared in WebRequest (and not overriden)
            So instead, we instrument WebRequest and check the actual type
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.WebRequest_GetResponseAsync_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Http.WebRequest.WebRequest_GetResponseAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Task of HttpResponse message instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.CachedMessageHeadersHelper`1.CreateHeaders">
            <summary>
            Creates a Confluent.Kafka.Headers object and assigns it to an `IMessage` proxy
            </summary>
            <returns>A proxy for the new Headers object</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeException">
            <summary>
            ConsumeException interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeException.ConsumerRecord">
            <summary>
            Gets the consume result associated with the consume request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult">
            <summary>
            ConsumeResult for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.Topic">
            <summary>
            Gets the topic
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.Partition">
            <summary>
            Gets the partition
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.Offset">
            <summary>
            Gets the offset
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.Message">
            <summary>
            Gets the Kafka record
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IConsumeResult.IsPartitionEOF">
            <summary>
            Gets a value indicating whether gets whether the message is a partition EOF
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryReport">
            <summary>
            DeliveryReport interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryReport.Error">
            <summary>
            Gets the Error associated with the delivery report
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryResult">
            <summary>
            DeliveryResult interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryResult.Partition">
            <summary>
                Gets the Kafka partition.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IDeliveryResult.Offset">
            <summary>
                Gets the Kafka offset
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IError">
            <summary>
            Error interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IError.IsError">
            <summary>
            Gets a value indicating whether the error is really an error
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IError.ToString">
            <summary>
            Gets the string representation of the error
            </summary>
            <returns>The string representation of the error</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IHeaders">
            <summary>
            Headers interface for duck-typing
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IHeaders.Add(System.String,System.Byte[])">
            <summary>
            Adds a header to the collection
            </summary>
            <param name="key">The header's key value</param>
            <param name="val">The value of the header. May be null. Format strings as UTF8</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IHeaders.Remove(System.String)">
            <summary>
                Removes all headers for the given key.
            </summary>
            <param name="key">The key to remove all headers for</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IHeaders.TryGetLastBytes(System.String,System.Byte[]@)">
            <summary>
                Try to get the value of the latest header with the specified key.
            </summary>
            <param name="key">
                The key to get the associated value of.
            </param>
            <param name="lastHeader">
                The value of the latest element in the collection with the
                specified key, if a header with that key was present in the
                collection.
            </param>
            <returns>
                true if the a value with the specified key was present in
                the collection, false otherwise.
            </returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage">
            <summary>
            Message interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage.Value">
            <summary>
            Gets the value of the message
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage.Timestamp">
            <summary>
            Gets the timestamp that the message was produced
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IMessage.Headers">
            <summary>
            Gets or sets the headers for the record
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IProduceException">
            <summary>
            ProduceException interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.IProduceException.DeliveryResult">
            <summary>
            Gets the delivery result associated with the produce request
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITimestamp">
            <summary>
            Timestamp struct for duck-typing
            Requires boxing, but necessary as we need to duck-type <see cref="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITimestamp.Type"/> too
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITimestamp.Type">
            <summary>
            Gets the timestamp type
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITimestamp.UtcDateTime">
            <summary>
            Gets the UTC DateTime for the timestamp
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITopicPartition">
            <summary>
            TopicPartition interface for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITopicPartition.Topic">
            <summary>
                Gets the Kafka topic name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITopicPartition.Partition">
            <summary>
                Gets the Kafka partition.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITypedDeliveryHandlerShimAction">
            <summary>
            TypedDeliveryHandlerShim_Action for duck-typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.ITypedDeliveryHandlerShimAction.Handler">
            <summary>
            Sets the delivery report handler
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerCloseIntegration">
            <summary>
            Confluent.Kafka Consumer.Consume calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerCloseIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerCloseIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerConsumeIntegration">
            <summary>
            Confluent.Kafka Consumer.Consume calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerConsumeIntegration.OnMethodBegin``1(``0,System.Int32)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="millisecondsTimeout">The maximum period of time the call may block.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerConsumeIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerDisposeIntegration">
            <summary>
            Confluent.Kafka Consumer.Consume calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerDisposeIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerDisposeIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerUnsubscribeIntegration">
            <summary>
            Confluent.Kafka Consumer.Consume calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerUnsubscribeIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaConsumerUnsubscribeIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaHelper.TryInjectHeaders``2(Datadog.Trace.SpanContext,``1)">
            <summary>
            Try to inject the prop
            </summary>
            <param name="context">The Span context to propagate</param>
            <param name="message">The duck-typed Kafka Message object</param>
            <typeparam name="TTopicPartitionMarker">The TopicPartition type (used  optimisation purposes)</typeparam>
            <typeparam name="TMessage">The type of the duck-type proxy</typeparam>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceAsyncIntegration">
            <summary>
            Confluent.Kafka Producer.Produce calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceAsyncIntegration.OnMethodBegin``3(``0,``1,``2,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TTopicPartition">Type of the TopicPartition</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="topicPartition">TopicPartition instance</param>
            <param name="message">Message instance</param>
            <param name="cancellationToken">CancellationToken instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration">
            <summary>
            Confluent.Kafka Producer.TypedDeliveryHandlerShim_Action.HandleDeliveryReport calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.OnMethodBegin``4(``0,System.String,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TKey">Type of the message key</typeparam>
            <typeparam name="TValue">Type of the message value</typeparam>
            <typeparam name="TActionOfDeliveryReport">Type of the delivery report</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="topic">The topic to which the message was sent</param>
            <param name="key">The message key value</param>
            <param name="value">The message value</param>
            <param name="handler">The delivery handler instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.WrapAction``1(System.Action{``0},Datadog.Trace.Span)">
            <summary>
            Helper method used by <see cref="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.CachedWrapperDelegate`1"/> to create a delegate
            </summary>
            <param name="originalHandler">The original delivery report handler </param>
            <param name="span">A <see cref="T:Datadog.Trace.Span"/> that can be manipulated when the action is invoked</param>
            <typeparam name="TDeliveryReport">Type of the delivery report</typeparam>
            <returns>The wrapped action</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncDeliveryHandlerIntegration.CachedWrapperDelegate`1">
            <summary>
            Helper class for creating a <typeparamref name="TActionDelegate"/> that wraps an <see cref="T:System.Action`1"/>,
            </summary>
            <typeparam name="TActionDelegate">Makes the assumption that TActionDelegate is an <see cref="T:System.Action`1"/></typeparam>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncIntegration">
            <summary>
            Confluent.Kafka Producer.Produce calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncIntegration.OnMethodBegin``4(``0,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TTopicPartition">Type of the TopicPartition</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TDeliveryHandler">Type of the delivery handler action</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="topicPartition">TopicPartition instance</param>
            <param name="message">Message instance</param>
            <param name="deliveryHandler">Delivery Handler instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.KafkaProduceSyncIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Offset">
            <summary>
            Partition for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Offset.Value">
            <summary>
            Gets the long value corresponding to this offset
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Offset.ToString">
            <summary>
            Based on the original implementation
            https://github.com/confluentinc/confluent-kafka-dotnet/blob/643c8fdc90f54f4d82d5135ae7e91a995f0efdee/src/Confluent.Kafka/Offset.cs#L274
            </summary>
            <returns>A string that represents the Offset object</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition">
            <summary>
            Partition for duck-typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition.Value">
            <summary>
            Gets the int value corresponding to this partition
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition.IsSpecial">
            <summary>
                Gets whether or not this is one of the special
                partition values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Kafka.Partition.ToString">
            <summary>
            Based on the original implementation
            https://github.com/confluentinc/confluent-kafka-dotnet/blob/master/src/Confluent.Kafka/Partition.cs#L217-L224
            </summary>
            <returns>A string that represents the Partition object</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerExternalScopeProviderForEachScopeIntegration">
            <summary>
            LoggerExternalScopeProvider.ForEach&lt;TState&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerExternalScopeProviderForEachScopeIntegration.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TAction">The type of the action</typeparam>
            <typeparam name="TState">The type of the state</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="callback">The callback to be invoked per scope</param>
            <param name="state">The state to pass to the callback</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerExternalScopeProviderForEachScopeIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerFactoryScopeProviderForEachScopeIntegration">
            <summary>
            LoggerFactoryScopeProvider.ForEach&lt;TState&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerFactoryScopeProviderForEachScopeIntegration.OnMethodBegin``3(``0,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TAction">The type of the action</typeparam>
            <typeparam name="TState">The type of the state</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="callback">The callback to be invoked per scope</param>
            <param name="state">The state to pass to the callback</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Logging.ILogger.LoggerFactoryScopeProviderForEachScopeIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.AppenderAttachedImplIntegration">
            <summary>
            LoggerFactoryScopeProvider.ForEach&lt;TState&gt; calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.AppenderAttachedImplIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TLoggingEvent">The type of the logging event</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="loggingEvent">The logging event</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.AppenderAttachedImplIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Original return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.ILoggingEvent">
            <summary>
            log4net.Core.LoggingEvent interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Log4Net.ILoggingEvent.Properties">
            <summary>
            Gets the properties of the logging event
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_ExecuteAsync_Integration">
            <summary>
            MongoDB.Driver.Core.WireProtocol.IWireProtocol&lt;TResult&gt; instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_ExecuteAsync_Integration.OnMethodBegin``1(``0,System.Object,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="connection">The MongoDB connection</param>
            <param name="cancellationToken">The cancellation token</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_ExecuteAsync_Integration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Execute_Integration">
            <summary>
            MongoDB.Driver.Core.WireProtocol.IWireProtocol instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Execute_Integration.OnMethodBegin``1(``0,System.Object,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="connection">The MongoDB connection</param>
            <param name="cancellationToken">The cancellation token</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Execute_Integration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Generic_Execute_Integration">
            <summary>
            MongoDB.Driver.Core.WireProtocol.IWireProtocol&lt;TResult&gt; instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Generic_Execute_Integration.OnMethodBegin``1(``0,System.Object,System.Threading.CancellationToken)">
            <summary>
            OnMethodBegin callback
            </summary>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="connection">The MongoDB connection</param>
            <param name="cancellationToken">The cancellation token</param>
            <typeparam name="TTarget">Type of the target</typeparam>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.MongoDb.IWireProtocol_Generic_Execute_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.IMessageQueue">
            <summary>
            message queue proxy
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.IMessageQueue.Transactional">
             <summary>
                 Gets a value indicating whether the queue accepts only transactions.
            
             Returns:
                 true if the queue accepts only messages sent as part of a transaction; otherwise,
                 false.
            
             Exceptions:
               T:System.Messaging.MessageQueueException:
                 An error occurred when accessing a Message Queuing method.
             </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.IMessageQueue.Path">
             <summary>
                 Gets the queue's path. Setting the System.Messaging.MessageQueue.Path
                 causes the System.Messaging.MessageQueue to point to a new queue.
            
             Returns:
                 The queue that is referenced by the System.Messaging.MessageQueue. The default
                 depends on which System.Messaging.MessageQueue.#ctor constructor you use; it
                 is either null or is specified by the constructor's path parameter.
            
             Exceptions:
               T:System.ArgumentException:
                 The path is not valid, possibly because the syntax is not valid.
             </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType">
            <summary>
            message queue transaction type
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType.None">
            <summary>
            Operation will not be transactional
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType.Automatic">
            <summary>
            A transaction type used for Microsoft Transaction Server (MTS) or COM+ 1.0 Services.
            If there is already an MTS transaction context, it will be used when sending
            or receiving the message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType.Single">
            <summary>
            A transaction type used for single internal transactions.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_Purge_Integration">
            <summary>
            Msmq calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_Purge_Integration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TMessageQueue">Message queue</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_Purge_Integration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>CallTargetReturn</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_ReceiveCurrent_Integration">
            <summary>
            Msmq calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_ReceiveCurrent_Integration.OnMethodBegin``1(``0,System.TimeSpan,System.Int32,System.Object,System.Object,System.Object,Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TMessageQueue">Generic TMessageQueue</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method, the message queue</param>
            <param name="timeout">A System.TimeSpan that indicates the time to wait until a new message is available for inspection.</param>
            <param name="action">If action is 0, it's a peek (message remains in the queue), otherwise it's a receive</param>
            <param name="cursorHandle">A System.Messaging.Cursor that maintains a specific position in the message queue.</param>
            <param name="messagePropertyFilter"> Controls and selects the properties that are retrieved when peeking or receiving messages from a message queue.</param>2
            <param name="messageQueueTransaction">transaction</param>
            <param name="messageQueueTransactionType">type of transaction</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_ReceiveCurrent_Integration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">Type of the result</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="messageResult">message result</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>CallTargetReturn</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_SendInternal_Integration">
            <summary>
            Msmq calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_SendInternal_Integration.OnMethodBegin``1(``0,System.Object,System.Object,Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueueTransactionType)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TMessageQueue">Message queue</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message itself, can be of any type</param>
            <param name="messageQueueTransaction">Message queue transaction can be null</param>
            <param name="messageQueueTransactionType">Message queue transaction type can be null</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Msmq.MessageQueue_SendInternal_Integration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>CallTargetReturn</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicDeliverIntegration">
            <summary>
            RabbitMQ.Client BasicDeliver calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicDeliverIntegration.OnMethodBegin``3(``0,System.String,System.UInt64,System.Boolean,System.String,System.String,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBasicProperties">Type of the message properties</typeparam>
            <typeparam name="TBody">Type of the message body</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="consumerTag">The original consumerTag argument</param>
            <param name="deliveryTag">The original deliveryTag argument</param>
            <param name="redelivered">The original redelivered argument</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicDeliverIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicGetIntegration">
            <summary>
            RabbitMQ.Client BasicGet calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicGetIntegration.OnMethodBegin``1(``0,System.String,System.Boolean)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queue">The queue name of the message</param>
            <param name="autoAck">The original autoAck argument</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicGetIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">Type of the BasicGetResult</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="basicGetResult">BasicGetResult instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicPublishIntegration">
            <summary>
            RabbitMQ.Client BasicPublish calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicPublishIntegration.OnMethodBegin``3(``0,System.String,System.String,System.Boolean,``1,``2)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TBasicProperties">Type of the message properties</typeparam>
            <typeparam name="TBody">Type of the message body</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="mandatory">The mandatory routing flag.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.BasicPublishIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.ExchangeDeclareIntegration">
            <summary>
            RabbitMQ.Client ExchangeDeclare calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.ExchangeDeclareIntegration.OnMethodBegin``1(``0,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="type">Type of the exchange.</param>
            <param name="passive">The original passive setting</param>
            <param name="durable">The original durable setting</param>
            <param name="autoDelete">The original autoDelete setting</param>
            <param name="internal">The original internal setting</param>
            <param name="nowait">The original nowait setting</param>
            <param name="arguments">The original arguments setting</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.ExchangeDeclareIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicGetResult">
            <summary>
            BasicGetResult interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicGetResult.Body">
            <summary>
            Gets the message body of the result
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicGetResult.BasicProperties">
            <summary>
            Gets the message properties
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties">
            <summary>
            BasicProperties interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties.Headers">
            <summary>
            Gets or sets the headers of the message
            </summary>
            <returns>Message headers</returns>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties.DeliveryMode">
            <summary>
            Gets the delivery mode of the message
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBasicProperties.IsDeliveryModePresent">
            <summary>
            Returns true if the DeliveryMode property is present
            </summary>
            <returns>true if the DeliveryMode property is present</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBody">
            <summary>
            Body interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.IBody.Length">
            <summary>
            Gets the length of the message body
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueBindIntegration">
            <summary>
            RabbitMQ.Client QueueBind calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueBindIntegration.OnMethodBegin``1(``0,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queue">Name of the queue.</param>
            <param name="exchange">The original exchange argument.</param>
            <param name="routingKey">The original routingKey argument.</param>
            <param name="arguments">The original arguments setting</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueBindIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueDeclareIntegration">
            <summary>
            RabbitMQ.Client QueueDeclare calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueDeclareIntegration.OnMethodBegin``1(``0,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="queue">Name of the queue.</param>
            <param name="passive">The original passive setting</param>
            <param name="durable">The original durable setting</param>
            <param name="exclusive">The original exclusive settings</param>
            <param name="autoDelete">The original autoDelete setting</param>
            <param name="nowait">The original nowait setting</param>
            <param name="arguments">The original arguments setting</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.RabbitMQ.QueueDeclareIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A default CallTargetReturn to satisfy the CallTarget contract</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.IRedisNativeClient">
            <summary>
            Redis native client for duck typing
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.IRedisNativeClient.Host">
            <summary>
            Gets Client Hostname
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.IRedisNativeClient.Port">
            <summary>
            Gets Client Port
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.RedisNativeClientSendReceiveIntegration">
            <summary>
            ServiceStack.Redis.RedisNativeClient.SendReceive[T] calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.RedisNativeClientSendReceiveIntegration.OnMethodBegin``3(``0,System.Byte[][],``1,``2,System.Boolean)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TFunc">Type of the result processor</typeparam>
            <typeparam name="TAction">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="cmdWithBinaryArgs">Cmd with binary args</param>
            <param name="fn">Function instance</param>
            <param name="completePipelineFn">Complete pipeline function instance</param>
            <param name="sendWithoutRead">Send without read boolean</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.ServiceStack.RedisNativeClientSendReceiveIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteAsyncImplIntegration">
            <summary>
            StackExchange.Redis.ConnectionMultiplexer.ExecuteAsyncImpl calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteAsyncImplIntegration.OnMethodBegin``4(``0,``1,``2,System.Object,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TProcessor">Type of the result processor</typeparam>
            <typeparam name="TServerEndPoint">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message instance</param>
            <param name="resultProcessor">Result processor instance</param>
            <param name="state">State instance</param>
            <param name="serverEndPoint">Server endpoint instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteAsyncImplIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteSyncImplIntegration">
            <summary>
            StackExchange.Redis.ConnectionMultiplexer.ExecuteSyncImpl calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteSyncImplIntegration.OnMethodBegin``4(``0,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TProcessor">Type of the result processor</typeparam>
            <typeparam name="TServerEndPoint">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message instance</param>
            <param name="resultProcessor">Result processor instance</param>
            <param name="serverEndPoint">Server endpoint instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.ConnectionMultiplexerExecuteSyncImplIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IConnectionMultiplexer">
            <summary>
            Connection multiplexer ducktype structure
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IConnectionMultiplexer.Configuration">
            <summary>
            Gets the conection configuration
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IMessageData">
            <summary>
            Message data interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IMessageData.CommandAndKey">
            <summary>
            Gets message command and key
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IRedisBase">
            <summary>
            RedisBase interface for ducktyping
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.IRedisBase.Multiplexer">
            <summary>
            Gets multiplexer data structure
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.MultiplexerData">
            <summary>
            Multiplexer data structure for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.MultiplexerData.Configuration">
            <summary>
            Multiplexer configuration
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteAsyncIntegration">
            <summary>
            StackExchange.Redis.[RedisBase/RedisBatch/RedisTransaction].ExecuteAsync[T] calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteAsyncIntegration.OnMethodBegin``4(``0,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TProcessor">Type of the result processor</typeparam>
            <typeparam name="TServerEndPoint">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message instance</param>
            <param name="resultProcessor">Result processor instance</param>
            <param name="serverEndPoint">Server endpoint instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response, in an async scenario will be T of Task of T</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteSyncIntegration">
            <summary>
            StackExchange.Redis.RedisBase.ExecuteSync[T] calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteSyncIntegration.OnMethodBegin``4(``0,``1,``2,``3)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TMessage">Type of the message</typeparam>
            <typeparam name="TProcessor">Type of the result processor</typeparam>
            <typeparam name="TServerEndPoint">Type of the server end point</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="message">Message instance</param>
            <param name="resultProcessor">Result processor instance</param>
            <param name="serverEndPoint">Server endpoint instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Redis.StackExchange.RedisExecuteSyncIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResponse">Type of the response</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="response">Response instance</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod">
            <summary>
            TestMethod ducktype interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.TestMethodName">
            <summary>
            Gets the test method name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.TestClassName">
            <summary>
            Gets the test class name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.MethodInfo">
            <summary>
            Gets the MethodInfo
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.Arguments">
            <summary>
            Gets the test arguments
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethod.GetAllAttributes(System.Boolean)">
            <summary>
            Gets all attributes
            </summary>
            <param name="inherit">Injerits all the attributes from base classes</param>
            <returns>Attribute array</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethodRunner">
            <summary>
            TestMethodRunner ducktype interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.ITestMethodRunner.TestMethodInfo">
            <summary>
            Gets the TestMethodInfo instance
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestCategoryAttributeStruct">
            <summary>
            TestCategoryAttribute ducktype struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestCategoryAttributeStruct.TestCategories">
            <summary>
            Gets the test categories
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodAttributeExecuteIntegration">
            <summary>
            Microsoft.VisualStudio.TestPlatform.TestFramework.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodAttributeExecuteIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TTestMethod">Type of the ITestMethod</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="testMethod">Test method instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodAttributeExecuteIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodRunnerExecuteIntegration">
            <summary>
            Microsoft.VisualStudio.TestPlatform.TestFramework.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodRunnerExecuteIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestMethodRunnerExecuteIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return value</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestPropertyAttributeStruct">
            <summary>
            TestPropertyAttribute ducktype struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestPropertyAttributeStruct.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestPropertyAttributeStruct.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestResultStruct">
            <summary>
            TestResult ducktype struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestResultStruct.Outcome">
            <summary>
            Gets the outcome enum
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.TestResultStruct.TestFailureException">
            <summary>
            Test failure exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome">
            <summary>
            Unit test outcomes
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Failed">
            <summary>
            Test was executed, but there were issues.
            Issues may involve exceptions or failed assertions.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Inconclusive">
            <summary>
            Test has completed, but we can't say if it passed or failed.
            May be used for aborted tests.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Passed">
            <summary>
            Test was executed without any issues.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.InProgress">
            <summary>
            Test is currently executing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Error">
            <summary>
            There was a system error while we were trying to execute a test.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Timeout">
            <summary>
            The test timed out.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Aborted">
            <summary>
            Test was aborted by the user.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.Unknown">
            <summary>
            Test is in an unknown state
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestOutcome.NotRunnable">
            <summary>
            Test cannot be executed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome">
            <summary>
            UnitTestResult Outcome
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Timeout">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Inconclusive">
            <summary>
            Inconclusive
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Ignored">
            <summary>
            Ignored
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.NotRunnable">
            <summary>
            Not Runnable
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.Passed">
            <summary>
            Passed
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.NotFound">
            <summary>
            Not Found
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultOutcome.InProgress">
            <summary>
            In Progress
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultStruct">
            <summary>
            UnitTestResult ducktype struct
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultStruct.ErrorMessage">
            <summary>
            Gets the error message
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultStruct.ErrorStackTrace">
            <summary>
            Gets the error stacktrace
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestResultStruct.Outcome">
            <summary>
            Gets the outcome enum
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestRunnerRunCleanupIntegration">
            <summary>
            Microsoft.VisualStudio.TestPlatform.TestFramework.Execute calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.MsTestV2.UnitTestRunnerRunCleanupIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite">
            <summary>
            The FailureSite enum indicates the stage of a test
            in which an error or failure occurred.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.Test">
            <summary>
            Failure in the test itself
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.SetUp">
            <summary>
            Failure in the SetUp method
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.TearDown">
            <summary>
            Failure in the TearDown method
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.Parent">
            <summary>
            Failure of a parent test
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.FailureSite.Child">
            <summary>
            Failure of a child test
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ICompositeWorkItem">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.Execution.CompositeWorkItem
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ICompositeWorkItem.Children">
            <summary>
            Gets the List of Child WorkItems
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IMethodInfo">
            <summary>
            DuckTyping interface for NUnit.Framework.Interfaces.IMethodInfo
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IMethodInfo.MethodInfo">
            <summary>
            Gets the MethodInfo for this method.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IPropertyBag">
            <summary>
            DuckTyping interface for NUnit.Framework.Interfaces.IPropertyBag
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IPropertyBag.Keys">
            <summary>
            Gets a collection containing all the keys in the property set
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IPropertyBag.Item(System.String)">
            <summary>
            Gets or sets the list of values for a particular key
            </summary>
            <param name="key">The key for which the values are to be retrieved</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IPropertyBag.Get(System.String)">
            <summary>
            Gets a single value for a key, using the first
            one if multiple values are present and returning
            null if the value is not found.
            </summary>
            <param name="key">the key for which the values are to be retrieved</param>
            <returns>First value of the list for the key; otherwise null.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IResultState">
            <summary>
            DuckTyping interface for NUnit.Framework.Interfaces.ResultState
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IResultState.Status">
            <summary>
            Gets the TestStatus for the test.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IResultState.Site">
            <summary>
            Gets the stage of test execution in which
            the failure or other result took place.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.Test
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.Name">
            <summary>
            Gets the test name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.FullName">
            <summary>
            Gets the fully qualified name of the test
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.Method">
            <summary>
            Gets a MethodInfo for the method implementing this test.
            Returns null if the test is not implemented as a method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.Arguments">
            <summary>
            Gets the arguments to use in creating the test or empty array if none required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITest.Properties">
            <summary>
            Gets the properties for this test
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestExecutionContext">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.TestExecutionContext
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestExecutionContext.CurrentTest">
            <summary>
            Gets the current test
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.TestResult
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult.Test">
            <summary>
            Gets the test with which this result is associated.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult.ResultState">
            <summary>
            Gets the resultstate of the test result.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult.Message">
            <summary>
            Gets the message associated with a test failure.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestResult.StackTrace">
            <summary>
            Gets any stacktrace associated with an error or failure.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestSuite">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.TestSuite
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.ITestSuite.Tests">
            <summary>
            Gets the children tests
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IWorkItem">
            <summary>
            DuckTyping interface for NUnit.Framework.Internal.Execution.WorkItem
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.IWorkItem.Result">
            <summary>
            Gets the test result
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitCompositeWorkItemSkipChildrenIntegration">
            <summary>
            NUnit.Framework.Internal.Execution.CompositeWorkItem.SkipChildren() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitCompositeWorkItemSkipChildrenIntegration.OnMethodBegin``3(``0,``1,``2,System.String)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TSuite">Test suite type</typeparam>
            <typeparam name="TResultState">Result state type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="testSuite">Test suite instance</param>
            <param name="resultState">Result state instance</param>
            <param name="message">Message instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitCompositeWorkItemSkipChildrenIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitSkipCommandExecuteIntegration">
            <summary>
            NUnit.Framework.Internal.Commands.SkipCommand.Execute() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitSkipCommandExecuteIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TContext">ExecutionContext type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionContext">Execution context instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitSkipCommandExecuteIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">TestResult type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Original method return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestAdapterUnloadIntegration">
            <summary>
            NUnit.VisualStudio.TestAdapter.NUnitTestAdapter.Unload() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestAdapterUnloadIntegration.OnMethodEnd``1(``0,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestAssemblyRunnerWaitForCompletionIntegration">
            <summary>
            NUnit.Framework.Api.NUnitTestAssemblyRunner.WaitForCompletion() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestAssemblyRunnerWaitForCompletionIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">TestResult type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Original method return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestMethodCommandExecuteIntegration">
            <summary>
            NUnit.Framework.Internal.Commands.TestMethodCommand.Execute() calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestMethodCommandExecuteIntegration.OnMethodBegin``2(``0,``1)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TContext">ExecutionContext type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="executionContext">Execution context instance</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.NUnitTestMethodCommandExecuteIntegration.OnMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TResult">TestResult type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Original method return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>Return value of the method</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus">
            <summary>
            The TestStatus enum indicates the result of running a test
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Inconclusive">
            <summary>
            The test was inconclusive
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Skipped">
            <summary>
            The test has skipped
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Passed">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Warning">
            <summary>
            There was a warning
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.NUnit.TestStatus.Failed">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.IExceptionAggregator">
            <summary>
            Exception aggregator interface
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.IExceptionAggregator.ToException">
            <summary>
            Extract exception
            </summary>
            <returns>Exception instance</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestCaseStruct">
            <summary>
            TestCase structure
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestCaseStruct.DisplayName">
            <summary>
            Display name
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestCaseStruct.Traits">
            <summary>
            Traits dictionary
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct">
            <summary>
            TestInvoker`1 structure
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.TestClass">
            <summary>
            Test class Type
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.TestMethod">
            <summary>
            Test method MethodInfo
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.TestMethodArguments">
            <summary>
            Test method arguments
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.TestCase">
            <summary>
            Test case
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestInvokerStruct.Aggregator">
            <summary>
            Exception aggregator
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct">
            <summary>
            TestRunner`1 structure
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.TestClass">
            <summary>
            Test class Type
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.TestMethod">
            <summary>
            Test method MethodInfo
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.TestMethodArguments">
            <summary>
            Test method arguments
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.TestCase">
            <summary>
            Test case
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.Aggregator">
            <summary>
            Exception aggregator
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.TestRunnerStruct.SkipReason">
            <summary>
            Skip reason
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestAssemblyFinishedCtorIntegration">
            <summary>
            Xunit.Sdk.TestAssemblyFinished..ctor calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestAssemblyFinishedCtorIntegration.OnMethodBegin``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TArg1">Type of the argument 1</typeparam>
            <typeparam name="TArg2">Type of the argument 2</typeparam>
            <typeparam name="TArg3">Type of the argument 3</typeparam>
            <typeparam name="TArg4">Type of the argument 4</typeparam>
            <typeparam name="TArg5">Type of the argument 5</typeparam>
            <typeparam name="TArg6">Type of the argument 6</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="testCases">Test cases</param>
            <param name="testAssembly">Test assembly</param>
            <param name="executionTime">Execution time</param>
            <param name="testsRun">Test runs</param>
            <param name="testsFailed">Tests failed</param>
            <param name="testsSkipped">Tests skipped</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestAssemblyRunnerRunTestCollectionAsyncIntegration">
            <summary>
            Xunit.Sdk.TestAssemblyRunner`1.RunTestCollectionAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestAssemblyRunnerRunTestCollectionAsyncIntegration.OnAsyncMethodEnd``2(``0,``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <typeparam name="TReturn">Type of the return type</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestInvokerRunAsyncIntegration">
            <summary>
            Xunit.Sdk.TestInvoker`1.RunAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestInvokerRunAsyncIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestInvokerRunAsyncIntegration.OnAsyncMethodEnd``1(``0,System.Decimal,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            OnAsyncMethodEnd callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception instance in case the original code threw an exception.</param>
            <param name="state">Calltarget state value</param>
            <returns>A response value, in an async scenario will be T of Task of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestRunnerRunAsyncIntegration">
            <summary>
            Xunit.Sdk.TestRunner`1.RunAsync calltarget instrumentation
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.AutoInstrumentation.Testing.XUnit.XUnitTestRunnerRunAsyncIntegration.OnMethodBegin``1(``0)">
            <summary>
            OnMethodBegin callback
            </summary>
            <typeparam name="TTarget">Type of the target</typeparam>
            <param name="instance">Instance value, aka `this` of the instrumented method.</param>
            <returns>Calltarget state value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker">
            <summary>
            CallTarget Invoker
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``2(``1)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <param name="instance">Instance value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``3(``1,``2)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``4(``1,``2,``3)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``5(``1,``2,``3,``4)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``6(``1,``2,``3,``4,``5)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``7(``1,``2,``3,``4,``5,``6)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``8(``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <typeparam name="TArg6">Sixth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <param name="arg6">Sixth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``9(``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <typeparam name="TArg6">Sixth argument type</typeparam>
            <typeparam name="TArg7">Seventh argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <param name="arg6">Sixth argument value</param>
            <param name="arg7">Seventh argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``10(``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Begin Method Invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TArg1">First argument type</typeparam>
            <typeparam name="TArg2">Second argument type</typeparam>
            <typeparam name="TArg3">Third argument type</typeparam>
            <typeparam name="TArg4">Fourth argument type</typeparam>
            <typeparam name="TArg5">Fifth argument type</typeparam>
            <typeparam name="TArg6">Sixth argument type</typeparam>
            <typeparam name="TArg7">Seventh argument type</typeparam>
            <typeparam name="TArg8">Eighth argument type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arg1">First argument value</param>
            <param name="arg2">Second argument value</param>
            <param name="arg3">Third argument value</param>
            <param name="arg4">Fourth argument value</param>
            <param name="arg5">Fifth argument value</param>
            <param name="arg6">Sixth argument value</param>
            <param name="arg7">Seventh argument value</param>
            <param name="arg8">Eighth argument value</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.BeginMethod``2(``1,System.Object[])">
            <summary>
            Begin Method Invoker Slow Path
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <param name="instance">Instance value</param>
            <param name="arguments">Object arguments array</param>
            <returns>Call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.EndMethod``2(``1,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            End Method with Void return value invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <param name="instance">Instance value</param>
            <param name="exception">Exception value</param>
            <param name="state">CallTarget state</param>
            <returns>CallTarget return structure</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.EndMethod``3(``1,``2,System.Exception,Datadog.Trace.ClrProfiler.CallTarget.CallTargetState)">
            <summary>
            End Method with Return value invoker
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <typeparam name="TReturn">Return type</typeparam>
            <param name="instance">Instance value</param>
            <param name="returnValue">Return value</param>
            <param name="exception">Exception value</param>
            <param name="state">CallTarget state</param>
            <returns>CallTarget return structure</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.LogException``2(System.Exception)">
            <summary>
            Log integration exception
            </summary>
            <typeparam name="TIntegration">Integration type</typeparam>
            <typeparam name="TTarget">Target type</typeparam>
            <param name="exception">Integration exception instance</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetInvoker.GetDefaultValue``1">
            <summary>
            Gets the default value of a type
            </summary>
            <typeparam name="T">Type to get the default value</typeparam>
            <returns>Default value of T</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1">
            <summary>
            Call target return value
            </summary>
            <typeparam name="T">Type of the return value</typeparam>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1"/> struct.
            </summary>
            <param name="returnValue">Return value</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1.GetDefault">
            <summary>
            Gets the default call target return value (used by the native side to initialize the locals)
            </summary>
            <returns>Default call target return value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1.GetReturnValue">
            <summary>
            Gets the return value
            </summary>
            <returns>Return value</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn`1.ToString">
            <summary>
            ToString override
            </summary>
            <returns>String value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn">
            <summary>
            Call target return value
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetReturn.GetDefault">
            <summary>
            Gets the default call target return value (used by the native side to initialize the locals)
            </summary>
            <returns>Default call target return value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState">
            <summary>
            Call target execution state
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.#ctor(Datadog.Trace.Scope)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState"/> struct.
            </summary>
            <param name="scope">Scope instance</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.#ctor(Datadog.Trace.Scope,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState"/> struct.
            </summary>
            <param name="scope">Scope instance</param>
            <param name="state">Object state instance</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.#ctor(Datadog.Trace.Scope,System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState"/> struct.
            </summary>
            <param name="scope">Scope instance</param>
            <param name="state">Object state instance</param>
            <param name="startTime">The intended start time of the scope, intended for scopes created in the OnMethodEnd handler</param>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.Scope">
            <summary>
            Gets the CallTarget BeginMethod scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.State">
            <summary>
            Gets the CallTarget BeginMethod state
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.StartTime">
            <summary>
            Gets the CallTarget state StartTime
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.GetDefault">
            <summary>
            Gets the default call target state (used by the native side to initialize the locals)
            </summary>
            <returns>Default call target state</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.CallTarget.CallTargetState.ToString">
            <summary>
            ToString override
            </summary>
            <returns>String value</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.CallTarget.PreserveContextAttribute">
            <summary>
            Apply on a calltarget async callback to indicate that the method
            should execute under the current synchronization context/task scheduler.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Emit.DynamicMethodBuilder`1">
            <summary>
            Helper class to create instances of <see cref="T:System.Reflection.Emit.DynamicMethod"/> using <see cref="N:System.Reflection.Emit"/>.
            </summary>
            <typeparam name="TDelegate">The type of delegate</typeparam>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Emit.DynamicMethodBuilder`1.GetOrCreateMethodCallDelegate(System.Type,System.String,Datadog.Trace.ClrProfiler.Emit.OpCodeValue,System.Type,System.Type[],System.Type[])">
            <summary>
            Gets a previously cache delegate used to call the specified method,
            or creates and caches a new delegate if not found.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the method.</param>
            <param name="methodName">The name of the method.</param>
            <param name="callOpCode">The OpCode to use in the method call.</param>
            <param name="returnType">The method's return type.</param>
            <param name="methodParameterTypes">optional types for the method parameters</param>
            <param name="methodGenericArguments">optional generic type arguments for a generic method</param>
            <returns>A <see cref="T:System.Delegate"/> that can be used to execute the dynamic method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Emit.DynamicMethodBuilder`1.CreateMethodCallDelegate(System.Type,System.String,Datadog.Trace.ClrProfiler.Emit.OpCodeValue,System.Type[],System.Type[])">
            <summary>
            Creates a simple <see cref="T:System.Reflection.Emit.DynamicMethod"/> using <see cref="N:System.Reflection.Emit"/> that
            calls a method with the specified name and parameter types.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that contains the method to call when the returned delegate is executed..</param>
            <param name="methodName">The name of the method to call when the returned delegate is executed.</param>
            <param name="callOpCode">The OpCode to use in the method call.</param>
            <param name="methodParameterTypes">If not null, use method overload that matches the specified parameters.</param>
            <param name="methodGenericArguments">If not null, use method overload that has the same number of generic arguments.</param>
            <returns>A <see cref="T:System.Delegate"/> that can be used to execute the dynamic method.</returns>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Emit.MemberResult`1.NotFound">
            <summary>
            A static value used to represent a member that was not found.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Emit.MethodBuilder`1.Cache">
            <summary>
            Global dictionary for caching reflected delegates
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Emit.MethodBuilder`1.ForceMdTokenLookup">
            <summary>
            Feature flag used primarily for forcing testing of the token lookup strategy.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Emit.MethodBuilder`1.ForceFallbackLookup">
            <summary>
            Feature flag used primarily for forcing testing of the fallback lookup strategy.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Emit.ModuleLookup.MaxFailures">
            <summary>
            Some naive upper limit to resolving assemblies that we can use to stop making expensive calls.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Emit.ObjectExtensions">
            <summary>
            Provides helper methods to access object members by emitting IL dynamically.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Emit.ObjectExtensions.TryCallMethod``2(System.Object,System.String,``0,``1@)">
            <summary>
            Tries to call an instance method with the specified name, a single parameter, and a return value.
            </summary>
            <typeparam name="TArg1">The type of the method's single parameter.</typeparam>
            <typeparam name="TResult">The type of the method's result value.</typeparam>
            <param name="source">The object to call the method on.</param>
            <param name="methodName">The name of the method to call.</param>
            <param name="arg1">The value to pass as the method's single argument.</param>
            <param name="value">The value returned by the method.</param>
            <returns><c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Emit.ObjectExtensions.TryCallVoidMethod``2(System.Object,System.String,``0,``1)">
            <summary>
            Tries to call an instance method with the specified name, two parameters, and no return value.
            </summary>
            <typeparam name="TArg1">The type of the method's first parameter.</typeparam>
            <typeparam name="TArg2">The type of the method's second parameter.</typeparam>
            <param name="source">The object to call the method on.</param>
            <param name="methodName">The name of the method to call.</param>
            <param name="arg1">The value to pass as the method's first argument.</param>
            <param name="arg2">The value to pass as the method's second argument.</param>
            <returns><c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Emit.ObjectExtensions.TryCallMethod``1(System.Object,System.String,``0@)">
            <summary>
            Tries to call an instance method with the specified name and a return value.
            </summary>
            <typeparam name="TResult">The type of the method's result value.</typeparam>
            <param name="source">The object to call the method on.</param>
            <param name="methodName">The name of the method to call.</param>
            <param name="value">The value returned by the method.</param>
            <returns><c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Emit.ObjectExtensions.TryGetPropertyValue``1(System.Object,System.String,``0@)">
            <summary>
            Tries to get the value of an instance property with the specified name.
            </summary>
            <typeparam name="TResult">The type of the property.</typeparam>
            <param name="source">The value that contains the property.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value of the property, or <c>null</c> if the property is not found.</param>
            <returns><c>true</c> if the property exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Emit.ObjectExtensions.TryGetFieldValue``1(System.Object,System.String,``0@)">
            <summary>
            Tries to get the value of an instance field with the specified name.
            </summary>
            <typeparam name="TResult">The type of the field.</typeparam>
            <param name="source">The value that contains the field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="value">The value of the field, or <c>null</c> if the field is not found.</param>
            <returns><c>true</c> if the field exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Emit.OpCodeValue.Call">
            <seealso cref="F:System.Reflection.Emit.OpCodes.Call"/>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Emit.OpCodeValue.Callvirt">
            <seealso cref="F:System.Reflection.Emit.OpCodes.Callvirt"/>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Helpers.Interception">
            <summary>
            Convenience properties and methods for integration definitions.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.InsertFirstInterceptMethodAttribute">
            <summary>
            Attribute that indicates that the decorated method is meant to intercept calls
            to another method. Used to generate the integration definitions file.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.InsertFirstInterceptMethodAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.InsertFirstInterceptMethodAttribute"/> class.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Instrumentation">
            <summary>
            Provides access to the profiler CLSID and whether it is attached to the process.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Instrumentation._firstInitialization">
            <summary>
            Indicates whether we're initializing Instrumentation for the first time
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Instrumentation.ProfilerClsid">
            <summary>
            Gets the CLSID for the Datadog .NET profiler
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.Instrumentation.ProfilerAttached">
            <summary>
            Gets a value indicating whether Datadog's profiler is attached to the current process.
            </summary>
            <value>
              <c>true</c> if the profiler is currently attached; <c>false</c> otherwise.
            </value>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Instrumentation.Initialize">
            <summary>
            Initializes global instrumentation values.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute">
            <summary>
            Attribute that indicates that the decorated class is meant to intercept a method
            by modifying the method body with callbacks. Used to generate the integration definitions file.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyName">
            <summary>
            Gets or sets the name of the assembly that contains the target method to be intercepted.
            Required if <see cref="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyNames"/> is not set.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyNames">
            <summary>
            Gets or sets the name of the assemblies that contain the target method to be intercepted.
            Required if <see cref="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyName"/> is not set.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.TypeName">
            <summary>
            Gets or sets the name of the type that contains the target method to be intercepted.
            Required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.MethodName">
            <summary>
            Gets or sets the name of the target method to be intercepted.
            If null, default to the name of the decorated method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.ReturnTypeName">
            <summary>
            Gets or sets the return type name
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.ParameterTypeNames">
            <summary>
            Gets or sets the parameters type array for the target method to be intercepted.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.VersionRange">
            <summary>
            Gets the target version range for <see cref="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.AssemblyName"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.MinimumVersion">
            <summary>
            Gets or sets the target minimum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.MaximumVersion">
            <summary>
            Gets or sets the target maximum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.IntegrationName">
            <summary>
            Gets or sets the integration name. Allows to group several integration with a single integration name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.CallTargetType">
            <summary>
            Gets or sets the CallTarget Class used to instrument the method
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InstrumentMethodAttribute.TargetMethodArgumentsToLoad">
            <summary>
            Gets or sets the indices to pass from the CallTarget-instrumented method into the instrumentation method
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.AdoNet.DbCommandIntegration">
            <summary>
            Instrumentation wrappers for <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.DbCommandIntegration.ExecuteReader(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Data.Common.DbCommand.ExecuteReader"/>.
            </summary>
            <param name="command">The object referenced "this" in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.DbCommandIntegration.ExecuteReaderWithBehavior(System.Object,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)"/>.
            </summary>
            <param name="command">The object referenced "this" in the instrumented method.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.DbCommandIntegration.ExecuteReaderAsync(System.Object,System.Int32,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync"/>.
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.DbCommandIntegration.ExecuteNonQuery(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery"/>.
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.DbCommandIntegration.ExecuteNonQueryAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)"/>
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.DbCommandIntegration.ExecuteScalar(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Data.Common.DbCommand.ExecuteScalar"/>
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.DbCommandIntegration.ExecuteScalarAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)"/>
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.AdoNet.IDbCommandIntegration">
            <summary>
            Instrumentation wrappers for <see cref="T:System.Data.IDbCommand"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.IDbCommandIntegration.ExecuteReader(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Data.IDbCommand.ExecuteReader"/>.
            </summary>
            <param name="command">The object referenced "this" in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.IDbCommandIntegration.ExecuteReaderWithBehavior(System.Object,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)"/>.
            </summary>
            <param name="command">The object referenced "this" in the instrumented method.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.IDbCommandIntegration.ExecuteNonQuery(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for IDbCommand.ExecuteNonQuery().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.IDbCommandIntegration.ExecuteScalar(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for IDbCommand.ExecuteScalar().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration">
            <summary>
            Instrumentation wrappers for <see cref="T:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteReader(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for NpgsqlCommand.ExecuteReader() />
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteReaderWithBehavior(System.Object,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for NpgsqlCommand.ExecuteReader(CommandBehavior).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteReaderAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for NpgsqlCommand.ExecuteReaderAsync(CancellationToken).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteReaderAsyncInternal``1(System.Data.Common.DbCommand,System.Threading.CancellationToken,System.Func{System.Data.Common.DbCommand,System.Threading.CancellationToken,System.Object})">
            <summary>
            Calls the underlying ExecuteReaderAsync and traces the request.
            </summary>
            <typeparam name="T">The type of the generic Task instantiation</typeparam>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="instrumentedMethod">A delegate for the method we are instrumenting</param>
            <returns>A task with the result</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteReaderAsyncWithBehaviorAndCancellation(System.Object,System.Int32,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for NpgsqlCommand.ExecuteReaderAsync(CommandBehavior, CancellationToken).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteReaderAsyncWithBehaviorAndCancellationInternal``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Threading.CancellationToken,System.Func{System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Threading.CancellationToken,System.Object})">
            <summary>
            Calls the underlying ExecuteReaderAsync and traces the request.
            </summary>
            <typeparam name="T">The type of the generic Task instantiation</typeparam>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="commandBehavior">The command behavior</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="instrumentedMethod">A delegate for the method we are instrumenting</param>
            <returns>A task with the result</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteNonQuery(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for NpgsqlCommand.ExecuteNonQuery().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteNonQueryAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for NpgsqlCommand.ExecuteNonQueryAsync(CancellationToken).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteScalar(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for NpgsqlCommand.ExecuteScalar().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.NpgsqlCommandIntegration.ExecuteScalarAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for NpgsqlCommand.ExecuteScalarAsync(CancellationToken).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration">
            <summary>
            Instrumentation wrappers for <c>System.Data.SqlClient.SqlCommand</c>
            and <c>Microsoft.Data.SqlClient.SqlCommand</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.SystemSqlClientExecuteReader(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for System.Data.SqlCommand.ExecuteReader().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.MicrosoftSqlClientExecuteReader(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for Microsoft.Data.SqlCommand.ExecuteReader().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.SystemSqlClientExecuteReaderWithBehavior(System.Object,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for System.Data.SqlCommand.ExecuteReader(CommandBehavior).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.MicrosoftSqlClientExecuteReaderWithBehavior(System.Object,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for Microsoft.Data.SqlCommand.ExecuteReader().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.SystemSqlClientExecuteReaderAsync(System.Object,System.Int32,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for System.Data.SqlCommand.ExecuteReaderAsync().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.MicrosoftSqlClientExecuteReaderAsync(System.Object,System.Int32,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for Microsoft.Data.SqlCommand.ExecuteReaderAsync().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="behavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.ExecuteReaderAsyncInternal``1(System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Threading.CancellationToken,System.Func{System.Data.Common.DbCommand,System.Data.CommandBehavior,System.Threading.CancellationToken,System.Object})">
            <summary>
            Calls the underlying ExecuteReaderAsync and traces the request.
            </summary>
            <typeparam name="T">The type of the generic Task instantiation</typeparam>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="commandBehavior">The <see cref="T:System.Data.CommandBehavior"/> value used in the original method call.</param>
            <param name="cancellationToken">The cancellation token</param>
            <param name="instrumentedMethod">A delegate for the method we are instrumenting</param>
            <returns>A task with the result</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.SystemSqlClientExecuteNonQuery(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for System.Data.SqlCommand.ExecuteNonQuery().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.MicrosoftSqlClientExecuteNonQuery(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for Microsoft.Data.SqlCommand.ExecuteNonQuery().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.SystemSqlClientExecuteNonQueryAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for System.Data.SqlCommand.ExecuteNonQueryAsync(CancellationToken).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.MicrosoftSqlClientExecuteNonQueryAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for Microsoft.Data.SqlCommand.ExecuteNonQueryAsync(CancellationToken).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.SystemSqlClientExecuteScalar(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for System.Data.SqlCommand.ExecuteScalar().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.MicrosoftSqlClientExecuteScalar(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for Microsoft.Data.SqlCommand.ExecuteScalar().
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.SystemSqlClientExecuteScalarAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for System.Data.SqlCommand.ExecuteScalarAsync(CancellationToken).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.SqlCommandIntegration.MicrosoftSqlClientExecuteScalarAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for Microsoft.Data.SqlCommand.ExecuteScalarAsync(CancellationToken).
            </summary>
            <param name="command">The object referenced by this in the instrumented method.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.AdoNet.Log4NetIntegration">
            <summary>
            Instrumentation wrappers for log4net.Util.AppenderAttachedImpl.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AdoNet.Log4NetIntegration.AppendLoopOnAppenders(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for log4net.Util.AppenderAttachedImpl.AppendLoopOnAppenders.
            </summary>
            <param name="impl">The object referenced by this in the instrumented method.</param>
            <param name="loggingEvent">The logging event passed to the instrumented method.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The value returned by the instrumented method.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.AdoNet.Log4NetIntegration.LoggingEventStruct">
            <summary>
            LoggingEvent struct for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.AdoNet.Log4NetIntegration.LoggingEventStruct.Properties">
            <summary>
            Gets the properties of the logging event
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.AspNet.AspNetThreadContextIntegration">
            <summary>
            An ASP.NET integration to ensure that the scope initialized by the HttpModule
            is stored in the execution context.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AspNet.AspNetThreadContextIntegration.AssociateWithCurrentThread(System.Object,System.Boolean,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it.
            </summary>
            <param name="threadContext">The ThreadContext instance we are replacing.</param>
            <param name="setImpersonationContext">The setImpersonationContext flag.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.AspNet.AspNetThreadContextIntegration.DisassociateFromCurrentThread(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it.
            </summary>
            <param name="threadContext">The ThreadContext instance we are replacing.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.AspNet.AspNetThreadContextIntegration.ThreadContextStruct">
            <summary>
            ThreadContext struct for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.AspNet.AspNetThreadContextIntegration.ThreadContextStruct.HttpContext">
            <summary>
            HttpContext
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.AspNet.AspNetThreadContextIntegration.HttpContextStruct">
            <summary>
            HttpContext struct for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.AspNet.AspNetThreadContextIntegration.HttpContextStruct.Items">
            <summary>
            Items dictionary
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.ElasticsearchNet5Integration">
            <summary>
            Traces an Elasticsearch pipeline
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.ElasticsearchNet5Integration.CallElasticsearch``1(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Traces a synchronous call to Elasticsearch.
            </summary>
            <typeparam name="TResponse">The type of the response</typeparam>
            <param name="pipeline">The pipeline for the original method</param>
            <param name="requestData">The request data</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original result</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.ElasticsearchNet5Integration.CallElasticsearchAsync``1(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Traces an asynchronous call to Elasticsearch.
            </summary>
            <typeparam name="TResponse">Type type of the response</typeparam>
            <param name="pipeline">The pipeline for the original method</param>
            <param name="requestData">The request data</param>
            <param name="boxedCancellationToken">A cancellation token</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original result</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.ElasticsearchNet5Integration.CallElasticsearchAsyncInternal``1(System.Object,System.Object,System.Threading.CancellationToken,System.Func{System.Object,System.Object,System.Threading.CancellationToken,System.Object})">
            <summary>
            Traces an asynchronous call to Elasticsearch.
            </summary>
            <typeparam name="T">Type type of the Task</typeparam>
            <param name="pipeline">The pipeline for the original method</param>
            <param name="requestData">The request data</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="originalMethod">A delegate for the method we are instrumenting</param>
            <returns>The original result</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.ElasticsearchNet6Integration">
            <summary>
            Traces an Elasticsearch pipeline
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.ElasticsearchNet6Integration.CallElasticsearch``1(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Traces a synchronous call to Elasticsearch.
            </summary>
            <typeparam name="TResponse">The type of the response</typeparam>
            <param name="pipeline">The pipeline for the original method</param>
            <param name="requestData">The request data</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original result</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.ElasticsearchNet6Integration.CallElasticsearchAsync``1(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Traces an asynchronous call to Elasticsearch.
            </summary>
            <typeparam name="TResponse">Type type of the response</typeparam>
            <param name="pipeline">The pipeline for the original method</param>
            <param name="requestData">The request data</param>
            <param name="boxedCancellationToken">A cancellation token</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original result</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.ElasticsearchNet6Integration.CallElasticsearchAsyncInternal``1(System.Object,System.Object,System.Threading.CancellationToken,System.Int32,System.Int32,System.Int64)">
            <summary>
            Traces an asynchronous call to Elasticsearch.
            </summary>
            <typeparam name="TResponse">Type type of the response</typeparam>
            <param name="pipeline">The pipeline for the original method</param>
            <param name="requestData">The request data</param>
            <param name="cancellationToken">A cancellation token</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original result</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.GraphQLIntegration">
            <summary>
            Tracing integration for GraphQL.Server.Transports.AspNetCore
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.GraphQLIntegration.Validate(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it.
            </summary>
            <param name="documentValidator">The instance of GraphQL.Validation.IDocumentValidator.</param>
            <param name="originalQuery">The source of the original GraphQL query.</param>
            <param name="schema">The GraphQL schema.</param>
            <param name="document">The GraphQL document.</param>
            <param name="rules">The list of validation rules.</param>
            <param name="userContext">The user context.</param>
            <param name="inputs">The input variables.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.GraphQLIntegration.ExecuteAsync(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it.
            </summary>
            <param name="executionStrategy">The instance of GraphQL.Execution.IExecutionStrategy.</param>
            <param name="context">The execution context of the GraphQL operation.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.HttpMessageHandlerIntegration">
            <summary>
            Tracer integration for HttpClientHandler.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.HttpMessageHandlerIntegration.HttpMessageHandler_SendAsync(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for HttpMessageHandler.SendAsync/>.
            </summary>
            <param name="handler">The HttpMessageHandler instance to instrument.</param>
            <param name="request">The HttpRequestMessage that represents the current HTTP request.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>Returns the value returned by the inner method call.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.HttpMessageHandlerIntegration.HttpMessageHandler_Send(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for HttpMessageHandler.Send/>.
            </summary>
            <param name="handler">The HttpMessageHandler instance to instrument.</param>
            <param name="request">The HttpRequestMessage that represents the current HTTP request.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>Returns the value returned by the inner method call.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.HttpMessageHandlerIntegration.HttpClientHandler_SendAsync(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for HttpClientHandler.SendAsync.
            </summary>
            <param name="handler">The HttpClientHandler instance to instrument.</param>
            <param name="request">The HttpRequestMessage that represents the current HTTP request.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>Returns the value returned by the inner method call.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.HttpMessageHandlerIntegration.HttpClientHandler_Send(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for HttpClientHandler.Send.
            </summary>
            <param name="handler">The HttpClientHandler instance to instrument.</param>
            <param name="request">The HttpRequestMessage that represents the current HTTP request.</param>
            <param name="boxedCancellationToken">The <see cref="T:System.Threading.CancellationToken"/> value used in the original method call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>Returns the value returned by the inner method call.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.MongoDbIntegration">
            <summary>
            Tracing integration for MongoDB.Driver.Core.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.MongoDbIntegration.Execute(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it.
            </summary>
            <param name="wireProtocol">The IWireProtocol instance we are replacing.</param>
            <param name="connection">The connection.</param>
            <param name="boxedCancellationToken">A cancellation token.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.MongoDbIntegration.ExecuteGeneric(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it.
            </summary>
            <param name="wireProtocol">The IWireProtocol`1 instance we are replacing.</param>
            <param name="connection">The connection.</param>
            <param name="boxedCancellationToken">A cancellation token.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.MongoDbIntegration.ExecuteAsync(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it.
            </summary>
            <param name="wireProtocol">The IWireProtocol instance we are replacing.</param>
            <param name="connection">The connection.</param>
            <param name="boxedCancellationToken">A cancellation token.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.MongoDbIntegration.ExecuteAsyncGeneric(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it.
            </summary>
            <param name="wireProtocol">The IWireProtocol`1 instance we are replacing.</param>
            <param name="connection">The connection.</param>
            <param name="boxedCancellationToken">A cancellation token.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration">
            <summary>
            Tracing integration for RabbitMQ.Client
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.BasicDeliver(System.Object,System.String,System.UInt64,System.Boolean,System.String,System.String,System.Object,System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it
            </summary>
            <param name="model">Instance value, aka `this` of the instrumented method.</param>
            <param name="consumerTag">The original consumerTag argument</param>
            <param name="deliveryTag">The original deliveryTag argument</param>
            <param name="redelivered">The original redelivered argument</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.BasicDeliverV6(System.Object,System.String,System.UInt64,System.Boolean,System.String,System.String,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it
            </summary>
            <param name="model">Instance value, aka `this` of the instrumented method.</param>
            <param name="consumerTag">The original consumerTag argument</param>
            <param name="deliveryTag">The original deliveryTag argument</param>
            <param name="redelivered">The original redelivered argument</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.BasicGet(System.Object,System.String,System.Boolean,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it
            </summary>
            <param name="model">Instance value, aka `this` of the instrumented method.</param>
            <param name="queue">The queue name of the message</param>
            <param name="autoAck">The original autoAck argument</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original return value.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.BasicPublish(System.Object,System.String,System.String,System.Boolean,System.Object,System.Byte[],System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it
            </summary>
            <param name="model">Instance value, aka `this` of the instrumented method.</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="mandatory">The mandatory routing flag.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.BasicPublishV6(System.Object,System.String,System.String,System.Boolean,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it
            </summary>
            <param name="model">Instance value, aka `this` of the instrumented method.</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="routingKey">The routing key.</param>
            <param name="mandatory">The mandatory routing flag.</param>
            <param name="basicProperties">The message properties.</param>
            <param name="body">The message body.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.ExchangeDeclare(System.Object,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it
            </summary>
            <param name="model">Instance value, aka `this` of the instrumented method.</param>
            <param name="exchange">Name of the exchange.</param>
            <param name="type">Type of the exchange.</param>
            <param name="passive">The original passive setting</param>
            <param name="durable">The original durable setting</param>
            <param name="autoDelete">The original autoDelete setting</param>
            <param name="internal">The original internal setting</param>
            <param name="nowait">The original nowait setting</param>
            <param name="arguments">The original arguments setting</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.QueueBind(System.Object,System.String,System.String,System.String,System.Boolean,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it
            </summary>
            <param name="model">Instance value, aka `this` of the instrumented method.</param>
            <param name="queue">Name of the queue.</param>
            <param name="exchange">The original exchange argument.</param>
            <param name="routingKey">The original routingKey argument.</param>
            <param name="nowait">The original nowait argument.</param>
            <param name="arguments">The original arguments setting</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.QueueDeclare(System.Object,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original method by adding instrumentation code around it
            </summary>
            <param name="model">Instance value, aka `this` of the instrumented method.</param>
            <param name="queue">Name of the queue.</param>
            <param name="passive">The original passive setting</param>
            <param name="durable">The original duable setting</param>
            <param name="exclusive">The original exclusive settings</param>
            <param name="autoDelete">The original autoDelete setting</param>
            <param name="nowait">The original nowait setting</param>
            <param name="arguments">The original arguments setting</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.BasicGetResultStruct.Body">
            <summary>
            Gets the message body of the result
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.BasicGetResultStruct.BasicProperties">
            <summary>
            Gets the message properties
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.IBasicProperties.Headers">
            <summary>
            Gets or sets the headers of the message
            </summary>
            <returns>Message headers</returns>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.IBasicProperties.DeliveryMode">
            <summary>
            Gets the delivery mode of the message
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.IBasicProperties.IsDeliveryModePresent">
            <summary>
            Returns true if the DeliveryMode property is present
            </summary>
            <returns>true if the DeliveryMode property is present</returns>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.RabbitMQIntegration.BodyStruct.Length">
            <summary>
            Gets the length of the message body
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.ServiceStackRedisIntegration">
            <summary>
            Wraps a RedisNativeClient.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.ServiceStackRedisIntegration.SendReceive``1(System.Object,System.Byte[][],System.Object,System.Object,System.Boolean,System.Int32,System.Int32,System.Int64)">
            <summary>
            Traces SendReceive.
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="redisNativeClient">The redis native client</param>
            <param name="cmdWithBinaryArgs">The command with args</param>
            <param name="fn">The function</param>
            <param name="completePipelineFn">An optional function to call to complete a pipeline</param>
            <param name="sendWithoutRead">Whether or to send without waiting for the result</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original result</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.ServiceStackRedisIntegration.RedisNativeClientData">
            <summary>
            Redis native client struct data for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.ServiceStackRedisIntegration.RedisNativeClientData.Host">
            <summary>
            Client Hostname
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.ServiceStackRedisIntegration.RedisNativeClientData.Port">
            <summary>
            Client Port
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.ConnectionMultiplexer">
            <summary>
            Wraps calls to the StackExchange redis library.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.ConnectionMultiplexer.ExecuteSyncImpl``1(System.Object,System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Execute a synchronous redis operation.
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="multiplexer">The connection multiplexer running the command.</param>
            <param name="message">The message to send to redis.</param>
            <param name="processor">The processor to handle the result.</param>
            <param name="server">The server to call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.ConnectionMultiplexer.ExecuteAsyncImpl``1(System.Object,System.Object,System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Execute an asynchronous redis operation.
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="multiplexer">The connection multiplexer running the command.</param>
            <param name="message">The message to send to redis.</param>
            <param name="processor">The processor to handle the result.</param>
            <param name="state">The state to use for the task.</param>
            <param name="server">The server to call.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>An asynchronous task.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.ConnectionMultiplexer.ExecuteAsyncImplInternal``1(System.Object,System.Object,System.Object,System.Object,System.Object,System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,System.Threading.Tasks.Task{``0}})">
            <summary>
            Execute an asynchronous redis operation.
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="multiplexer">The connection multiplexer running the command.</param>
            <param name="message">The message to send to redis.</param>
            <param name="processor">The processor to handle the result.</param>
            <param name="state">The state to use for the task.</param>
            <param name="server">The server to call.</param>
            <param name="originalMethod">The original method.</param>
            <returns>An asynchronous task.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.ConnectionMultiplexer.MultiplexerData">
            <summary>
            Multiplexer data structure for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.ConnectionMultiplexer.MultiplexerData.Configuration">
            <summary>
            Multiplexer configuration
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.ConnectionMultiplexer.MessageData">
            <summary>
            Message data structure for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.ConnectionMultiplexer.MessageData.CommandAndKey">
            <summary>
            Message command and key
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch">
            <summary>
            Traces StackExchange.Redis.RedisBatch
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch.ExecuteAsync``1(System.Object,System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Execute an asynchronous redis operation.
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="redisBase">The object this method is called on</param>
            <param name="message">The message</param>
            <param name="processor">The result processor</param>
            <param name="server">The server</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>An asynchronous task.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch.ExecuteAsyncInternal``1(System.Object,System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Execute an asynchronous redis operation.
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="redisBase">The object this method is called on</param>
            <param name="message">The message</param>
            <param name="processor">The result processor</param>
            <param name="server">The server</param>
            <param name="callOpCode">The <see cref="T:Datadog.Trace.ClrProfiler.Emit.OpCodeValue"/> used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>An asynchronous task.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch.BatchData">
            <summary>
            Batch data structure for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch.BatchData.Multiplexer">
            <summary>
            Multiplexer data structure
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch.MultiplexerData">
            <summary>
            Multiplexer data structure for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch.MultiplexerData.Configuration">
            <summary>
            Multiplexer configuration
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch.MessageData">
            <summary>
            Message data structure for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.RedisBatch.MessageData.CommandAndKey">
            <summary>
            Message command and key
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.StackExchangeRedisHelper">
            <summary>
            Base class for redis integration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.StackExchange.Redis.StackExchangeRedisHelper.GetHostAndPort(System.String)">
            <summary>
            Get the host and port from the config
            </summary>
            <param name="config">The config</param>
            <returns>The host and port</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.Testing.AsyncTool">
            <summary>
            This class is similar to AsyncHelper but removes the params array allocation, the string key allocation and the invoke by reflection.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.AsyncTool.AddContinuation``1(System.Object,System.Exception,``0,System.Func{System.Object,System.Exception,``0,System.Object},Datadog.Trace.ClrProfiler.Integrations.Testing.AsyncTool.TaskContinuationGenerator)">
            <summary>
            Adds a continuation based on the current returnValue
            </summary>
            <typeparam name="TState">Type of the state</typeparam>
            <param name="returnValue">Return value</param>
            <param name="ex">Exception</param>
            <param name="state">State value</param>
            <param name="continuation">Continuation delegate</param>
            <param name="generator">Continuation generator</param>
            <returns>Return value after the continuation</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.AsyncTool.AddContinuation``1(System.Object,System.Exception,``0,System.Func{System.Object,System.Exception,``0,System.Threading.Tasks.Task{System.Object}},Datadog.Trace.ClrProfiler.Integrations.Testing.AsyncTool.TaskContinuationGenerator)">
            <summary>
            Adds a continuation based on the current returnValue
            </summary>
            <typeparam name="TState">Type of the state</typeparam>
            <param name="returnValue">Return value</param>
            <param name="ex">Exception</param>
            <param name="state">State value</param>
            <param name="continuation">Continuation delegate</param>
            <param name="generator">Continuation generator</param>
            <returns>Return value after the continuation</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.AsyncTool.GetTaskContinuationGenerator(System.Type)">
            <summary>
            Gets the task continuation generator
            </summary>
            <param name="type">Task type</param>
            <returns>Task continuation generator for this kind of task</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.Testing.NUnitIntegration">
            <summary>
            Tracing integration for NUnit teting framework
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.NUnitIntegration.TestCommand_Execute(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original NUnit.Framework.Internal.Commands.TestMethodCommand.Execute method by adding instrumentation code around it
            </summary>
            <param name="testMethodCommand">The test method command instance</param>
            <param name="testExecutionContext">Test execution context</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.NUnitIntegration.WorkShift_ShutDown(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original NUnit.Framework.Internal.Execution.WorkShift.ShutDown method by adding instrumentation code around it
            </summary>
            <param name="workShift">The workshift instance</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.NUnitIntegration.NUnitTestAssemblyRunner_WaitForCompletion(System.Object,System.Int32,System.Int32,System.Int32,System.Int64)">
            <summary>
            NUnit.Framework.Api.NUnitTestAssemblyRunner.WaitForCompletion() instrumentation
            </summary>
            <param name="testAssemblyRunner">The NUnitTestAssembly instance</param>
            <param name="timeout">The timeout</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.NUnitIntegration.CompositeWorkItem_SkipChildren(System.Object,System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original NUnit.Framework.Internal.Execution.CompositeWorkItem.SkipChildren method by adding instrumentation code arount it
            </summary>
            <param name="compositeWorkItem">The CompositeWorkItem instance</param>
            <param name="testSuiteOrCompositeWorkItem">The test suite or CompositeWorkItem instance</param>
            <param name="resultState">the result state instance</param>
            <param name="message">The message instance</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.Testing.TestLoggerExtensions">
            <summary>
            Test logger extensions
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.Testing.XUnitIntegration">
            <summary>
            Tracing integration for XUnit testing framework
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.XUnitIntegration.TestInvoker_RunAsync(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original Xunit.Sdk.TestInvoker`1.RunAsync method by adding instrumentation code around it.
            </summary>
            <param name="testInvoker">The TestInvoker instance we are replacing.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.XUnitIntegration.TestRunner_RunAsync(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original Xunit.Sdk.TestRunner`1.RunAsync method by adding instrumentation code around it
            </summary>
            <param name="testRunner">The TestRunner instance we are replacing.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.XUnitIntegration.AssemblyRunner_RunAsync(System.Object,System.Object,System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original Xunit.Sdk.XunitTestAssemblyRunner.BeforeTestAssemblyFinishedAsync method by adding instrumentation code around it
            </summary>
            <param name="xunitTestAssemblyRunner">The XunitTestAssemblyRunner instance we are replacing.</param>
            <param name="messageBus">Message bus instance</param>
            <param name="testCollection">Test collection instance</param>
            <param name="testCases">Test cases instance</param>
            <param name="cancellationTokenSource">Cancellation token source</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>The original method's return value.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.Testing.XUnitIntegration.TestOutputHelper_QueueTestOutput(System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Wrap the original Xunit.Sdk.TestOutputHelper.QueueTestOutput to add the TraceId and SpanId prefix to all outputs.
            </summary>
            <param name="testOutputHelper">The Xunit.Sdk.TestOutputHelper instance</param>
            <param name="output">The string output instance</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.Integrations.WebRequestIntegration">
            <summary>
            Tracer integration for WebRequest.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.WebRequestIntegration.GetRequestStream(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Net.WebRequest.GetRequestStream"/>.
            </summary>
            <param name="webRequest">The <see cref="T:System.Net.WebRequest"/> instance to instrument.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>Returns the value returned by the inner method call.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.WebRequestIntegration.BeginGetRequestStream(System.Object,System.Object,System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)"/>.
            </summary>
            <param name="webRequest">The <see cref="T:System.Net.WebRequest"/> instance to instrument.</param>
            <param name="callback">The callback parameter</param>
            <param name="state">The state parameter</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>Returns the value returned by the inner method call.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.WebRequestIntegration.GetResponse(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Net.WebRequest.GetResponse"/>.
            </summary>
            <param name="webRequest">The <see cref="T:System.Net.WebRequest"/> instance to instrument.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>Returns the value returned by the inner method call.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.Integrations.WebRequestIntegration.GetResponseAsync(System.Object,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instrumentation wrapper for <see cref="M:System.Net.WebRequest.GetResponseAsync"/>.
            </summary>
            <param name="webRequest">The <see cref="T:System.Net.WebRequest"/> instance to instrument.</param>
            <param name="opCode">The OpCode used in the original method call.</param>
            <param name="mdToken">The mdToken of the original method call.</param>
            <param name="moduleVersionPtr">A pointer to the module version GUID.</param>
            <returns>Returns the value returned by the inner method call.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.IntegrationVersionRange">
            <summary>
            Specifies a safe version range for an integration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MinimumMajor">
            <summary>
            Gets the minimum major version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MinimumMinor">
            <summary>
            Gets the minimum minor version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MinimumPatch">
            <summary>
            Gets the minimum patch version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MaximumMajor">
            <summary>
            Gets the maximum major version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MaximumMinor">
            <summary>
            Gets the maximum minor version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MaximumPatch">
            <summary>
            Gets the maximum patch version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MinimumVersion">
            <summary>
            Gets or sets the MinimumMajor, MinimumMinor, and MinimumPatch properties.
            Convenience property for setting target minimum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.IntegrationVersionRange.MaximumVersion">
            <summary>
            Gets or sets the MaximumMajor, MaximumMinor, and MaximumPatch properties.
            Convenience property for setting target maximum version.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.InterceptMethodAttribute">
            <summary>
            Attribute that indicates that the decorated method is meant to intercept calls
            to another method. Used to generate the integration definitions file.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.Integration">
            <summary>
            Gets or sets the name of the integration.
            </summary>
            <remarks>
            Multiple method replacements with the same integration name are grouped together.
            </remarks>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.CallerAssembly">
            <summary>
            Gets or sets the name of the assembly where calls to the target method are searched.
            If null, search in all loaded assemblies.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.CallerType">
            <summary>
            Gets or sets the name of the type where calls to the target method are searched.
            If null, search in all types defined in loaded assemblies.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.CallerMethod">
            <summary>
            Gets or sets the name of the method where calls to the target method are searched.
            If null, search in all loaded types.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetAssembly">
            <summary>
            Gets or sets the name of the assembly that contains the target method to be intercepted.
            Required if <see cref="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetAssemblies"/> is not set.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetAssemblies">
            <summary>
            Gets or sets the name of the assemblies that contain the target method to be intercepted.
            Required if <see cref="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetAssembly"/> is not set.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetType">
            <summary>
            Gets or sets the name of the type that contains the target method to be intercepted.
            Required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetMethod">
            <summary>
            Gets or sets the name of the target method to be intercepted.
            If null, default to the name of the decorated method.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetSignature">
            <summary>
            Gets or sets the method signature that is matched to the target method to be intercepted.
            If null, signature check is not done.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetSignatureTypes">
            <summary>
            Gets or sets the explicit type array for the target method to be intercepted.
            This is a required field.
            Follows format:
                new[] { return_type, param_1_type, param_2_type, ..., param_n_type }
            Must match the wrapper method in count:
                n (parameters) + 1 (return type) - (is_instance_method : 1 : 0) - 1 (opcode)
            Indexes with "_" are ignored for comparison purposes.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetVersionRange">
            <summary>
            Gets the target version range for <see cref="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetAssembly"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetMinimumVersion">
            <summary>
            Gets or sets the target minimum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.TargetMaximumVersion">
            <summary>
            Gets or sets the target maximum version.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.InterceptMethodAttribute.MethodReplacementAction">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.ClrProfiler.MethodReplacementActionType">MethodReplacementActionType</see> for this method.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.MemberAccessor">
            <summary>
            Provides helper methods to access object members by emitting IL dynamically.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.MemberAccessor.TryCallMethod``2(System.Object,System.String,``0,``1@)">
            <summary>
            Tries to call an instance method with the specified name, a single parameter, and a return value.
            </summary>
            <typeparam name="TArg1">The type of the method's single parameter.</typeparam>
            <typeparam name="TResult">The type of the method's result value.</typeparam>
            <param name="source">The object to call the method on.</param>
            <param name="methodName">The name of the method to call.</param>
            <param name="arg1">The value to pass as the method's single argument.</param>
            <param name="value">The value returned by the method.</param>
            <returns><c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.MemberAccessor.TryGetPropertyValue``1(System.Object,System.String,``0@)">
            <summary>
            Tries to get the value of an instance property with the specified name.
            </summary>
            <typeparam name="TResult">The type of the property.</typeparam>
            <param name="source">The value that contains the property.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value of the property, or <c>null</c> if the property is not found.</param>
            <returns><c>true</c> if the property exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.MemberAccessor.TryGetFieldValue``1(System.Object,System.String,``0@)">
            <summary>
            Tries to get the value of an instance field with the specified name.
            </summary>
            <typeparam name="TResult">The type of the field.</typeparam>
            <param name="source">The value that contains the field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="value">The value of the field, or <c>null</c> if the field is not found.</param>
            <returns><c>true</c> if the field exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.MetadataNames">
            <summary>
            Holds names obtained through the metadata interface.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.MetadataNames.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ClrProfiler.MetadataNames"/> class.
            </summary>
            <param name="moduleName">The module's name.</param>
            <param name="typeName">The type's name.</param>
            <param name="methodName">The method's name.</param>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.MetadataNames.ModuleName">
            <summary>
            Gets the module's name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.MetadataNames.TypeName">
            <summary>
            Gets the type's full name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ClrProfiler.MetadataNames.MethodName">
            <summary>
            Gets the method's name.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.MethodReplacementActionType">
            <summary>
            Enum that instructs the CLR profiler, during JIT compilation of a method,
            where to insert a method call to the intercept method.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.MethodReplacementActionType.ReplaceTargetMethod">
            <summary>
            All method calls to the target method should be replaced with method
            calls to the intercept method.
            This is the historical behavior of the CLR profiler and it requires
            that the method body of the intercept method invokes the original
            target method.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.MethodReplacementActionType.InsertFirst">
            <summary>
            The method call to the intercept method should be inserted at the
            beginning of the caller's method body.
            This action is not intended for generating spans. This should only
            be used for inserting profiler-initialization logic such as
            adding ASP.NET middleware.
            </summary>
        </member>
        <member name="F:Datadog.Trace.ClrProfiler.MethodReplacementActionType.CallTargetModification">
            <summary>
            The target method gets modified with two calls, the first one at the
            begining of the method body, and then at the end before returning the
            control to the caller.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ClrProfiler.ScopeFactory">
            <summary>
            Convenience class that creates scopes and populates them with some standard details.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ScopeFactory.CreateOutboundHttpScope(Datadog.Trace.Tracer,System.String,System.Uri,Datadog.Trace.Configuration.IntegrationInfo,Datadog.Trace.Tagging.HttpTags@,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.DateTimeOffset})">
            <summary>
            Creates a scope for outbound http requests and populates some common details.
            </summary>
            <param name="tracer">The tracer instance to use to create the new scope.</param>
            <param name="httpMethod">The HTTP method used by the request.</param>
            <param name="requestUri">The URI requested by the request.</param>
            <param name="integrationId">The id of the integration creating this scope.</param>
            <param name="tags">The tags associated to the scope</param>
            <param name="traceId">The trace id - this id will be ignored if there's already an active trace</param>
            <param name="spanId">The span id</param>
            <param name="startTime">The start time that should be applied to the span</param>
            <returns>A new pre-populated scope.</returns>
        </member>
        <member name="M:Datadog.Trace.ClrProfiler.ScopeFactory.CreateInactiveOutboundHttpSpan(Datadog.Trace.Tracer,System.String,System.Uri,Datadog.Trace.Configuration.IntegrationInfo,Datadog.Trace.Tagging.HttpTags@,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Creates a scope for outbound http requests and populates some common details.
            </summary>
            <param name="tracer">The tracer instance to use to create the new scope.</param>
            <param name="httpMethod">The HTTP method used by the request.</param>
            <param name="requestUri">The URI requested by the request.</param>
            <param name="integrationId">The id of the integration creating this scope.</param>
            <param name="tags">The tags associated to the scope</param>
            <param name="traceId">The trace id - this id will be ignored if there's already an active trace</param>
            <param name="spanId">The span id</param>
            <param name="startTime">The start time that should be applied to the span</param>
            <param name="addToTraceContext">Set to false if the span is meant to be discarded. In that case, the span won't be added to the TraceContext.</param>
            <returns>A new pre-populated scope.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.CompositeConfigurationSource">
            <summary>
            Represents one or more configuration sources.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.Add(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Adds a new configuration source to this instance.
            </summary>
            <param name="source">The configuration source to add.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.Insert(System.Int32,Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Inserts an element into the <see cref="T:Datadog.Trace.Configuration.CompositeConfigurationSource"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The configuration source to insert.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetString(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> value of the first setting found with
            the specified key from the current list of configuration sources.
            Sources are queried in the order in which they were added.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetInt32(System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of the first setting found with
            the specified key from the current list of configuration sources.
            Sources are queried in the order in which they were added.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetDouble(System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of the first setting found with
            the specified key from the current list of configuration sources.
            Sources are queried in the order in which they were added.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetBool(System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of the first setting found with
            the specified key from the current list of configuration sources.
            Sources are queried in the order in which they were added.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.System#Collections#Generic#IEnumerable{Datadog#Trace#Configuration#IConfigurationSource}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetDictionary(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.CompositeConfigurationSource.GetDictionary(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Configuration.ConfigurationKeys">
            <summary>
            String constants for standard Datadog configuration keys.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ConfigurationFileName">
            <summary>
            Configuration key for the path to the configuration file.
            Can only be set with an environment variable
            or in the <c>app.config</c>/<c>web.config</c> file.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Environment">
            <summary>
            Configuration key for the application's environment. Sets the "env" tag on every <see cref="T:Datadog.Trace.Span"/>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.Environment"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceName">
            <summary>
            Configuration key for the application's default service name.
            Used as the service name for top-level spans,
            and used to determine service name of some child spans.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.ServiceName"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceVersion">
            <summary>
            Configuration key for the application's version. Sets the "version" tag on every <see cref="T:Datadog.Trace.Span"/>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.ServiceVersion"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceEnabled">
            <summary>
            Configuration key for enabling or disabling the Tracer.
            Default is value is true (enabled).
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.TraceEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSecEnabled">
            <summary>
            Configuration key for enabling or disabling the AppSec.
            Default is value is false (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSecBlockingEnabled">
            <summary>
            Configuration key for enabling or disabling blocking in AppSec.
            Default is value is false (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSecRules">
            <summary>
            Override the default rules file provided. Must be a path to a valid JSON rules file.
            Default is value is null (do not override).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSecCustomIpHeader">
            <summary>
            Configuration key indicating the optional name of the custom header to take into account for the ip address.
            Default is value is null (do not override).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AppSecExtraHeaders">
            <summary>
            Comma separated keys indicating the optional custom headers the user wants to send.
            Default is value is null.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DebugEnabled">
            <summary>
            Configuration key for enabling or disabling the Tracer's debug mode.
            Default is value is false (disabled).
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.DebugEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DisabledIntegrations">
            <summary>
            Configuration key for a list of integrations to disable. All other integrations remain enabled.
            Default is empty (all integrations are enabled).
            Supports multiple values separated with semi-colons.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.DisabledIntegrationNames"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AdoNetExcludedTypes">
            <summary>
            Configuration key for a list of AdoNet types that will be excluded from automatic instrumentation.
            Default is empty (all AdoNet types are included in automatic instrumentation).
            Supports multiple values separated with semi-colons.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.AdoNetExcludedTypes"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentHost">
            <summary>
            Configuration key for the Agent host where the Tracer can send traces.
            Overridden by <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentUri"/> if present.
            Default value is "localhost".
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.AgentUri"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentPort">
            <summary>
            Configuration key for the Agent port where the Tracer can send traces.
            Default value is 8126.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.AgentUri"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeName">
            <summary>
            Configuration key for the named pipe where the Tracer can send traces.
            Default value is <c>null</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.TracesPipeName"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeTimeoutMs">
            <summary>
            Configuration key for setting the timeout in milliseconds for named pipes communication.
            Default value is <c>0</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.TracesPipeTimeoutMs"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.MetricsPipeName">
            <summary>
            Configuration key for the named pipe that DogStatsD binds to.
            Default value is <c>null</c>.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.MetricsPipeName"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceAgentPortKey">
            <summary>
            Sibling setting for <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentPort"/>.
            Used to force a specific port binding for the Trace Agent.
            Default value is 8126.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.AgentUri"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentUri">
            <summary>
            Configuration key for the Agent URL where the Tracer can send traces.
            Overrides values in <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentHost"/> and <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentPort"/> if present.
            Default value is "http://localhost:8126".
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.AgentUri"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalAnalyticsEnabled">
            <summary>
            Configuration key for enabling or disabling default Analytics.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.AnalyticsEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalTags">
            <summary>
            Configuration key for a list of tags to be applied globally to spans.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.GlobalTags"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.HeaderTags">
            <summary>
            Configuration key for a map of header keys to tag names.
            Automatically apply header values as tags on traces.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.HeaderTags"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceNameMappings">
            <summary>
            Configuration key for a map of services to rename.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.ServiceNameMappings"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.BufferSize">
            <summary>
            Configuration key for setting the size in bytes of the trace buffer
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.SerializationBatchInterval">
            <summary>
            Configuration key for setting the batch interval in milliseconds for the serialization queue
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.LogsInjectionEnabled">
            <summary>
            Configuration key for enabling or disabling the automatic injection
            of correlation identifiers into the logging context.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.LogsInjectionEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.MaxTracesSubmittedPerSecond">
            <summary>
            Configuration key for setting the number of traces allowed
            to be submitted per second.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.MaxTracesSubmittedPerSecond"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.StartupDiagnosticLogEnabled">
            <summary>
            Configuration key for enabling or disabling the diagnostic log at startup
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.StartupDiagnosticLogEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.CustomSamplingRules">
             <summary>
             Configuration key for setting custom sampling rules based on regular expressions.
             Semi-colon separated list of sampling rules.
             The rule is matched in order of specification. The first match in a list is used.
            
             Per entry:
               The item "sample_rate" is required in decimal format.
               The item "service" is optional in regular expression format, to match on service name.
               The item "name" is optional in regular expression format, to match on operation name.
            
             To give a rate of 50% to any traces in a service starting with the text "cart":
               '[{"sample_rate":0.5, "service":"cart.*"}]'
            
             To give a rate of 20% to any traces which have an operation name of "http.request":
               '[{"sample_rate":0.2, "name":"http.request"}]'
            
             To give a rate of 100% to any traces within a service named "background" and with an operation name of "sql.query":
               '[{"sample_rate":1.0, "service":"background", "name":"sql.query"}]
            
             To give a rate of 10% to all traces
               '[{"sample_rate":0.1}]'
            
             To configure multiple rules, separate by semi-colon and order from most specific to least specific:
               '[{"sample_rate":0.5, "service":"cart.*"}, {"sample_rate":0.2, "name":"http.request"}, {"sample_rate":1.0, "service":"background", "name":"sql.query"}, {"sample_rate":0.1}]'
            
             If no rules are specified, or none match, default internal sampling logic will be used.
             </summary>
             <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.CustomSamplingRules"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalSamplingRate">
            <summary>
            Configuration key for setting the global rate for the sampler.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DogStatsdPort">
            <summary>
            Configuration key for the DogStatsd port where the Tracer can send metrics.
            Default value is 8125.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TracerMetricsEnabled">
            <summary>
            Configuration key for enabling or disabling internal metrics sent to DogStatsD.
            Default value is <c>false</c> (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.RuntimeMetricsEnabled">
            <summary>
            Configuration key for enabling or disabling runtime metrics sent to DogStatsD.
            Default value is <c>false</c> (disabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.MaxLogFileSize">
            <summary>
            Configuration key for setting the approximate maximum size,
            in bytes, for Tracer log files.
            Default value is 10 MB.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.LogRateLimit">
            <summary>
            Configuration key for setting the number of seconds between,
            identical log messages, for Tracer log files.
            Default value is 60s. Setting to 0 disables rate limiting.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ProfilerLogPath">
            <summary>
            Configuration key for setting the path to the .NET Tracer native log file.
            This also determines the output folder of the .NET Tracer managed log files.
            Overridden by <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.LogDirectory"/> if present.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.LogDirectory">
            <summary>
            Configuration key for setting the directory of the .NET Tracer logs.
            Overrides the value in <see cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ProfilerLogPath"/> if present.
            Default value is "%ProgramData%"\Datadog .NET Tracer\logs\" on Windows
            or "/var/log/datadog/dotnet/" on Linux.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceAgentPath">
            <summary>
            Configuration key for when a standalone instance of the Trace Agent needs to be started.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceAgentArgs">
            <summary>
            Configuration key for arguments to pass to the Trace Agent process.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DogStatsDPath">
            <summary>
            Configuration key for when a standalone instance of DogStatsD needs to be started.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DogStatsDArgs">
            <summary>
            Configuration key for arguments to pass to the DogStatsD process.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.DiagnosticSourceEnabled">
            <summary>
            Configuration key for enabling or disabling the use of System.Diagnostics.DiagnosticSource.
            Default value is <c>true</c> (enabled).
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.ApiKey">
            <summary>
            Configuration key for setting the API key, used by the Agent.
            This key is here for troubleshooting purposes.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesTransport">
            <summary>
            Configuration key for overriding the transport to use for communicating with the trace agent.
            Default value is <c>null</c>.
            Override options available: <c>datadog-tcp</c>, <c>datadog-named-pipes</c>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientExcludedUrlSubstrings">
            <summary>
            Configuration key for overriding which URLs are skipped by the tracer.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.HttpClientExcludedUrlSubstrings"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpServerErrorStatusCodes">
            <summary>
            Configuration key for the application's server http statuses to set spans as errors by.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.HttpServerErrorStatusCodes"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientErrorStatusCodes">
            <summary>
            Configuration key for the application's client http statuses to set spans as errors by.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.HttpClientErrorStatusCodes"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.PartialFlushEnabled">
            <summary>
            Configuration key to enable sending partial traces to the agent
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.PartialFlushEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.PartialFlushMinSpans">
            <summary>
            Configuration key to set the minimum number of closed spans in a trace before it's partially flushed
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.PartialFlushMinSpans"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.KafkaCreateConsumerScopeEnabled">
            <summary>
            Configuration key to enable or disable the creation of a span context on exiting a successful Kafka
            Consumer.Consume() call, and closing the scope on entering Consumer.Consume().
            Default value is <c>true</c> (enabled).
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.KafkaCreateConsumerScopeEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.CIVisibilityEnabled">
            <summary>
            Configuration key for enabling or disabling CI Visibility.
            Default is value is false (disabled).
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.ConfigurationKeys.Integrations">
            <summary>
            String format patterns used to match integration-specific configuration keys.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Integrations.Enabled">
            <summary>
            Configuration key pattern for enabling or disabling an integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Integrations.AnalyticsEnabled">
            <summary>
            Configuration key pattern for enabling or disabling Analytics in an integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Integrations.AnalyticsSampleRate">
            <summary>
            Configuration key pattern for setting Analytics sampling rate in an integration.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.ConfigurationKeys.Debug">
            <summary>
            String constants for debug configuration keys.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Debug.ForceMdTokenLookup">
            <summary>
            Configuration key for forcing the automatic instrumentation to only use the mdToken method lookup mechanism.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.Debug.ForceFallbackLookup">
            <summary>
            Configuration key for forcing the automatic instrumentation to only use the fallback method lookup mechanism.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.RouteTemplateResourceNamesEnabled">
            <summary>
            Feature Flag: enables updated resource names on `aspnet.request`, `aspnet-mvc.request`,
            `aspnet-webapi.request`, and `aspnet_core.request` spans. Enables `aspnet_core_mvc.request` spans and
            additional features on `aspnet_core.request` spans.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.RouteTemplateResourceNamesEnabled"/>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.NetStandardEnabled">
            <summary>
            Feature Flag: enables instrumenting calls to netstandard.dll (only applies to CallSite instrumentation)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.DelayWcfInstrumentationEnabled">
            <summary>
            Configuration key to enable or disable the updated WCF instrumentation that delays execution
            until later in the WCF pipeline when the WCF server exception handling is established.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.TracerSettings.DelayWcfInstrumentationEnabled"/>
        </member>
        <member name="T:Datadog.Trace.Configuration.EnvironmentConfigurationSource">
            <summary>
            Represents a configuration source that
            retrieves values from environment variables.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.EnvironmentConfigurationSource.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Configuration.GlobalSettings">
            <summary>
            Contains global datadog settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.GlobalSettings"/> class with default values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.#ctor(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.GlobalSettings"/> class
            using the specified <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to initialize values.
            </summary>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.GlobalSettings.DebugEnabled">
            <summary>
            Gets a value indicating whether debug mode is enabled.
            Default is <c>false</c>.
            Set in code via <see cref="M:Datadog.Trace.Configuration.GlobalSettings.SetDebugEnabled(System.Boolean)"/>
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DebugEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.GlobalSettings.Source">
            <summary>
            Gets or sets the global settings instance.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.GlobalSettings.DiagnosticSourceEnabled">
            <summary>
            Gets a value indicating whether the use
            of System.Diagnostics.DiagnosticSource is enabled.
            This value can only be set with environment variables
            or a configuration file, not through code.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.SetDebugEnabled(System.Boolean)">
            <summary>
            Set whether debug mode is enabled.
            Affects the level of logs written to file.
            </summary>
            <param name="enabled">Whether debug is enabled.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.Reload">
            <summary>
            Used to refresh global settings when environment variables or config sources change.
            This is not necessary if changes are set via code, only environment.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.FromDefaultSources">
            <summary>
            Create a <see cref="T:Datadog.Trace.Configuration.GlobalSettings"/> populated from the default sources
            returned by <see cref="M:Datadog.Trace.Configuration.GlobalSettings.CreateDefaultConfigurationSource"/>.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> populated from the default sources.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.GlobalSettings.CreateDefaultConfigurationSource">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> by combining environment variables,
            AppSettings where available, and a local datadog.json file, if present.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> instance.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.IConfigurationSource">
            <summary>
            A source of configuration settings, identifiable by a string key.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetString(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetInt32(System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetDouble(System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetBool(System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetDictionary(System.String)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IDictionary`2"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.IConfigurationSource.GetDictionary(System.String,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IDictionary`2"/> value of
            the setting with the specified key.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <param name="allowOptionalMappings">Determines whether to create dictionary entries when the input has no value mapping</param>
            <returns>The value of the setting, or <c>null</c> if not found.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.IntegrationSettings">
            <summary>
            Contains integration-specific settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.IntegrationSettings.#ctor(System.String,Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.IntegrationSettings"/> class.
            </summary>
            <param name="integrationName">The integration name.</param>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettings.IntegrationName">
            <summary>
            Gets the name of the integration. Used to retrieve integration-specific settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether
            this integration is enabled.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettings.AnalyticsEnabled">
            <summary>
            Gets or sets a value indicating whether
            Analytics are enabled for this integration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettings.AnalyticsSampleRate">
            <summary>
            Gets or sets a value between 0 and 1 (inclusive)
            that determines the sampling rate for this integration.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Configuration.IntegrationSettingsCollection">
            <summary>
            A collection of <see cref="T:Datadog.Trace.Configuration.IntegrationSettings"/> instances, referenced by name.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.IntegrationSettingsCollection.#ctor(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.IntegrationSettingsCollection"/> class.
            </summary>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.IntegrationSettingsCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Configuration.IntegrationSettings"/> for the specified integration.
            </summary>
            <param name="integrationName">The name of the integration.</param>
            <returns>The integration-specific settings for the specified integration.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.JsonConfigurationSource">
            <summary>
            Represents a configuration source that retrieves
            values from the provided JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.JsonConfigurationSource"/>
            class with the specified JSON string.
            </summary>
            <param name="json">A JSON string that contains configuration values.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.FromFile(System.String)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Configuration.JsonConfigurationSource"/> instance
            by loading the JSON string from the specified file.
            </summary>
            <param name="filename">A JSON file that contains configuration values.</param>
            <returns>The newly created configuration source.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.Datadog#Trace#Configuration#IConfigurationSource#GetString(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> value of
            the setting with the specified key.
            Supports JPath.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or null if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.Datadog#Trace#Configuration#IConfigurationSource#GetInt32(System.String)">
            <summary>
            Gets the <see cref="T:System.Int32"/> value of
            the setting with the specified key.
            Supports JPath.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or null if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.Datadog#Trace#Configuration#IConfigurationSource#GetDouble(System.String)">
            <summary>
            Gets the <see cref="T:System.Double"/> value of
            the setting with the specified key.
            Supports JPath.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or null if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.Datadog#Trace#Configuration#IConfigurationSource#GetBool(System.String)">
            <summary>
            Gets the <see cref="T:System.Boolean"/> value of
            the setting with the specified key.
            Supports JPath.
            </summary>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or null if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.GetValue``1(System.String)">
            <summary>
            Gets the value of the setting with the specified key and converts it into type <typeparamref name="T"/>.
            Supports JPath.
            </summary>
            <typeparam name="T">The type to convert the setting value into.</typeparam>
            <param name="key">The key that identifies the setting.</param>
            <returns>The value of the setting, or the default value of T if not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.GetDictionary(System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing all of the values.
            </summary>
            <remarks>
            Example JSON where `globalTags` is the configuration key.
            {
             "globalTags": {
                "name1": "value1",
                "name2": "value2"
                }
            }
            </remarks>
            <param name="key">The key that identifies the setting.</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> containing all of the key-value pairs.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">Thrown if the configuration value is not a valid JSON string.</exception>
        </member>
        <member name="M:Datadog.Trace.Configuration.JsonConfigurationSource.GetDictionary(System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing all of the values.
            </summary>
            <remarks>
            Example JSON where `globalTags` is the configuration key.
            {
             "globalTags": {
                "name1": "value1",
                "name2": "value2"
                }
            }
            </remarks>
            <param name="key">The key that identifies the setting.</param>
            <param name="allowOptionalMappings">Determines whether to create dictionary entries when the input has no value mapping. This only applies to string values, not JSON objects</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> containing all of the key-value pairs.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">Thrown if the configuration value is not a valid JSON string.</exception>
        </member>
        <member name="T:Datadog.Trace.Configuration.NameValueConfigurationSource">
            <summary>
            Represents a configuration source that retrieves
            values from the provided <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.NameValueConfigurationSource.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.NameValueConfigurationSource"/> class
            that wraps the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="nameValueCollection">The collection that will be wrapped by this configuration source.</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.NameValueConfigurationSource.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Configuration.StringConfigurationSource">
            <summary>
            A base <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> implementation
            for string-only configuration sources.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.ParseCustomKeyValues(System.String)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IDictionary`2"/> from parsing
            <paramref name="data"/>.
            </summary>
            <param name="data">A string containing key-value pairs which are comma-separated, and for which the key and value are colon-separated.</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> of key value pairs.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.ParseCustomKeyValues(System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IDictionary`2"/> from parsing
            <paramref name="data"/>.
            </summary>
            <param name="data">A string containing key-value pairs which are comma-separated, and for which the key and value are colon-separated.</param>
            <param name="allowOptionalMappings">Determines whether to create dictionary entries when the input has no value mapping</param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> of key value pairs.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetInt32(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetDouble(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetBool(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetDictionary(System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> from parsing
            </summary>
            <param name="key">The key</param>
            <returns><see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing all of the key-value pairs.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.StringConfigurationSource.GetDictionary(System.String,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> from parsing
            </summary>
            <param name="key">The key</param>
            <param name="allowOptionalMappings">Determines whether to create dictionary entries when the input has no value mapping</param>
            <returns><see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing all of the key-value pairs.</returns>
        </member>
        <member name="T:Datadog.Trace.Configuration.TracerSettings">
            <summary>
            Contains Tracer settings.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.TracerSettings.DefaultAgentHost">
            <summary>
            The default host value for <see cref="P:Datadog.Trace.Configuration.TracerSettings.AgentUri"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Configuration.TracerSettings.DefaultAgentPort">
            <summary>
            The default port value for <see cref="P:Datadog.Trace.Configuration.TracerSettings.AgentUri"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> class with default values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.#ctor(Datadog.Trace.Configuration.IConfigurationSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> class
            using the specified <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to initialize values.
            </summary>
            <param name="source">The <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> to use when retrieving configuration values.</param>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.Environment">
            <summary>
            Gets or sets the default environment name applied to all spans.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.Environment"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.ServiceName">
            <summary>
            Gets or sets the service name applied to top-level spans and used to build derived service names.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceName"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.ServiceVersion">
            <summary>
            Gets or sets the version tag applied to all spans.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.ServiceVersion"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TraceEnabled">
            <summary>
            Gets or sets a value indicating whether tracing is enabled.
            Default is <c>true</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TraceEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.DebugEnabled">
            <summary>
            Gets or sets a value indicating whether debug is enabled for a tracer.
            This property is obsolete. Manage the debug setting through GlobalSettings.
            </summary>
            <seealso cref="P:Datadog.Trace.Configuration.GlobalSettings.DebugEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.DisabledIntegrationNames">
            <summary>
            Gets or sets the names of disabled integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DisabledIntegrations"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.AdoNetExcludedTypes">
            <summary>
            Gets or sets the AdoNet types to exclude from automatic instrumentation.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AdoNetExcludedTypes"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.AgentUri">
            <summary>
            Gets or sets the Uri where the Tracer can connect to the Agent.
            Default is <c>"http://localhost:8126"</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentUri"/>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentHost"/>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.AgentPort"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TracesTransport">
            <summary>
            Gets or sets the key used to determine the transport for sending traces.
            Default is <c>null</c>, which will use the default path decided in <see cref="T:Datadog.Trace.Agent.Api"/>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesTransport"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TracesPipeName">
            <summary>
            Gets or sets the windows pipe name where the Tracer can connect to the Agent.
            Default is <c>null</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeName"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TracesPipeTimeoutMs">
            <summary>
            Gets or sets the timeout in milliseconds for the windows named pipe requests.
            Default is <c>100</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.TracesPipeTimeoutMs"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.MetricsPipeName">
            <summary>
            Gets or sets the windows pipe name where the Tracer can send stats.
            Default is <c>null</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.MetricsPipeName"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.AnalyticsEnabled">
            <summary>
            Gets or sets a value indicating whether default Analytics are enabled.
            Settings this value is a shortcut for setting
            <see cref="P:Datadog.Trace.Configuration.IntegrationSettings.AnalyticsEnabled"/> on some predetermined integrations.
            See the documentation for more details.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalAnalyticsEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.LogsInjectionEnabled">
            <summary>
            Gets or sets a value indicating whether correlation identifiers are
            automatically injected into the logging context.
            Default is <c>false</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.LogsInjectionEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.MaxTracesSubmittedPerSecond">
            <summary>
            Gets or sets a value indicating the maximum number of traces set to AutoKeep (p1) per second.
            Default is <c>100</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.MaxTracesSubmittedPerSecond"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.CustomSamplingRules">
            <summary>
            Gets or sets a value indicating custom sampling rules.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.CustomSamplingRules"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.GlobalSamplingRate">
            <summary>
            Gets or sets a value indicating a global rate for sampling.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.GlobalSamplingRate"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.Integrations">
            <summary>
            Gets a collection of <see cref="P:Datadog.Trace.Configuration.TracerSettings.Integrations"/> keyed by integration name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.GlobalTags">
            <summary>
            Gets or sets the global tags, which are applied to all <see cref="T:Datadog.Trace.Span"/>s.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.HeaderTags">
            <summary>
            Gets or sets the map of header keys to tag names, which are applied to the root <see cref="T:Datadog.Trace.Span"/> of incoming requests.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.DogStatsdPort">
            <summary>
            Gets or sets the port where the DogStatsd server is listening for connections.
            Default is <c>8125</c>.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.DogStatsdPort"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TracerMetricsEnabled">
            <summary>
            Gets or sets a value indicating whether internal metrics
            are enabled and sent to DogStatsd.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.RuntimeMetricsEnabled">
            <summary>
            Gets or sets a value indicating whether runtime metrics
            are enabled and sent to DogStatsd.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.DiagnosticSourceEnabled">
            <summary>
            Gets or sets a value indicating whether the use
            of System.Diagnostics.DiagnosticSource is enabled.
            Default is <c>true</c>.
            </summary>
            <remark>
            This value cannot be set in code. Instead,
            set it using the <c>DD_TRACE_DIAGNOSTIC_SOURCE_ENABLED</c>
            environment variable or in configuration files.
            </remark>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.PartialFlushEnabled">
            <summary>
            Gets or sets a value indicating whether partial flush is enabled
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.PartialFlushMinSpans">
            <summary>
            Gets or sets the minimum number of closed spans in a trace before it's partially flushed
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.KafkaCreateConsumerScopeEnabled">
            <summary>
            Gets or sets a value indicating whether a span context should be created on exiting a successful Kafka
            Consumer.Consume() call, and closed on entering Consumer.Consume().
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.KafkaCreateConsumerScopeEnabled"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.DelayWcfInstrumentationEnabled">
            <summary>
            Gets or sets a value indicating whether to enable the updated WCF instrumentation that delays execution
            until later in the WCF pipeline when the WCF server exception handling is established.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.StartupDiagnosticLogEnabled">
            <summary>
            Gets or sets a value indicating whether the diagnostic log at startup is enabled
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.HttpClientExcludedUrlSubstrings">
            <summary>
            Gets or sets the comma separated list of url patterns to skip tracing.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientExcludedUrlSubstrings"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.HttpServerErrorStatusCodes">
            <summary>
            Gets or sets the HTTP status code that should be marked as errors for server integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpServerErrorStatusCodes"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.HttpClientErrorStatusCodes">
            <summary>
            Gets or sets the HTTP status code that should be marked as errors for client integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientErrorStatusCodes"/>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.ServiceNameMappings">
            <summary>
            Gets configuration values for changing service names based on configuration
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TraceBufferSize">
            <summary>
            Gets or sets a value indicating the size in bytes of the trace buffer
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.TraceBatchInterval">
            <summary>
            Gets or sets a value indicating the batch interval for the serialization queue, in milliseconds
            </summary>
        </member>
        <member name="P:Datadog.Trace.Configuration.TracerSettings.RouteTemplateResourceNamesEnabled">
            <summary>
            Gets a value indicating whether the feature flag to enable the updated ASP.NET resource names is enabled
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.FeatureFlags.RouteTemplateResourceNamesEnabled"/>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.FromDefaultSources">
            <summary>
            Create a <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> populated from the default sources
            returned by <see cref="M:Datadog.Trace.Configuration.TracerSettings.CreateDefaultConfigurationSource"/>.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> populated from the default sources.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.CreateDefaultConfigurationSource">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> by combining environment variables,
            AppSettings where available, and a local datadog.json file, if present.
            </summary>
            <returns>A new <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/> instance.</returns>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.SetHttpClientErrorStatusCodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets the HTTP status code that should be marked as errors for client integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpClientErrorStatusCodes"/>
            <param name="statusCodes">Status codes that should be marked as errors</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.SetHttpServerErrorStatusCodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets the HTTP status code that should be marked as errors for server integrations.
            </summary>
            <seealso cref="F:Datadog.Trace.Configuration.ConfigurationKeys.HttpServerErrorStatusCodes"/>
            <param name="statusCodes">Status codes that should be marked as errors</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.SetServiceNameMappings(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Sets the mappings to use for service names within a <see cref="T:Datadog.Trace.Span"/>
            </summary>
            <param name="mappings">Mappings to use from original service name (e.g. <code>sql-server</code> or <code>graphql</code>)
            as the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>) to replacement service names as <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/>).</param>
        </member>
        <member name="M:Datadog.Trace.Configuration.TracerSettings.Freeze">
            <summary>
            Populate the internal structures. Modifying the settings past this point is not supported
            </summary>
        </member>
        <member name="T:Datadog.Trace.CorrelationIdentifier">
            <summary>
            An API to access identifying values of the service and the active span
            </summary>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.Service">
            <summary>
            Gets the name of the service
            </summary>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.Version">
            <summary>
            Gets the version of the service
            </summary>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.Env">
            <summary>
            Gets the environment name of the service
            </summary>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.TraceId">
            <summary>
            Gets the id of the active trace.
            </summary>
            <returns>The id of the active trace. If there is no active trace, returns zero.</returns>
        </member>
        <member name="P:Datadog.Trace.CorrelationIdentifier.SpanId">
            <summary>
            Gets the id of the active span.
            </summary>
            <returns>The id of the active span. If there is no active span, returns zero.</returns>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.AspNetCoreDiagnosticObserver">
            <summary>
            Instruments ASP.NET Core.
            <para/>
            Unfortunately, ASP.NET Core only uses one <see cref="T:System.Diagnostics.DiagnosticListener"/> instance
            for everything so we also only create one observer to ensure best performance.
            <para/>
            Hosting events: https://github.com/dotnet/aspnetcore/blob/master/src/Hosting/Hosting/src/Internal/HostingApplicationDiagnostics.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.AspNetCoreDiagnosticObserver.EndpointFeatureStruct">
            <summary>
            Proxy for ducktyping IEndpointFeature when the interface is not implemented explicitly
            </summary>
            <seealso cref="T:Datadog.Trace.DiagnosticListeners.IEndpointFeature"/>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.AspNetCoreDiagnosticObserver.RoutePatternPathSegmentStruct">
            <summary>
            Proxy for https://github1s.com/dotnet/aspnetcore/blob/v3.0.3/src/Http/Routing/src/Patterns/RoutePatternPathSegment.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.AspNetCoreDiagnosticObserver.RoutePatternContentPartStruct">
            <summary>
            Proxy for https://github1s.com/dotnet/aspnetcore/blob/v3.0.3/src/Http/Routing/src/Patterns/RoutePatternLiteralPart.cs
            and https://github1s.com/dotnet/aspnetcore/blob/v3.0.3/src/Http/Routing/src/Patterns/RoutePatternSeparatorPart.cs
            </summary>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.AspNetCoreDiagnosticObserver.RoutePatternParameterPartStruct">
            <summary>
            Proxy for https://github1s.com/dotnet/aspnetcore/blob/v3.0.3/src/Http/Routing/src/Patterns/RoutePatternParameterPart.cs
            </summary>
        </member>
        <member name="P:Datadog.Trace.DiagnosticListeners.DiagnosticObserver.ListenerName">
            <summary>
            Gets the name of the <see cref="T:System.Diagnostics.DiagnosticListener"/> that should be instrumented.
            </summary>
            <value>The name of the <see cref="T:System.Diagnostics.DiagnosticListener"/> that should be instrumented.</value>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.IEndpointFeature">
            <summary>
            Proxy for ducktyping IEndpointFeature when the interface is implemented
            explicitly, e.g. by https://github.com/dotnet/aspnetcore/blob/v3.0.3/src/Servers/Kestrel/Core/src/Internal/Http/HttpProtocol.FeatureCollection.cs
            Also see AspNetCoreDiagnosticObserver.EndpointFeatureStruct
            </summary>
        </member>
        <member name="M:Datadog.Trace.DiagnosticListeners.IEndpointFeature.GetEndpoint">
            <summary>
            Delegates to IEndpointFeature.Endpoint;
            </summary>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.RouteEndpoint">
            <summary>
            Endpoint for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DiagnosticListeners.RouteEndpoint.RoutePattern">
            <summary>
            Delegates to Endpoint.RoutePattern;
            </summary>
        </member>
        <member name="F:Datadog.Trace.DiagnosticListeners.RouteEndpoint.DisplayName">
            <summary>
            Delegates to Endpoint.DisplayName;
            </summary>
        </member>
        <member name="T:Datadog.Trace.DiagnosticListeners.RoutePattern">
            <summary>
            RoutePattern for duck typing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DiagnosticListeners.RoutePattern.PathSegments">
            <summary>
            Gets the list of IReadOnlyList&lt;RoutePatternPathSegment&gt;
            </summary>
        </member>
        <member name="F:Datadog.Trace.DiagnosticListeners.RoutePattern.RawText">
            <summary>
            Gets the RoutePattern.RawText
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Requests">
            <summary>
            Count: Total number of API requests made
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Responses">
            <summary>
            Count: Count of API responses.
            This metric has an additional tag of "status: {code}" to group the responses by the HTTP response code.
            This is different from <seealso cref="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Errors"/> in that this is all HTTP responses
            regardless of status code, and <seealso cref="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Errors"/> is exceptions raised from making an API call.
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Api.Errors">
            <summary>
            Count: Total number of exceptions raised by API calls.
            This is different from receiving a 4xx or 5xx response.
            It is a "timeout error" or something from making the API call.
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.EnqueuedTraces">
            <summary>
            Count: Total number of traces pushed into the queue (does not include traces dropped due to a full queue)
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.EnqueuedSpans">
            <summary>
            Count: Total number of spans pushed into the queue (does not include traces dropped due to a full queue)
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.EnqueuedBytes">
            <summary>
            Count: Total size in bytes of traces pushed into the queue (does not include traces dropped due to a full queue)
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DroppedTraces">
            <summary>
            Count: Total number of traces dropped due to a full queue
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DroppedSpans">
            <summary>
            Count: Total number of spans dropped due to a full queue
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DequeuedTraces">
            <summary>
            Count: Number of traces pulled from the queue for flushing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DequeuedSpans">
            <summary>
            Count: Total number of spans pulled from the queue for flushing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Queue.DequeuedBytes">
            <summary>
            Count: Size in bytes of traces pulled from the queue for flushing
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Health.Heartbeat">
            <summary>
            Gauge: Set to 1 by each Tracer instance.
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Health.Exceptions">
            <summary>
            Count: The number of exceptions thrown by the Tracer.
            </summary>
        </member>
        <member name="F:Datadog.Trace.DogStatsd.TracerMetricNames.Health.Warnings">
            <summary>
            Count: The number of warnings generated by the Tracer.
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckKind">
            <summary>
            Duck kind
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckKind.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckKind.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckAttribute">
            <summary>
            Duck attribute
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckAttribute.DefaultFlags">
            <summary>
            Default BindingFlags
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttribute.Kind">
            <summary>
            Gets or sets duck kind
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckAttributeBase">
            <summary>
            Duck attribute
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.Name">
            <summary>
            Gets or sets the underlying type member name
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.BindingFlags">
            <summary>
            Gets or sets the binding flags
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.GenericParameterTypeNames">
            <summary>
            Gets or sets the generic parameter type names definition for a generic method call (required when calling generic methods and instance type is non public)
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.ParameterTypeNames">
            <summary>
            Gets or sets the parameter type names of the target method (optional / used to disambiguation)
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckAttributeBase.ExplicitInterfaceTypeName">
            <summary>
            Gets or sets the explicit interface type name
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckCopyAttribute">
            <summary>
            Duck copy struct attribute
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckFieldAttribute">
            <summary>
            Duck attribute where the underlying member is a field
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckFieldAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.DuckTyping.DuckFieldAttribute"/> class.
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckIgnoreAttribute">
            <summary>
            Ignores the member when DuckTyping
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckIncludeAttribute">
            <summary>
            Use to include a member that would normally be ignored
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckReverseMethodAttribute">
            <summary>
            Duck reverse method attribute
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.CreateProxyInstance`1">
            <summary>
            Create struct proxy instance delegate
            </summary>
            <typeparam name="T">Type of struct</typeparam>
            <param name="instance">Object instance</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckType">
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
            <summary>
            Duck Type
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.Create``1(System.Object)">
            <summary>
            Create duck type proxy using a base type
            </summary>
            <param name="instance">Instance object</param>
            <typeparam name="T">Duck type</typeparam>
            <returns>Duck type proxy</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.Create(System.Type,System.Object)">
            <summary>
            Create duck type proxy using a base type
            </summary>
            <param name="proxyType">Duck type</param>
            <param name="instance">Instance object</param>
            <returns>Duck Type proxy</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CanCreate``1(System.Object)">
            <summary>
            Gets if a proxy can be created
            </summary>
            <param name="instance">Instance object</param>
            <typeparam name="T">Duck type</typeparam>
            <returns>true if the proxy can be created; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CanCreate(System.Type,System.Object)">
            <summary>
            Gets if a proxy can be created
            </summary>
            <param name="proxyType">Duck type</param>
            <param name="instance">Instance object</param>
            <returns>true if the proxy can be created; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.GetOrCreateProxyType(System.Type,System.Type)">
            <summary>
            Gets or create a new proxy type for ducktyping
            </summary>
            <param name="proxyType">ProxyType interface</param>
            <param name="targetType">Target type</param>
            <returns>CreateTypeResult instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateReverse(System.Type,System.Object)">
            <summary>
            Create duck type proxy using a base type
            </summary>
            <param name="typeToDeriveFrom">The type to derive from</param>
            <param name="delegationInstance">The instance to which additional implementation details are delegated</param>
            <returns>Duck Type proxy</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.GetOrCreateReverseProxyType(System.Type,System.Type)">
            <summary>
            Gets or create a new reverse proxy type for ducktyping
            </summary>
            <param name="typeToDeriveFrom">The type to derive from</param>
            <param name="delegationType">The type to delegate additional implementations to</param>
            <returns>CreateTypeResult instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.AddInterfaceProperties(System.Type,System.Collections.Generic.List{System.Reflection.PropertyInfo})">
            <summary>
            Adds the properties of any implemented interfaces in <paramref name="proxyDefinitionType"/>
            to list <paramref name="selectedProperties"/> list
            </summary>
            <param name="proxyDefinitionType">The type to search the interfaces for</param>
            <param name="selectedProperties">Existing selected properties</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateProperties(System.Reflection.Emit.TypeBuilder,System.Type,System.Type,System.Reflection.FieldInfo)">
            <summary>
            Create properties in <paramref name="proxyTypeBuilder"/>
            </summary>
            <param name="proxyTypeBuilder">The type builder for the new proxy</param>
            <param name="proxyDefinitionType">The type we're inheriting from/implementing</param>
            <param name="targetType">The original type of the instance we're duck typing</param>
            <param name="instanceField">The field for accessing the instance of the <paramref name="targetType"/></param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateReverseProxyProperties(System.Reflection.Emit.TypeBuilder,System.Type,System.Type,System.Reflection.FieldInfo)">
            <summary>
            Create properties in <paramref name="proxyTypeBuilder"/>
            </summary>
            <param name="proxyTypeBuilder">The type builder for the new proxy</param>
            <param name="typeToDeriveFrom">The type we're inheriting from/implementing</param>
            <param name="typeToDelegateTo">The type we're delegating the implementation too</param>
            <param name="instanceField">The field for accessing the instance of the <paramref name="typeToDelegateTo"/></param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreatePropertiesFromStruct(System.Reflection.Emit.TypeBuilder,System.Type,System.Type,System.Reflection.FieldInfo)">
            <summary>
            Create properties in <paramref name="proxyTypeBuilder"/>
            </summary>
            <param name="proxyTypeBuilder">The type builder for the new proxy</param>
            <param name="proxyDefinitionType">The custom type we defined</param>
            <param name="targetType">The original type we are proxying</param>
            <param name="instanceField">The field for accessing the instance of the <paramref name="targetType"/></param>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult">
            <summary>
            Struct to store the result of creating a proxy type
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.Success">
            <summary>
            Gets if the proxy type creation was successful
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.TargetType">
            <summary>
            Target type
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.#ctor(System.Type,System.Type,System.Type,System.Delegate,System.Runtime.ExceptionServices.ExceptionDispatchInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult"/> struct.
            </summary>
            <param name="proxyTypeDefinition">Proxy type definition</param>
            <param name="proxyType">Proxy type</param>
            <param name="targetType">Target type</param>
            <param name="activator">Proxy activator</param>
            <param name="exceptionInfo">Exception dispatch info instance</param>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.ProxyType">
            <summary>
            Gets the Proxy type
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.CreateInstance``1(System.Object)">
            <summary>
            Create a new proxy instance from a target instance
            </summary>
            <typeparam name="T">Type of the return value</typeparam>
            <param name="instance">Target instance value</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateTypeResult.CanCreate">
            <summary>
            Get if the proxy instance can be created
            </summary>
            <returns>true if the proxy can be created; otherwise, false.</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckType.CreateCache`1">
            <summary>
            Generics Create Cache FastPath
            </summary>
            <typeparam name="T">Type of proxy definition</typeparam>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.Type">
            <summary>
            Gets the type of T
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.IsVisible">
            <summary>
            Gets if the T type is visible
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.GetProxy(System.Type)">
            <summary>
            Gets the proxy type for a target type using the T proxy definition
            </summary>
            <param name="targetType">Target type</param>
            <returns>CreateTypeResult instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.Create(System.Object)">
            <summary>
            Create a new instance of a proxy type for a target instance using the T proxy definition
            </summary>
            <param name="instance">Object instance</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.CanCreate(System.Object)">
            <summary>
            Get if the proxy instance can be created
            </summary>
            <param name="instance">Object instance</param>
            <returns>true if a proxy can be created; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.CreateReverse(System.Object)">
            <summary>
            Create a reverse proxy type for a target instance using the T proxy definition
            </summary>
            <param name="instance">Object instance</param>
            <returns>Proxy instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.CreateCache`1.GetReverseProxy(System.Type)">
            <summary>
            Gets the proxy type for a target type using the T proxy definition
            </summary>
            <param name="targetType">Target type</param>
            <returns>CreateTypeResult instance</returns>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckType.GetTypeFromHandleMethodInfo">
            <summary>
            Gets the Type.GetTypeFromHandle method info
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.DuckType.EnumToObjectMethodInfo">
            <summary>
            Gets the Enum.ToObject method info
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.GetModuleBuilder(System.Type,System.Boolean)">
            <summary>
            Gets the ModuleBuilder instance from a target type.  (.NET Framework / Non AssemblyLoadContext version)
            </summary>
            <param name="targetType">Target type for ducktyping</param>
            <param name="isVisible">Is visible boolean</param>
            <returns>ModuleBuilder instance</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckType.DelegateCache`1">
            <summary>
            DynamicMethods delegates cache
            </summary>
            <typeparam name="TProxyDelegate">Proxy delegate type</typeparam>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.DelegateCache`1.GetDelegate">
            <summary>
            Get cached delegate from the DynamicMethod
            </summary>
            <returns>TProxyDelegate instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.DelegateCache`1.FillDelegate(System.Int32)">
            <summary>
            Create delegate from a DynamicMethod index
            </summary>
            <param name="index">Dynamic method index</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.EnsureArguments(System.Type,System.Object)">
            <summary>
            Checks and ensures the arguments for the Create methods
            </summary>
            <param name="proxyType">Duck type</param>
            <param name="instance">Instance value</param>
            <exception cref="T:System.ArgumentNullException">If the duck type or the instance value is null</exception>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.EnsureTypeVisibility(System.Reflection.Emit.ModuleBuilder,System.Type)">
            <summary>
            Ensures the visibility access to the type
            </summary>
            <param name="builder">Module builder</param>
            <param name="type">Type to gain internals visibility</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.UseDirectAccessTo(System.Reflection.Emit.ModuleBuilder,System.Type)">
            <summary>
            Gets if the direct access method should be used or the inderect method (dynamic method)
            </summary>
            <param name="builder">Module builder</param>
            <param name="targetType">Target type</param>
            <returns>true for direct method; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.UseDirectAccessTo(System.Reflection.Emit.TypeBuilder,System.Type)">
            <summary>
            Gets if the direct access method should be used or the inderect method (dynamic method)
            </summary>
            <param name="builder">Type builder</param>
            <param name="targetType">Target type</param>
            <returns>true for direct method; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckType.UseDirectAccessTo(System.Type)">
            <summary>
            Gets if the direct access method should be used or the inderect method (dynamic method)
            </summary>
            <param name="targetType">Target type</param>
            <returns>true for direct method; otherwise, false.</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeException">
            <summary>
            DuckType Exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyTypeDefinitionIsNull">
            <summary>
            DuckType proxy type definition is null
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeTargetObjectInstanceIsNull">
            <summary>
            DuckType target object instance is null
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeInvalidTypeConversionException">
            <summary>
            DuckType invalid type conversion exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypePropertyCantBeReadException">
            <summary>
            DuckType property can't be read
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypePropertyCantBeWrittenException">
            <summary>
            DuckType property can't be written
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypePropertyArgumentsLengthException">
            <summary>
            DuckType property argument doesn't have the same argument length
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeFieldIsReadonlyException">
            <summary>
            DuckType field is readonly
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypePropertyOrFieldNotFoundException">
            <summary>
            DuckType property or field not found
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeTypeIsNotPublicException">
            <summary>
            DuckType type is not public exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeStructMembersCannotBeChangedException">
            <summary>
            DuckType struct members cannot be changed exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeTargetMethodNotFoundException">
            <summary>
            DuckType target method can not be found exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyMethodParameterIsMissingException">
            <summary>
            DuckType proxy method parameter is missing exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyAndTargetMethodParameterSignatureMismatchException">
            <summary>
            DuckType parameter signature mismatch between proxy and target method
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyAndTargetMethodReturnTypeMismatchException">
            <summary>
            DuckType parameter signature mismatch between proxy and target method
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeProxyMethodsWithGenericParametersNotSupportedInNonPublicInstancesException">
            <summary>
            DuckType proxy methods with generic parameters are not supported in non public instances exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeTargetMethodAmbiguousMatchException">
            <summary>
            DuckType proxy method has an ambiguous match in the target type exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyBaseIsStructException">
            <summary>
            DuckType reverse proxy type to derive from is a struct exception
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyImplementorIsAbstractOrInterfaceException">
            <summary>
            DuckType proxy method is abstract
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyPropertyCannotBeAbstractException">
            <summary>
            DuckType property can't be read
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeIncorrectReverseMethodUsageException">
            <summary>
            DuckType method was [DuckReverseMethod] in non-reverse proxy
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeIncorrectReversePropertyUsageException">
            <summary>
            DuckType property was [DuckReverseMethod] in non-reverse proxy
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyMissingMethodImplementationException">
            <summary>
            DuckType proxy was missing an implementation
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseAttributeParameterNamesMismatchException">
            <summary>
            DuckType proxy tried to implement a generic method in a non-generic way
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeReverseProxyMustImplementGenericMethodAsGenericException">
            <summary>
            DuckType proxy tried to implement a generic method in a non-generic way
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.DuckTypeExtensions">
            <summary>
            Duck type extensions
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckCast``1(System.Object)">
            <summary>
            Gets the duck type instance for the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <typeparam name="T">Target type</typeparam>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckCast(System.Object,System.Type)">
            <summary>
            Gets the duck type instance for the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <param name="targetType">Target type</param>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.TryDuckCast``1(System.Object,``0@)">
            <summary>
            Tries to ducktype the object implementing a base class or interface T
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="instance">Object instance</param>
            <param name="value">Ducktype instance</param>
            <returns>true if the object instance was ducktyped; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.TryDuckCast(System.Object,System.Type,System.Object@)">
            <summary>
            Tries to ducktype the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <param name="targetType">Target type</param>
            <param name="value">Ducktype instance</param>
            <returns>true if the object instance was ducktyped; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckAs``1(System.Object)">
            <summary>
            Gets the duck type instance for the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <typeparam name="T">Target type</typeparam>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckAs(System.Object,System.Type)">
            <summary>
            Gets the duck type instance for the object implementing a base class or interface T
            </summary>
            <param name="instance">Object instance</param>
            <param name="targetType">Target type</param>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckIs``1(System.Object)">
            <summary>
            Gets if a proxy can be created
            </summary>
            <param name="instance">Instance object</param>
            <typeparam name="T">Duck type</typeparam>
            <returns>true if the proxy can be created; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckIs(System.Object,System.Type)">
            <summary>
            Gets if a proxy can be created
            </summary>
            <param name="instance">Instance object</param>
            <param name="targetType">Duck type</param>
            <returns>true if the proxy can be created; otherwise, false</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.DuckImplement(System.Object,System.Type)">
            <summary>
            Gets or creates a proxy that implements/derives from <paramref name="typeToDeriveFrom"/>,
            and delegates implementations/overrides to <paramref name="instance"/>
            </summary>
            <param name="instance">The instance containing additional overrides/implementations</param>
            <param name="typeToDeriveFrom">The type to derive from</param>
            <returns>DuckType instance</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.DuckTypeExtensions.TryDuckImplement(System.Object,System.Type,System.Object@)">
            <summary>
            Tries to create a proxy that implements/derives from <paramref name="typeToDeriveFrom"/>,
            and delegates implementations/overrides to <paramref name="instance"/>
            ducktype the object implementing a base class or interface T
            </summary>
            <param name="instance">The instance containing additional overrides/implementations</param>
            <param name="typeToDeriveFrom">The type to derive from</param>
            <param name="value">The Ducktype instance</param>
            <returns>true if the object instance was ducktyped; otherwise, false.</returns>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.IDuckType">
            <summary>
            Duck type interface
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.IDuckType.Instance">
            <summary>
            Gets instance
            </summary>
        </member>
        <member name="P:Datadog.Trace.DuckTyping.IDuckType.Type">
            <summary>
            Gets instance Type
            </summary>
        </member>
        <member name="T:Datadog.Trace.DuckTyping.ILHelpersExtensions">
            <summary>
            Internal IL Helpers
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.LoadInstanceArgument(Datadog.Trace.DuckTyping.LazyILGenerator,System.Type,System.Type)">
            <summary>
            Load instance argument
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="actualType">Actual type</param>
            <param name="expectedType">Expected type</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteLoadArgument(Datadog.Trace.DuckTyping.LazyILGenerator,System.Int32,System.Boolean)">
            <summary>
            Write load arguments
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="index">Argument index</param>
            <param name="isStatic">Define if we need to take into account the instance argument</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteLoadLocal(Datadog.Trace.DuckTyping.LazyILGenerator,System.Int32)">
            <summary>
            Write load local
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="index">Local index</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteLoadLocal(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            Write load local
            </summary>
            <param name="il">ILGenerator instance</param>
            <param name="index">Local index</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteStoreLocal(Datadog.Trace.DuckTyping.LazyILGenerator,System.Int32)">
            <summary>
            Write store local
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="index">Local index</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteInt(Datadog.Trace.DuckTyping.LazyILGenerator,System.Int32)">
            <summary>
            Write constant int value
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="value">int value</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteTypeConversion(Datadog.Trace.DuckTyping.LazyILGenerator,System.Type,System.Type)">
            <summary>
            Convert a current type to an expected type
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="actualType">Actual type</param>
            <param name="expectedType">Expected type</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteMethodCalli(Datadog.Trace.DuckTyping.LazyILGenerator,System.Reflection.MethodInfo)">
            <summary>
            Write a Call to a method using Calli
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="method">Method to get called</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.ILHelpersExtensions.WriteDynamicMethodCall(Datadog.Trace.DuckTyping.LazyILGenerator,System.Reflection.Emit.DynamicMethod,System.Reflection.Emit.TypeBuilder)">
            <summary>
            Write a DynamicMethod call by creating and injecting a custom delegate in the proxyType
            </summary>
            <param name="il">LazyILGenerator instance</param>
            <param name="dynamicMethod">Dynamic method to get called</param>
            <param name="proxyType">ProxyType builder</param>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.TypesTuple.ProxyDefinitionType">
            <summary>
            The proxy definition type
            </summary>
        </member>
        <member name="F:Datadog.Trace.DuckTyping.TypesTuple.TargetType">
            <summary>
            The target type
            </summary>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.TypesTuple.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.DuckTyping.TypesTuple"/> struct.
            </summary>
            <param name="proxyDefinitionType">The proxy definition type</param>
            <param name="targetType">The target type</param>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.TypesTuple.GetHashCode">
            <summary>
            Gets the struct hashcode
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.TypesTuple.Equals(System.Object)">
            <summary>
            Gets if the struct is equal to other object or struct
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if both are equals; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.DuckTyping.TypesTuple.Equals(Datadog.Trace.DuckTyping.TypesTuple)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.ExtensionMethods.NameValueCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Specialized.NameValueCollection"/> objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.NameValueCollectionExtensions.Wrap(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Provides an <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/> implementation that wraps the specified <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="collection">The name/value collection to wrap.</param>
            <returns>An object that implements <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.ExtensionMethods.SpanExtensions">
            <summary>
            Extension methods for the <see cref="T:Datadog.Trace.Span"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.SpanExtensions.SetTraceSamplingPriority(Datadog.Trace.Span,Datadog.Trace.SamplingPriority)">
            <summary>
            Sets the sampling priority for the trace that contains the specified <see cref="T:Datadog.Trace.Span"/>.
            </summary>
            <param name="span">A span that belongs to the trace.</param>
            <param name="samplingPriority">The new sampling priority for the trace.</param>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.SpanExtensions.AddTagsFromDbCommand(Datadog.Trace.Span,System.Data.IDbCommand)">
            <summary>
            Adds standard tags to a span with values taken from the specified <see cref="T:System.Data.Common.DbCommand"/>.
            </summary>
            <param name="span">The span to add the tags to.</param>
            <param name="command">The db command to get tags values from.</param>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.StringExtensions.TrimEnd(System.String,System.String,System.StringComparison)">
            <summary>
            Removes the trailing occurrence of a substring from the current string.
            </summary>
            <param name="value">The original string.</param>
            <param name="suffix">The string to remove from the end of <paramref name="value"/>.</param>
            <param name="comparisonType">One of the enumeration values that determines how this string and <paramref name="suffix"/> are compared.</param>
            <returns>A new string with <paramref name="suffix"/> removed from the end, if found. Otherwise, <paramref name="value"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.StringExtensions.ToBoolean(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> into a <see cref="T:System.Boolean"/> by comparing it to commonly used values
            such as "True", "yes", "T", "Y", or "1" for <c>true</c> and "False", "no", "F", "N", or "0" for <c>false</c>. Case-insensitive.
            Defaults to <c>null</c> if string is not recognized.
            </summary>
            <param name="value">The string to convert.</param>
            <returns><c>true</c> or <c>false</c> if <paramref name="value"/> is one of the accepted values; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.StringExtensions.TryConvertToNormalizedTagName(System.String,System.String@)">
             <summary>
             Datadog tag requirements:
             1. Tag must start with a letter
             2. Tag cannot exceed 200 characters
             3. If the first two requirements are met, then valid characters will be retained while all other characters will be converted to underscores. Valid characters include:
                - Alphanumerics
                - Underscores
                - Minuses
                - Colons
                - Periods
                - Slashes
            
             Note: This method will trim leading/trailing whitespace before checking the requirements.
             </summary>
             <param name="value">Input string to convert into tag name</param>
             <param name="normalizedTagName">If the method returns true, the normalized tag name</param>
             <returns>Returns whether the conversion was successful</returns>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.StringExtensions.TryConvertToNormalizedHeaderTagName(System.String,System.String@)">
             <summary>
             Attempts to convert the input to a valid tag name following the rules
             described in <see cref="M:Datadog.Trace.ExtensionMethods.StringExtensions.TryConvertToNormalizedTagName(System.String,System.String@)"/>
            
             Additionally, the resulting tag name replaces any periods with underscores so that
             the tag does not create any further object nesting.
             </summary>
             <param name="value">Input string to convert into tag name</param>
             <param name="normalizedTagName">If the method returns true, the normalized header tag name</param>
             <returns>Returns whether the conversion was successful</returns>
        </member>
        <member name="M:Datadog.Trace.ExtensionMethods.TimeExtensions.ToUnixTimeNanoseconds(System.DateTimeOffset)">
            <summary>
            Returns the number of nanoseconds that have elapsed since 1970-01-01T00:00:00.000Z.
            </summary>
            <param name="dateTimeOffset">The value to get the number of elapsed nanoseconds for.</param>
            <returns>The number of nanoseconds that have elapsed since 1970-01-01T00:00:00.000Z.</returns>
        </member>
        <member name="T:Datadog.Trace.Headers.IHeadersCollection">
            <summary>
            Specified a common interface that can be used to manipulate collections of headers.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Headers.IHeadersCollection.GetValues(System.String)">
            <summary>
            Returns all header values for a specified header stored in the collection.
            </summary>
            <param name="name">The specified header to return values for.</param>
            <returns>Zero or more header strings.</returns>
        </member>
        <member name="M:Datadog.Trace.Headers.IHeadersCollection.Set(System.String,System.String)">
            <summary>
            Sets the value of an entry in the collection, replacing any previous values.
            </summary>
            <param name="name">The header to add to the collection.</param>
            <param name="value">The content of the header.</param>
        </member>
        <member name="M:Datadog.Trace.Headers.IHeadersCollection.Add(System.String,System.String)">
            <summary>
            Adds the specified header and its value into the collection.
            </summary>
            <param name="name">The header to add to the collection.</param>
            <param name="value">The content of the header.</param>
        </member>
        <member name="M:Datadog.Trace.Headers.IHeadersCollection.Remove(System.String)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="name">The name of the header to remove from the collection.</param>
        </member>
        <member name="T:Datadog.Trace.HttpHeaderNames">
            <summary>
            Names of HTTP headers that can be used tracing inbound or outbound HTTP requests.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.TraceId">
            <summary>
            ID of a distributed trace.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.ParentId">
            <summary>
            ID of the parent span in a distributed trace.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.SamplingPriority">
            <summary>
            Setting used to determine whether a trace should be sampled or not.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.TracingEnabled">
            <summary>
            If header is set to "false", tracing is disabled for that http request.
            Tracing is enabled by default.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpHeaderNames.Origin">
            <summary>
            Origin of the distributed trace.
            </summary>
        </member>
        <member name="F:Datadog.Trace.HttpOverStreams.DatadogHttpClient.MaxRequestHeadersBufferSize">
            <summary>
            Typical headers sent to the agent are small.
            Allow enough room for future expansion of headers.
            </summary>
        </member>
        <member name="M:Datadog.Trace.IDatadogTracer.ActivateSpan(Datadog.Trace.Span)">
            <summary>
            Make a span the active span and return its new scope.
            </summary>
            <param name="span">The span to activate.</param>
            <returns>A Scope object wrapping this span.</returns>
        </member>
        <member name="M:Datadog.Trace.IDatadogTracer.ActivateSpan(Datadog.Trace.Span,System.Boolean)">
            <summary>
            Make a span the active span and return its new scope.
            </summary>
            <param name="span">The span to activate.</param>
            <param name="finishOnClose">Determines whether closing the returned scope will also finish the span.</param>
            <returns>A Scope object wrapping this span.</returns>
        </member>
        <member name="T:Datadog.Trace.ILockedTracer">
            <summary>
            Defines a tracer that cannot be replaced once is setted in the singleton
            </summary>
        </member>
        <member name="T:Datadog.Trace.IScopeManager">
            <summary>
            Interface for managing a scope.
            </summary>
        </member>
        <member name="T:Datadog.Trace.IScopeRawAccess">
            <summary>
            Interface for scope getter and setter access
            </summary>
        </member>
        <member name="T:Datadog.Trace.ISpanContext">
            <summary>
            Span context interface.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpanContext.TraceId">
            <summary>
            Gets the trace identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpanContext.SpanId">
            <summary>
            Gets the span identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ISpanContext.ServiceName">
            <summary>
            Gets the service name to propagate to child spans.
            </summary>
        </member>
        <member name="T:Datadog.Trace.LifetimeManager">
            <summary>
            Used to run hooks on application shutdown
            </summary>
        </member>
        <member name="T:Datadog.Trace.Logging.CustomNLogLogProvider">
             <summary>
             <para>
             Log provider that performs more efficient logs injection by adding a custom type
             into the NLog MDC which can later be rendered with the properties of the active
             Datadog scope.
             </para>
            
             <para>
             Note: This logger is intended to be used when the application uses NLog &gt;= 4.1.
             When the application uses NLog versions older than 4.1, use
             <see cref="T:Datadog.Trace.Logging.FallbackNLogLogProvider"/> which utilizes the original
             Set(string, string) API to perform logs injection.
             </para>
             </summary>
        </member>
        <member name="T:Datadog.Trace.Logging.FallbackNLogLogProvider">
             <summary>
             <para>
             Log provider that enhances the built-in LibLog NLogLogProvider by adding
             MDC support for NLog 1.0. The built-in NLogLogProvider only looked for
             API's present on NLog 2.0 and newer.
             </para>
            
             <para>
             Note: This logger is intended to be used when the application uses NLog &lt; 4.1.
             When the application uses NLog versions 4.1 and newer, use
             <see cref="T:Datadog.Trace.Logging.CustomNLogLogProvider"/> which utilizes the Set(string, object)
             API to perform logs injection more efficiently.
             </para>
             </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.ILogRateLimiter.ShouldLog(System.String,System.Int32,System.UInt32@)">
            <summary>
            Check whether a log message for the given location should be written or skipped
            </summary>
            <param name="filePath">The file path of the source code file writing the log</param>
            <param name="lineNumber">The line number of the source code file writing the log</param>
            <param name="skipCount">If the log should be written, the number of similar log messages that were previously skipped</param>
            <returns><c>true</c> if the log should be written, otherwise <c>false</c></returns>
        </member>
        <member name="T:Datadog.Trace.Logging.LibLogScopeEventSubscriber">
            <summary>
            Subscriber to ScopeManager events that sets/unsets correlation identifier
            properties in the application's logging context.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Logging.LogEnricher">
            <summary>
            Represents the context needed for log injection for a given tracer
            </summary>
        </member>
        <member name="T:Datadog.Trace.Logging.LogEnricher.Context">
            <summary>
            Wraps all the individual context objects in a single instance, that can be stored in an AsyncLocal
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.LogRateLimiter.ShouldLog(System.String,System.Int32,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Logging.NoOpSerilogLogProvider">
            <summary>
            Log provider that performs a no-op on all logs injection for Serilog versions before 2.0
            because the default behavior may throw unhandled exceptions when cross-AppDomain calls
            are made. Prefer disabling the feature over taking a chance that the application's avoids
            cross-AppDomain calls.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.NullLogRateLimiter.ShouldLog(System.String,System.Int32,System.UInt32@)">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Logging.ILog">
            <summary>
                Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.ILog.Log(Datadog.Trace.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
                Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
                Note to implementers: the message func should not be called if the loglevel is not enabled
                so as not to incur performance penalties.
                To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:Datadog.Trace.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Datadog.Trace.Logging.Logger"/>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.ILogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:Datadog.Trace.Logging.LogExtensions">
            <summary>
                Extension methods for the <see cref="T:Datadog.Trace.Logging.ILog"/> interface.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.IsDebugEnabled(Datadog.Trace.Logging.ILog)">
            <summary>
                Check if the <see cref="F:Datadog.Trace.Logging.LogLevel.Debug"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.IsErrorEnabled(Datadog.Trace.Logging.ILog)">
            <summary>
                Check if the <see cref="F:Datadog.Trace.Logging.LogLevel.Error"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.IsFatalEnabled(Datadog.Trace.Logging.ILog)">
            <summary>
                Check if the <see cref="F:Datadog.Trace.Logging.LogLevel.Fatal"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.IsInfoEnabled(Datadog.Trace.Logging.ILog)">
            <summary>
                Check if the <see cref="F:Datadog.Trace.Logging.LogLevel.Info"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.IsTraceEnabled(Datadog.Trace.Logging.ILog)">
            <summary>
                Check if the <see cref="F:Datadog.Trace.Logging.LogLevel.Trace"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.IsWarnEnabled(Datadog.Trace.Logging.ILog)">
            <summary>
                Check if the <see cref="F:Datadog.Trace.Logging.LogLevel.Warn"/> log level is enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to check with.</param>
            <returns>True if the log level is enabled; false otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Debug(Datadog.Trace.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Debug(Datadog.Trace.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Debug(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Debug(Datadog.Trace.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.DebugFormat(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.DebugException(Datadog.Trace.Logging.ILog,System.String,System.Exception)">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.DebugException(Datadog.Trace.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Debug"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Error(Datadog.Trace.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Error(Datadog.Trace.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Error(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Error(Datadog.Trace.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.ErrorFormat(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.ErrorException(Datadog.Trace.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Error"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Fatal(Datadog.Trace.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Fatal(Datadog.Trace.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Fatal(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Fatal(Datadog.Trace.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.FatalFormat(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.FatalException(Datadog.Trace.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Fatal"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Info(Datadog.Trace.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Info(Datadog.Trace.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Info(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Info(Datadog.Trace.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.InfoFormat(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.InfoException(Datadog.Trace.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Info"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Trace(Datadog.Trace.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Trace(Datadog.Trace.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Trace(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Trace(Datadog.Trace.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.TraceFormat(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.TraceException(Datadog.Trace.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Trace"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Warn(Datadog.Trace.Logging.ILog,System.Func{System.String})">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="messageFunc">The message function.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Warn(Datadog.Trace.Logging.ILog,System.String)">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Warn(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.Warn(Datadog.Trace.Logging.ILog,System.Exception,System.String,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="exception">The exception.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.WarnFormat(Datadog.Trace.Logging.ILog,System.String,System.Object[])">
            <summary>
                Logs a message at the <see cref="F:Datadog.Trace.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogExtensions.WarnException(Datadog.Trace.Logging.ILog,System.String,System.Exception,System.Object[])">
            <summary>
                Logs an exception at the <see cref="F:Datadog.Trace.Logging.LogLevel.Warn"/> log level, if enabled.
            </summary>
            <param name="logger">The <see cref="T:Datadog.Trace.Logging.ILog"/> to use.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <param name="args">Optional format parameters for the message.</param>
        </member>
        <member name="T:Datadog.Trace.Logging.LogLevel">
            <summary>
                The log level.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.LogLevel.Trace">
            <summary>
            Trace
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.LogLevel.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.LogLevel.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.LogLevel.Warn">
            <summary>
            Warn
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.LogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.LogLevel.Fatal">
            <summary>
            Fatal
            </summary>
        </member>
        <member name="T:Datadog.Trace.Logging.LogProvider">
            <summary>
            Provides a mechanism to set the <see cref="T:Datadog.Trace.Logging.ILogProvider" />.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProvider.SetCurrentLogProvider(Datadog.Trace.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:Datadog.Trace.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:Datadog.Trace.Logging.LogProvider.SetCurrentLogProvider(Datadog.Trace.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:Datadog.Trace.Logging.ILog"/></returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:Datadog.Trace.Logging.ILog"/></returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:Datadog.Trace.Logging.ILog"/></returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:Datadog.Trace.Logging.ILog"/></returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">A optional paramater to indicate message should be destructured.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:Datadog.Trace.Logging.LogProviders.LibLogException">
            <summary>
            Exception thrown by LibLog.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LibLogException.#ctor(System.String)">
            <summary>
            Initializes a new LibLogException with the specified message.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LibLogException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new LibLogException with the specified message and inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
                Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured
                data in a format string:
                For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't
                know if serilog is actually
                used. So, this class simulates that. it will replace any text in {curly braces} with an index number.
                "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular
                .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Logging.LogProviders.LogProviderBase">
            <summary>
                Base class for specific log providers.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Logging.LogProviders.LogProviderBase.ErrorInitializingProvider">
            <summary>
                Error message should initializing the log provider fail.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LogProviderBase.#ctor">
            <summary>
                Initialize an instance of the <see cref="T:Datadog.Trace.Logging.LogProviders.LogProviderBase"/> class by initializing the references
                to the nested and mapped diagnostics context-obtaining functions.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LogProviderBase.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LogProviderBase.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LogProviderBase.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LogProviderBase.GetOpenNdcMethod">
            <summary>
                Returns the provider-specific method to open a nested diagnostics context.
            </summary>
            <returns>A provider-specific method to open a nested diagnostics context.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LogProviderBase.GetOpenMdcMethod">
            <summary>
                Returns the provider-specific method to open a mapped diagnostics context.
            </summary>
            <returns>A provider-specific method to open a mapped diagnostics context.</returns>
        </member>
        <member name="T:Datadog.Trace.Logging.LogProviders.LogProviderBase.OpenNdc">
            <summary>
                Delegate defining the signature of the method opening a nested diagnostics context.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="T:Datadog.Trace.Logging.LogProviders.LogProviderBase.OpenMdc">
            <summary>
                Delegate defining the signature of the method opening a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Determines whether to call the destructor or not.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LogProviderBase.FindType(System.String,System.String)">
            <summary>
                Finds a type using a type name and assembly name.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="assemblyName">The name of the assembly.</param>
            <returns>The requested type or null if it was not found.</returns>
        </member>
        <member name="M:Datadog.Trace.Logging.LogProviders.LogProviderBase.FindType(System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                Finds a type using a type name and a list of assembly names to search.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="assemblyNames">A list of assembly names to search.</param>
            <returns>The request type or null if it was not found.</returns>
        </member>
        <member name="T:Datadog.Trace.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
                The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:Datadog.Trace.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
                Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
                <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Datadog.Trace.Logging.Logger">
            <summary>
            Logger delegate.
            </summary>
            <param name="logLevel">The log level</param>
            <param name="messageFunc">The message function</param>
            <param name="exception">The exception</param>
            <param name="formatParameters">The format parameters</param>
            <returns>A boolean.</returns>
        </member>
        <member name="F:Datadog.Trace.Metrics.SamplingAgentDecision">
            <summary>
            To be set when the agent determines the sampling rate for a trace
            Read: Agent Priority Sample Rate
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.SamplingRuleDecision">
            <summary>
            To be set when a sampling rule is applied to a trace
            Read: Sampling Rule Priority Sample Rate
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.SamplingLimitDecision">
            <summary>
            To be set when a rate limiter is applied to a trace.
            Read: Rate Limiter Priority Sample Rate
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.MessageQueueTimeMs">
            <summary>
            The length of time a record has been on the queue
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.TopLevelSpan">
            <summary>
            Identifies top-level spans.
            Top-level spans have a different service name from their immediate parent or have no parent.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.TracesKeepRate">
            <summary>
            Records the keep rate of spans in the tracer, independent of sampling rate
            </summary>
        </member>
        <member name="F:Datadog.Trace.Metrics.AppSecEnabled">
            <summary>
            Whether the libraries application security features are enabled.
            </summary>
        </member>
        <member name="T:Datadog.Trace.PlatformHelpers.AspNetCoreHttpRequestHandler.RequestTrackingFeature">
            <summary>
            Holds state that we want to pass between diagnostic source events
            </summary>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.AspNetCoreHttpRequestHandler.RequestTrackingFeature.IsUsingEndpointRouting">
            <summary>
            Gets or sets a value indicating whether the pipeline using endpoint routing
            </summary>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.AspNetCoreHttpRequestHandler.RequestTrackingFeature.IsFirstPipelineExecution">
            <summary>
            Gets or sets a value indicating whether this is the first pipeline execution
            </summary>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.AspNetCoreHttpRequestHandler.RequestTrackingFeature.Route">
            <summary>
            Gets or sets a value indicating the route as calculated by endpoint routing (if available)
            </summary>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.AspNetCoreHttpRequestHandler.RequestTrackingFeature.ResourceName">
            <summary>
            Gets or sets a value indicating the resource name as calculated by the endpoint routing(if available)
            </summary>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.AspNetCoreHttpRequestHandler.RequestTrackingFeature.HttpMethod">
            <summary>
            Gets or sets the HTTP method, as it requires normalization, so avoids repeatedly calculations
            </summary>
        </member>
        <member name="P:Datadog.Trace.PlatformHelpers.AspNetCoreHttpRequestHandler.RequestTrackingFeature.OriginalUrl">
            <summary>
            Gets or Sets the original URL received by the pipeline
            </summary>
        </member>
        <member name="T:Datadog.Trace.PlatformHelpers.AzureAppServices">
            <summary>
            Helper class for gathering metadata about the execution context in Azure App Services.
            References:
            https://docs.microsoft.com/en-us/azure/app-service/environment/intro
            https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings
            https://github.com/projectkudu/kudu/wiki/Azure-runtime-environment
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.AzureAppServicesContextKey">
            <summary>
            Configuration key which is used as a flag to tell us whether we are running in the context of Azure App Services.
            This is set within the applicationHost.xdt file of the Azure Site Extension.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.SiteExtensionVersionKey">
            <summary>
            Configuration key which has the running version of the Azure Site Extension.
            This is set within the applicationHost.xdt file.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.WebsiteOwnerNameKey">
            <summary>
            Example: 8c500027-5f00-400e-8f00-60000000000f+apm-dotnet-EastUSwebspace
            Format: {subscriptionId}+{planResourceGroup}-{hostedInRegion}
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.ResourceGroupKey">
            <summary>
            This is the name of the resource group the site instance is assigned to.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.SiteNameKey">
            <summary>
            This is the unique name of the website instance within Azure App Services.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.FunctionsExtensionVersionKey">
            <summary>
            The version of the functions runtime to use in this function app.
            Reference: https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings#functions_extension_version
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.FunctionsWorkerRuntimeKey">
            <summary>
            This variable is only present in Azure Functions.
            Valid values are dotnet, node, java, powershell, and python.
            In this context, we will only ever see dotnet.
            Reference: https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings#functions_extension_version
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.InstanceNameKey">
            <summary>
            The instance name in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.InstanceIdKey">
            <summary>
            The instance ID in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.PlatformHelpers.AzureAppServices.OperatingSystemKey">
            <summary>
            The operating system in Azure where the traced application is running.
            </summary>
        </member>
        <member name="T:Datadog.Trace.PlatformHelpers.ContainerMetadata">
            <summary>
            Utility class with methods to interact with container hosts.
            </summary>
        </member>
        <member name="M:Datadog.Trace.PlatformHelpers.ContainerMetadata.GetContainerId">
            <summary>
            Gets the id of the container executing the code.
            Return <c>null</c> if code is not executing inside a supported container.
            </summary>
            <returns>The container id or <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.PlatformHelpers.ContainerMetadata.ParseCgroupLines(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Uses regular expression to try to extract a container id from the specified string.
            </summary>
            <param name="lines">Lines of text from a cgroup file.</param>
            <returns>The container id if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.PlatformHelpers.ContainerMetadata.ParseCgroupLine(System.String)">
            <summary>
            Uses regular expression to try to extract a container id from the specified string.
            </summary>
            <param name="line">A single line from a cgroup file.</param>
            <returns>The container id if found; otherwise, <c>null</c>.</returns>
        </member>
        <member name="T:Datadog.Trace.RuntimeMetrics.Keywords">
            <summary>
            Keywords used by the CLR events.
            Enum and comments taken from Perfview source code: https://github.com/microsoft/perfview/blob/master/src/TraceEvent/Parsers/ClrTraceEventParser.cs
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GC">
            <summary>
            Logging when garbage collections and finalization happen.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHandle">
            <summary>
            Events when GC handles are set or destroyed.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Loader">
            <summary>
            Logging when modules actually get loaded and unloaded.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Jit">
            <summary>
            Logging when Just in time (JIT) compilation occurs.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.NGen">
            <summary>
            Logging when precompiled native (NGEN) images are loaded.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.StartEnumeration">
            <summary>
            Indicates that on attach or module load , a rundown of all existing methods should be done
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.StopEnumeration">
            <summary>
            Indicates that on detach or process shutdown, a rundown of all existing methods should be done
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Security">
            <summary>
            Events associated with validating security restrictions.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.AppDomainResourceManagement">
            <summary>
            Events for logging resource consumption on an app-domain level granularity
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.JitTracing">
            <summary>
            Logging of the internal workings of the Just In Time compiler.  This is fairly verbose.
            It details decisions about interesting optimization (like inlining and tail call)
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Interop">
            <summary>
            Log information about code thunks that transition between managed and unmanaged code.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Contention">
            <summary>
            Log when lock contention occurs.  (Monitor.Enters actually blocks)
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Exception">
            <summary>
            Log exception processing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Threading">
            <summary>
            Log events associated with the threadpool, and other threading events.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.JittedMethodILToNativeMap">
            <summary>
            Dump the native to IL mapping of any method that is JIT compiled.  (V4.5 runtimes and above).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.OverrideAndSuppressNGenEvents">
            <summary>
            If enabled will suppress the rundown of NGEN events on V4.0 runtime (has no effect on Pre-V4.0 runtimes).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Type">
            <summary>
            Enables the 'BulkType' event
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapDump">
            <summary>
            Enables the events associated with dumping the GC heap
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCSampledObjectAllocationHigh">
            <summary>
            Enables allocation sampling with the 'fast'.  Sample to limit to 100 allocations per second per type.
            This is good for most detailed performance investigations.   Note that this DOES update the allocation
            path to be slower and only works if the process start with this on.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapSurvivalAndMovement">
            <summary>
            Enables events associate with object movement or survival with each GC.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapCollect">
            <summary>
            Triggers a GC.  Can pass a 64 bit value that will be logged with the GC Start event so you know which GC you actually triggered.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapAndTypeNames">
            <summary>
            Indicates that you want type names looked up and put into the events (not just meta-data tokens).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCSampledObjectAllocationLow">
            <summary>
            Enables allocation sampling with the 'slow' rate, Sample to limit to 5 allocations per second per type.
            This is reasonable for monitoring.    Note that this DOES update the allocation path to be slower
            and only works if the process start with this on.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCAllObjectAllocation">
            <summary>
            Turns on capturing the stack and type of object allocation made by the .NET Runtime.   This is only
            supported after V4.5.3 (Late 2014)   This can be very verbose and you should seriously using  GCSampledObjectAllocationHigh
            instead (and GCSampledObjectAllocationLow for production scenarios).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.SupressNGen">
            <summary>
            This suppresses NGEN events on V4.0 (where you have NGEN PDBs), but not on V2.0 (which does not know about this
            bit and also does not have NGEN PDBS).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Stack">
            <summary>
            Also log the stack trace of events for which this is valuable.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.ThreadTransfer">
            <summary>
            This allows tracing work item transfer events (thread pool enqueue/dequeue/ioenqueue/iodequeue/a.o.)
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Debugger">
            <summary>
            .NET Debugger events
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Monitoring">
            <summary>
            Events intended for monitoring on an ongoing basis.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Codesymbols">
            <summary>
            Events that will dump PDBs of dynamically generated assemblies to the ETW stream.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Compilation">
            <summary>
            Events that provide information about compilation.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.CompilationDiagnostic">
            <summary>
            Diagnostic events for diagnosing compilation and pre-compilation features.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.MethodDiagnostic">
            <summary>
            Diagnostic events for capturing token information for events that express MethodID
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.TypeDiagnostic">
            <summary>
            Diagnostic events for diagnosing issues involving the type loader.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.Default">
            <summary>
            Recommend default flags (good compromise on verbosity).
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.JITSymbols">
            <summary>
            What is needed to get symbols for JIT compiled code.
            </summary>
        </member>
        <member name="F:Datadog.Trace.RuntimeMetrics.Keywords.GCHeapSnapshot">
            <summary>
            This provides the flags commonly needed to take a heap .NET Heap snapshot with ETW.
            </summary>
        </member>
        <member name="P:Datadog.Trace.RuntimeMetrics.RuntimeMetricsWriter.ExceptionCounts">
            <summary>
            Gets the internal exception counts, to be used for tests
            </summary>
        </member>
        <member name="T:Datadog.Trace.SamplingPriority">
            <summary>
            Sampling "priorities" indicate whether a trace should be kept (sampled) or dropped (not sampled).
            Trace statistics are computed based on all traces, even if they are dropped
            </summary>
            <remarks>
            <para>
            Currently, all traces are still sent to the Agent (for stats computation, etc),
            but this may change in future versions of the tracer.
            </para>
            <para>
            Despite the name, there is no relative priority between the different values.
            All the "keep" and "reject" values have the same weight, they only indicate where
            the decision originated from.
            </para>
            </remarks>
        </member>
        <member name="F:Datadog.Trace.SamplingPriority.UserReject">
            <summary>
            Trace should be dropped (not sampled).
            Sampling decision made explicitly by user through
            code or configuration (e.g. the rules sampler).
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriority.AutoReject">
            <summary>
            Trace should be dropped (not sampled).
            Sampling decision made by the built-in sampler.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriority.AutoKeep">
            <summary>
            Trace should be kept (sampled).
            Sampling decision made by the built-in sampler.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriority.UserKeep">
            <summary>
            Trace should be kept (sampled).
            Sampling decision made explicitly by user through
            code or configuration (e.g. the rules sampler).
            </summary>
        </member>
        <member name="F:Datadog.Trace.SamplingPriority.AppSecKeep">
            <summary>
            Trace should be kept (sampled).
            Sampling decision made due to an application security event.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.CustomSamplingRule.Priority">
            <summary>
            Gets or sets the priority of the rule.
            Configuration rules will default to 1 as a priority and rely on order of specification.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.DefaultSamplingRule.Priority">
            <summary>
            Gets the lowest possible priority
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.GlobalSamplingRule.Priority">
            <summary>
            Gets the priority which is one beneath custom rules.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.ISamplingRule.RuleName">
            <summary>
            Gets the rule name.
            Used for debugging purposes mostly.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Sampling.ISamplingRule.Priority">
            <summary>
            Gets the priority.
            Higher number means higher priority.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Sampling.RuleBasedSampler.RegisterRule(Datadog.Trace.Sampling.ISamplingRule)">
            <summary>
            Will insert a rule according to how high the Priority field is set.
            If the priority is equal to other rules, the new rule will be the last in that priority group.
            </summary>
            <param name="rule">The new rule being registered.</param>
        </member>
        <member name="T:Datadog.Trace.Scope">
            <summary>
            A scope is a handle used to manage the concept of an active span.
            Meaning that at a given time at most one span is considered active and
            all newly created spans that are not created with the ignoreActiveSpan
            parameter will be automatically children of the active span.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Scope.Span">
            <summary>
            Gets the active span wrapped in this scope
            </summary>
        </member>
        <member name="M:Datadog.Trace.Scope.Close">
            <summary>
            Closes the current scope and makes its parent scope active
            </summary>
        </member>
        <member name="M:Datadog.Trace.Scope.Dispose">
            <summary>
            Closes the current scope and makes its parent scope active
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.ServiceRemotingClient">
            <summary>
            Provides tracing of ServiceRemotingClientEvents.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingClient.StartTracing">
            <summary>
            Start tracing ServiceRemotingClientEvents.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingClient.ServiceRemotingClientEvents_SendRequest(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the Service Remoting client sends a request.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingClient.ServiceRemotingClientEvents_ReceiveResponse(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the Service Remoting client receives a response
            from the server after it finishes processing a request.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments. Can be of type <c>IServiceRemotingResponseEventArgs2</c> on success
            or <c>IServiceRemotingFailedResponseEventArgs</c> on failure.</param>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.ServiceRemotingService">
            <summary>
            Provides tracing of ServiceRemotingServiceEvents.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingService.StartTracing">
            <summary>
            Start tracing ServiceRemotingServiceEvents.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingService.ServiceRemotingServiceEvents_ReceiveRequest(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the Service Remoting server receives an incoming request.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingService.ServiceRemotingServiceEvents_SendResponse(System.Object,System.EventArgs)">
            <summary>
            Event handler called when the Service Remoting server sends a response
            after processing an incoming request.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event arguments. Can be of type <c>IServiceRemotingResponseEventArgs2</c> on success
            or <c>IServiceRemotingFailedResponseEventArgs2</c> on failure.</param>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.ServiceRemotingTags.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.ServiceFabric.ServiceRemotingTags"/> class.
            For testing purposes only. Do not use directly.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.MethodId">
            <summary>
            Gets the method id. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.InterfaceId">
            <summary>
            Gets the method identifier. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.InvocationId">
            <summary>
            Gets the invocation identifier. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.MethodName">
            <summary>
            Gets the method name. For internal use only.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.AddHeader(System.String,System.Byte[])">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessageHeader.TryGetHeaderValue(System.String,System.Byte[]@)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessage">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Datadog.Trace.ServiceFabric.IServiceRemotingRequestMessage.GetHeader">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.IServiceRemotingRequestEventArgs">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestEventArgs.Request">
            <summary>
            Gets the request message. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestEventArgs.ServiceUri">
            <summary>
            Gets the service URI. For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingRequestEventArgs.MethodName">
            <summary>
            Gets the method name. For internal use only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.ServiceFabric.IServiceRemotingFailedResponseEventArgs">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.ServiceFabric.IServiceRemotingFailedResponseEventArgs.Error">
            <summary>
            Gets the exception. For internal use only.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Span">
            <summary>
            A Span represents a logical unit of work in the system. It may be
            related to other spans by parent/children relationships. The span
            tracks the duration of an operation as well as associated metadata in
            the form of a resource name, a service name, and user defined tags.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.OperationName">
            <summary>
            Gets or sets operation name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.ResourceName">
            <summary>
            Gets or sets the resource name
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.Type">
            <summary>
            Gets or sets the type of request this span represents (ex: web, db).
            Not to be confused with span kind.
            </summary>
            <seealso cref="T:Datadog.Trace.SpanTypes"/>
        </member>
        <member name="P:Datadog.Trace.Span.Error">
            <summary>
            Gets or sets a value indicating whether this span represents an error
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.ServiceName">
            <summary>
            Gets or sets the service name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.TraceId">
            <summary>
            Gets the trace's unique identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.SpanId">
            <summary>
            Gets the span's unique identifier.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Span.RootSpanId">
            <summary>
            Gets <i>local root span id</i>, i.e. the <c>SpanId</c> of the span that is the root of the local, non-reentrant
            sub-operation of the distributed operation that is represented by the trace that contains this span.
            </summary>
            <remarks>
            <para>If the trace has been propagated from a remote service, the <i>remote global root</i> is not relevant for this API.</para>
            <para>A distributed operation represented by a trace may be re-entrant (e.g. service-A calls service-B, which calls service-A again).
            In such cases, the local process may be concurrently executing multiple local root spans.
            This API returns the id of the root span of the non-reentrant trace sub-set.</para></remarks>
        </member>
        <member name="M:Datadog.Trace.Span.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Span.SetTag(System.String,System.String)">
            <summary>
            Add a the specified tag to this span.
            </summary>
            <param name="key">The tag's key.</param>
            <param name="value">The tag's value.</param>
            <returns>This span to allow method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Span.Finish">
            <summary>
            Record the end time of the span and flushes it to the backend.
            After the span has been finished all modifications will be ignored.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Span.Finish(System.DateTimeOffset)">
            <summary>
            Explicitly set the end time of the span and flushes it to the backend.
            After the span has been finished all modifications will be ignored.
            </summary>
            <param name="finishTimestamp">Explicit value for the end time of the Span</param>
        </member>
        <member name="M:Datadog.Trace.Span.Dispose">
            <summary>
            Record the end time of the span and flushes it to the backend.
            After the span has been finished all modifications will be ignored.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Span.SetException(System.Exception)">
            <summary>
            Add the StackTrace and other exception metadata to the span
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Datadog.Trace.Span.GetTag(System.String)">
            <summary>
            Gets the value (or default/null if the key is not a valid tag) of a tag with the key value passed
            </summary>
            <param name="key">The tag's key</param>
            <returns> The value for the tag with the key specified, or null if the tag does not exist</returns>
        </member>
        <member name="T:Datadog.Trace.SpanContext">
            <summary>
            The SpanContext contains all the information needed to express relationships between spans inside or outside the process boundaries.
            </summary>
        </member>
        <member name="M:Datadog.Trace.SpanContext.#ctor(System.Nullable{System.UInt64},System.UInt64,System.Nullable{Datadog.Trace.SamplingPriority},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SpanContext"/> class
            from a propagated context. <see cref="P:Datadog.Trace.SpanContext.Parent"/> will be null
            since this is a root context locally.
            </summary>
            <param name="traceId">The propagated trace id.</param>
            <param name="spanId">The propagated span id.</param>
            <param name="samplingPriority">The propagated sampling priority.</param>
            <param name="serviceName">The service name to propagate to child spans.</param>
        </member>
        <member name="M:Datadog.Trace.SpanContext.#ctor(System.Nullable{System.UInt64},System.UInt64,System.Nullable{Datadog.Trace.SamplingPriority},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SpanContext"/> class
            from a propagated context. <see cref="P:Datadog.Trace.SpanContext.Parent"/> will be null
            since this is a root context locally.
            </summary>
            <param name="traceId">The propagated trace id.</param>
            <param name="spanId">The propagated span id.</param>
            <param name="samplingPriority">The propagated sampling priority.</param>
            <param name="serviceName">The service name to propagate to child spans.</param>
            <param name="origin">The propagated origin of the trace.</param>
        </member>
        <member name="M:Datadog.Trace.SpanContext.#ctor(Datadog.Trace.ISpanContext,Datadog.Trace.ITraceContext,System.String,System.Nullable{System.UInt64},System.Nullable{System.UInt64})">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SpanContext"/> class
            that is the child of the specified parent context.
            </summary>
            <param name="parent">The parent context.</param>
            <param name="traceContext">The trace context.</param>
            <param name="serviceName">The service name to propagate to child spans.</param>
            <param name="traceId">Override the trace id if there's no parent.</param>
            <param name="spanId">The propagated span id.</param>
        </member>
        <member name="P:Datadog.Trace.SpanContext.Parent">
            <summary>
            Gets the parent context.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.TraceId">
            <summary>
            Gets the trace id
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.ParentId">
            <summary>
            Gets the span id of the parent span
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.SpanId">
            <summary>
            Gets the span id
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.ServiceName">
            <summary>
            Gets or sets the service name to propagate to child spans.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.Origin">
            <summary>
            Gets or sets the origin of the trace
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.TraceContext">
            <summary>
            Gets the trace context.
            Returns null for contexts created from incoming propagated context.
            </summary>
        </member>
        <member name="P:Datadog.Trace.SpanContext.SamplingPriority">
            <summary>
            Gets the sampling priority for contexts created from incoming propagated context.
            Returns null for local contexts.
            </summary>
        </member>
        <member name="M:Datadog.Trace.SpanContextPropagator.Inject``1(Datadog.Trace.SpanContext,``0)">
            <summary>
            Propagates the specified context by adding new headers to a <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/>.
            This locks the sampling priority for <paramref name="context"/>.
            </summary>
            <param name="context">A <see cref="T:Datadog.Trace.SpanContext"/> value that will be propagated into <paramref name="headers"/>.</param>
            <param name="headers">A <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/> to add new headers to.</param>
            <typeparam name="T">Type of header collection</typeparam>
        </member>
        <member name="M:Datadog.Trace.SpanContextPropagator.Inject``1(Datadog.Trace.SpanContext,``0,System.Action{``0,System.String,System.String})">
            <summary>
            Propagates the specified context by adding new headers to a <see cref="T:Datadog.Trace.Headers.IHeadersCollection"/>.
            This locks the sampling priority for <paramref name="context"/>.
            </summary>
            <param name="context">A <see cref="T:Datadog.Trace.SpanContext"/> value that will be propagated into <paramref name="carrier"/>.</param>
            <param name="carrier">The headers to add to.</param>
            <param name="setter">The action that can set a header in the carrier.</param>
            <typeparam name="T">Type of header collection</typeparam>
        </member>
        <member name="M:Datadog.Trace.SpanContextPropagator.Extract``1(``0)">
            <summary>
            Extracts a <see cref="T:Datadog.Trace.SpanContext"/> from the values found in the specified headers.
            </summary>
            <param name="headers">The headers that contain the values to be extracted.</param>
            <typeparam name="T">Type of header collection</typeparam>
            <returns>A new <see cref="T:Datadog.Trace.SpanContext"/> that contains the values obtained from <paramref name="headers"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.SpanContextPropagator.Extract``1(``0,System.Func{``0,System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Extracts a <see cref="T:Datadog.Trace.SpanContext"/> from the values found in the specified headers.
            </summary>
            <param name="carrier">The headers that contain the values to be extracted.</param>
            <param name="getter">The function that can extract a list of values for a given header name.</param>
            <typeparam name="T">Type of header collection</typeparam>
            <returns>A new <see cref="T:Datadog.Trace.SpanContext"/> that contains the values obtained from <paramref name="carrier"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.SpanContextPropagator.Key.GetHashCode">
            <summary>
            Gets the struct hashcode
            </summary>
            <returns>Hashcode</returns>
        </member>
        <member name="M:Datadog.Trace.SpanContextPropagator.Key.Equals(System.Object)">
            <summary>
            Gets if the struct is equal to other object or struct
            </summary>
            <param name="obj">Object to compare</param>
            <returns>True if both are equals; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.SpanContextPropagator.Key.Equals(Datadog.Trace.SpanContextPropagator.Key)">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.SpanEventArgs">
            <summary>
            EventArgs for a Span
            </summary>
        </member>
        <member name="M:Datadog.Trace.SpanEventArgs.#ctor(Datadog.Trace.Span)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.SpanEventArgs"/> struct.
            Creates a new <see cref="T:Datadog.Trace.SpanEventArgs"/> using <paramref name="span"/>
            </summary>
            <param name="span">The <see cref="P:Datadog.Trace.SpanEventArgs.Span"/> used to initialize the <see cref="T:Datadog.Trace.SpanEventArgs"/> object.</param>
        </member>
        <member name="T:Datadog.Trace.SpanKinds">
            <summary>
            A set of standard span kinds that can be used by integrations.
            Not to be confused with span types.
            </summary>
            <seealso cref="T:Datadog.Trace.SpanTypes"/>
        </member>
        <member name="F:Datadog.Trace.SpanKinds.Client">
            <summary>
            A span generated by the client in a client/server architecture.
            </summary>
            <seealso cref="F:Datadog.Trace.Tags.SpanKind"/>
        </member>
        <member name="F:Datadog.Trace.SpanKinds.Server">
            <summary>
            A span generated by the server in a client/server architecture.
            </summary>
            <seealso cref="F:Datadog.Trace.Tags.SpanKind"/>
        </member>
        <member name="F:Datadog.Trace.SpanKinds.Producer">
            <summary>
            A span generated by the producer in a producer/consumer architecture.
            </summary>
            <seealso cref="F:Datadog.Trace.Tags.SpanKind"/>
        </member>
        <member name="F:Datadog.Trace.SpanKinds.Consumer">
            <summary>
            A span generated by the consumer in a producer/consumer architecture.
            </summary>
            <seealso cref="F:Datadog.Trace.Tags.SpanKind"/>
        </member>
        <member name="T:Datadog.Trace.SpanTypes">
            <summary>
            A set of standard span types that can be used by integrations.
            Not to be confused with span kinds.
            </summary>
            <seealso cref="T:Datadog.Trace.SpanKinds"/>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Redis">
            <summary>
            The span type for a Redis client integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Sql">
            <summary>
            The span type for a SQL client integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Web">
            <summary>
            The span type for a web framework integration (incoming HTTP requests).
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.MongoDb">
            <summary>
            The span type for a MongoDB integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Http">
            <summary>
            The span type for an outgoing HTTP integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.GraphQL">
            <summary>
            The span type for a GraphQL integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Queue">
            <summary>
            The span type for a message queue integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Custom">
            <summary>
            The span type for a custom integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Test">
            <summary>
            The span type for a Test instegration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Benchmark">
            <summary>
            The span type for a Benchmark integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Build">
            <summary>
            The span type for msbuild integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Aerospike">
            <summary>
            The span type for an Aerospike integration.
            </summary>
        </member>
        <member name="F:Datadog.Trace.SpanTypes.Serverless">
            <summary>
            The span type for serverless integrations.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tagging.MsmqTags.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Tagging.MsmqTags"/> class.
            </summary>
            <param name="spanKind">kind of span</param>
        </member>
        <member name="P:Datadog.Trace.Tagging.MsmqTags.SpanKind">
            <inheritdoc/>
        </member>
        <member name="T:Datadog.Trace.Tags">
            <summary>
            Standard span tags used by integrations.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Env">
            <summary>
            The environment of the profiled service.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Version">
            <summary>
            The version of the profiled service.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.InstrumentationName">
            <summary>
            The name of the integration that generated the span.
            Use OpenTracing tag "component"
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.InstrumentedMethod">
            <summary>
            The name of the method that was instrumented to generate the span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.SpanKind">
            <summary>
            The kind of span (e.g. client, server). Not to be confused with <see cref="P:Datadog.Trace.Span.Type"/>.
            </summary>
            <seealso cref="T:Datadog.Trace.SpanKinds"/>
        </member>
        <member name="F:Datadog.Trace.Tags.HttpUrl">
            <summary>
            The URL of an HTTP request
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.HttpMethod">
            <summary>
            The method of an HTTP request
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.HttpRequestHeadersHost">
            <summary>
            The host of an HTTP request
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.HttpStatusCode">
            <summary>
            The status code of an HTTP response
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ErrorMsg">
            <summary>
            The error message of an exception
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ErrorType">
            <summary>
            The type of an exception
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ErrorStack">
            <summary>
            The stack trace of an exception
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.DbType">
            <summary>
            The type of database (e.g. mssql, mysql)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.DbUser">
            <summary>
            The user used to sign into a database
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.DbName">
            <summary>
            The name of the database.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.SqlQuery">
            <summary>
            The query text
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.SqlRows">
            <summary>
            The number of rows returned by a query
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetRoute">
            <summary>
            The ASP.NET routing template.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetController">
            <summary>
            The MVC or Web API controller name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetAction">
            <summary>
            The MVC or Web API action name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetArea">
            <summary>
            The MVC or Web API area name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreRoute">
            <summary>
            The ASP.NET routing template.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreController">
            <summary>
            The MVC or Web API controller name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreAction">
            <summary>
            The MVC or Web API action name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreArea">
            <summary>
            The MVC or Web API area name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCorePage">
            <summary>
            The Razor Pages page name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AspNetCoreEndpoint">
            <summary>
            The Endpoint name in ASP.NET Core endpoint routing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.OutHost">
            <summary>
            The hostname of a outgoing server connection.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.OutPort">
            <summary>
            The port of a outgoing server connection.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.RedisRawCommand">
            <summary>
            The raw command sent to Redis.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MongoDbQuery">
            <summary>
            A MongoDB query.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MongoDbCollection">
            <summary>
            A MongoDB collection name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.GraphQLOperationName">
            <summary>
            The operation name of the GraphQL request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.GraphQLOperationType">
            <summary>
            The operation type of the GraphQL request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.GraphQLSource">
            <summary>
            The source defining the GraphQL request.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpCommand">
            <summary>
            The AMQP method.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpExchange">
            <summary>
            The name of the AMQP exchange the message was originally published to.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpRoutingKey">
            <summary>
            The routing key for the AMQP message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpQueue">
            <summary>
            The name of the queue for the AMQP message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AmqpDeliveryMode">
            <summary>
            The delivery mode of the AMQP message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.KafkaPartition">
            <summary>
            The partition associated with a record
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.KafkaOffset">
            <summary>
            The offset inside a partition associated with a record
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.KafkaTombstone">
            <summary>
            Whether the record was a "tombstone" record
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MessageSize">
            <summary>
            The size of the message.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsAgentName">
            <summary>
            The agent that instrumented the associated AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsOperationName">
            <summary>
            The operation associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsRegion">
            <summary>
            The region associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsRequestId">
            <summary>
            The request ID associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsServiceName">
            <summary>
            The service associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsQueueName">
            <summary>
            The queue name associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AwsQueueUrl">
            <summary>
            The queue URL associated with the AWS SDK span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.SamplingPriority">
            <summary>
            The sampling priority for the entire trace.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ForceKeep">
            <summary>
            Obsolete. Use <see cref="F:Datadog.Trace.Tags.ManualKeep"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ForceDrop">
            <summary>
            Obsolete. Use <see cref="F:Datadog.Trace.Tags.ManualDrop"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ManualKeep">
            <summary>
            A user-friendly tag that sets the sampling priority to <see cref="F:Datadog.Trace.SamplingPriority.UserKeep"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.ManualDrop">
            <summary>
            A user-friendly tag that sets the sampling priority to <see cref="F:Datadog.Trace.SamplingPriority.UserReject"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Analytics">
            <summary>
            Configures Trace Analytics.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Language">
            <summary>
            Language tag, applied to root spans that are .NET runtime (e.g., ASP.NET)
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.RuntimeFamily">
            <summary>
            The runtime family tag, it will be placed on the service entry span, the first span opened for a
            service. For this library it will always have the value "dotnet".
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesResourceId">
            <summary>
            The resource ID of the site instance in Azure App Services where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesResourceGroup">
            <summary>
            The resource group of the site instance in Azure App Services where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesSiteName">
            <summary>
            The site name of the site instance in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesExtensionVersion">
            <summary>
            The version of the extension installed where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesInstanceName">
            <summary>
            The instance name in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesInstanceId">
            <summary>
            The instance ID in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesOperatingSystem">
            <summary>
            The operating system in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesRuntime">
            <summary>
            The runtime in Azure where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesSiteKind">
            <summary>
            The kind of application instance running in Azure.
            Possible values: app, api, mobileapp, app_linux, app_linux_container, functionapp, functionapp_linux, functionapp_linux_container
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesSiteType">
            <summary>
            The type of application instance running in Azure.
            Possible values: app, function
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureAppServicesSubscriptionId">
            <summary>
            The subscription ID of the site instance in Azure App Services where the traced application is running.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureFunctionTriggerType">
            <summary>
            The type of trigger for an azure function
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureFunctionName">
            <summary>
            The UI name of the azure function
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureFunctionMethod">
            <summary>
            The full method name of the azure function
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AzureFunctionBindingSource">
            <summary>
            The literal type of the binding for the azure function trigger
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Origin">
            <summary>
            Configures the origin of the trace
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.Measured">
            <summary>
            Configures the measured metric for a span.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MsmqCommand">
            <summary>
            The name of the Msmq command the message was published to.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MsmqIsTransactionalQueue">
            <summary>
            Is the msmq queue supporting transactional messages
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MsmqQueuePath">
            <summary>
            The name of the Msmq queue the message was published to, containing host name and path.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.MsmqMessageWithTransaction">
            <summary>
            A boolean indicating if it's part of a transaction.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.CosmosDbContainer">
            <summary>
            A CosmosDb container name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tags.AppSecEvent">
            <summary>
            If a span was involved with an application security event
            </summary>
        </member>
        <member name="P:Datadog.Trace.TraceContext.SamplingPriority">
            <summary>
            Gets or sets sampling priority.
            Once the sampling priority is locked with <see cref="M:Datadog.Trace.TraceContext.LockSamplingPriority"/>,
            further attempts to set this are ignored.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Tracer">
            <summary>
            The tracer is responsible for creating spans and flushing them to the Datadog agent
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tracer._liveTracerCount">
            <summary>
            The number of Tracer instances that have been created and not yet destroyed.
            This is used in the heartbeat metrics to estimate the number of
            "live" Tracers that could potentially be sending traces to the Agent.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Tracer._firstInitialization">
            <summary>
            Indicates whether we're initializing a tracer for the first time
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tracer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Tracer"/> class with default settings.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tracer.#ctor(Datadog.Trace.Configuration.TracerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Tracer"/>
            class using the specified <see cref="T:Datadog.Trace.Configuration.IConfigurationSource"/>.
            </summary>
            <param name="settings">
            A <see cref="T:Datadog.Trace.Configuration.TracerSettings"/> instance with the desired settings,
            or null to use the default configuration sources.
            </param>
        </member>
        <member name="M:Datadog.Trace.Tracer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Datadog.Trace.Tracer"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Instance">
            <summary>
            Gets or sets the global <see cref="T:Datadog.Trace.Tracer"/> instance.
            Used by all automatic instrumentation and recommended
            as the entry point for manual instrumentation.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.ActiveScope">
            <summary>
            Gets the active scope
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.DefaultServiceName">
            <summary>
            Gets the default service name for traces where a service name is not specified.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Settings">
            <summary>
            Gets this tracer's settings.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Datadog#Trace#IDatadogTracer#AgentVersion">
            <summary>
            Gets or sets the detected version of the agent
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Datadog#Trace#IDatadogTracer#ScopeManager">
            <summary>
            Gets the tracer's scope manager, which determines which span is currently active, if any.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Tracer.Datadog#Trace#IDatadogTracer#Sampler">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Sampling.ISampler"/> instance used by this <see cref="T:Datadog.Trace.IDatadogTracer"/> instance.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Tracer.Create(System.Uri,System.String,System.Boolean)">
            <summary>
            Create a new Tracer with the given parameters
            </summary>
            <param name="agentEndpoint">The agent endpoint where the traces will be sent (default is http://localhost:8126).</param>
            <param name="defaultServiceName">Default name of the service (default is the name of the executing assembly).</param>
            <param name="isDebugEnabled">Turns on all debug logging (this may have an impact on application performance).</param>
            <returns>The newly created tracer</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.UnsafeSetTracerInstance(Datadog.Trace.Tracer)">
            <summary>
            Sets the global tracer instace without any validation.
            Intended use is for unit testing
            </summary>
            <param name="instance">Tracer instance</param>
        </member>
        <member name="M:Datadog.Trace.Tracer.Datadog#Trace#IDatadogTracer#ActivateSpan(Datadog.Trace.Span)">
            <summary>
            Make a span the active span and return its new scope.
            </summary>
            <param name="span">The span to activate.</param>
            <returns>A Scope object wrapping this span.</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.ActivateSpan(Datadog.Trace.Span,System.Boolean)">
            <summary>
            Make a span the active span and return its new scope.
            </summary>
            <param name="span">The span to activate.</param>
            <param name="finishOnClose">Determines whether closing the returned scope will also finish the span.</param>
            <returns>A Scope object wrapping this span.</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.StartActive(System.String,Datadog.Trace.ISpanContext,System.String,System.Nullable{System.DateTimeOffset},System.Boolean,System.Boolean)">
            <summary>
            This is a shortcut for <see cref="M:Datadog.Trace.Tracer.StartSpan(System.String,Datadog.Trace.ISpanContext,System.String,System.Nullable{System.DateTimeOffset},System.Boolean)"/>
            and <see cref="M:Datadog.Trace.Tracer.ActivateSpan(Datadog.Trace.Span,System.Boolean)"/>, it creates a new span with the given parameters and makes it active.
            </summary>
            <param name="operationName">The span's operation name</param>
            <param name="parent">The span's parent</param>
            <param name="serviceName">The span's service name</param>
            <param name="startTime">An explicit start time for that span</param>
            <param name="ignoreActiveScope">If set the span will not be a child of the currently active span</param>
            <param name="finishOnClose">If set to false, closing the returned scope will not close the enclosed span </param>
            <returns>A scope wrapping the newly created span</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.Datadog#Trace#IDatadogTracer#StartSpan(System.String)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Span"/> with the specified parameters.
            </summary>
            <param name="operationName">The span's operation name</param>
            <returns>The newly created span</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.Datadog#Trace#IDatadogTracer#StartSpan(System.String,Datadog.Trace.ISpanContext)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Span"/> with the specified parameters.
            </summary>
            <param name="operationName">The span's operation name</param>
            <param name="parent">The span's parent</param>
            <returns>The newly created span</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.StartSpan(System.String,Datadog.Trace.ISpanContext,System.String,System.Nullable{System.DateTimeOffset},System.Boolean)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Span"/> with the specified parameters.
            </summary>
            <param name="operationName">The span's operation name</param>
            <param name="parent">The span's parent</param>
            <param name="serviceName">The span's service name</param>
            <param name="startTime">An explicit start time for that span</param>
            <param name="ignoreActiveScope">If set the span will not be a child of the currently active span</param>
            <returns>The newly created span</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.ForceFlushAsync">
            <summary>
            Forces the tracer to immediately flush pending traces and send them to the agent.
            To be called when the appdomain or the process is about to be killed in a non-graceful way.
            </summary>
            <returns>Task used to track the async flush operation</returns>
        </member>
        <member name="M:Datadog.Trace.Tracer.Datadog#Trace#IDatadogTracer#Write(System.ArraySegment{Datadog.Trace.Span})">
            <summary>
            Writes the specified <see cref="T:Datadog.Trace.Span"/> collection to the agent writer.
            </summary>
            <param name="trace">The <see cref="T:Datadog.Trace.Span"/> collection to write.</param>
        </member>
        <member name="M:Datadog.Trace.Tracer.GetApplicationName">
            <summary>
            Gets an "application name" for the executing application by looking at
            the hosted app name (.NET Framework on IIS only), assembly name, and process name.
            </summary>
            <returns>The default service name.</returns>
        </member>
        <member name="F:Datadog.Trace.TracerConstants.MaxTraceId">
            <summary>
            2^63-1
            </summary>
        </member>
        <member name="T:Datadog.Trace.TracingProcessManager">
            <summary>
            This class is used to manage agent processes in contexts where the user can not, such as Azure App Services.
            </summary>
        </member>
        <member name="P:Datadog.Trace.TracingProcessManager.ProcessMetadata.IsBeingManaged">
            <summary>
            Gets or sets a value indicating whether this is being managed by active keep alive tasks.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Util.Clock._overrideClock">
            <summary>
            Flag used to avoid checking the threadstatic field when running outside of tests
            </summary>
        </member>
        <member name="M:Datadog.Trace.Util.Clock.SetForCurrentThread(Datadog.Trace.Util.IClock)">
            <summary>
            Overrides the clock used by the current thread.
            This method should be called only from unit tests.
            </summary>
            <param name="customClock">Fake clock</param>
            <returns>Lease to dispose to restore the original state</returns>
        </member>
        <member name="P:Datadog.Trace.Util.DbCommandCache.Cache">
            <summary>
            Gets or sets the underlying cache, to be used for unit tests
            </summary>
        </member>
        <member name="T:Datadog.Trace.Util.DomainMetadata">
            <summary>
            Dedicated helper class for consistently referencing Process and AppDomain information.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Util.EnvironmentHelpers">
            <summary>
            Helpers to access environment variables
            </summary>
        </member>
        <member name="M:Datadog.Trace.Util.EnvironmentHelpers.SetEnvironmentVariable(System.String,System.String)">
            <summary>
            Safe wrapper around Environment.SetEnvironmentVariable
            </summary>
            <param name="key">Name of the environment variable to set</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Datadog.Trace.Util.EnvironmentHelpers.GetEnvironmentVariable(System.String,System.String)">
            <summary>
            Safe wrapper around Environment.GetEnvironmentVariable
            </summary>
            <param name="key">Name of the environment variable to fetch</param>
            <param name="defaultValue">Value to return in case of error</param>
            <returns>The value of the environment variable, or the default value if an error occured</returns>
        </member>
        <member name="M:Datadog.Trace.Util.EnvironmentHelpers.GetEnvironmentVariables">
            <summary>
            Safe wrapper around Environment.GetEnvironmentVariables
            </summary>
            <returns>A dictionary that contains all environment variables, or en empty dictionary if an error occured</returns>
        </member>
        <member name="M:Datadog.Trace.Util.ProcessHelpers.GetCurrentProcessName">
             <summary>
             Wrapper around <see cref="M:System.Diagnostics.Process.GetCurrentProcess"/> and <see cref="P:System.Diagnostics.Process.ProcessName"/>
            
             On .NET Framework the <see cref="T:System.Diagnostics.Process"/> class is guarded by a
             LinkDemand for FullTrust, so partial trust callers will throw an exception.
             This exception is thrown when the caller method is being JIT compiled, NOT
             when Process.GetCurrentProcess is called, so this wrapper method allows
             us to catch the exception.
             </summary>
             <returns>Returns the name of the current process</returns>
        </member>
        <member name="M:Datadog.Trace.Util.ProcessHelpers.GetCurrentProcessInformation(System.String@,System.String@,System.Int32@)">
             <summary>
             Wrapper around <see cref="M:System.Diagnostics.Process.GetCurrentProcess"/> and its property accesses
            
             On .NET Framework the <see cref="T:System.Diagnostics.Process"/> class is guarded by a
             LinkDemand for FullTrust, so partial trust callers will throw an exception.
             This exception is thrown when the caller method is being JIT compiled, NOT
             when Process.GetCurrentProcess is called, so this wrapper method allows
             us to catch the exception.
             </summary>
             <param name="processName">The name of the current process</param>
             <param name="machineName">The machine name of the current process</param>
             <param name="processId">The ID of the current process</param>
        </member>
        <member name="M:Datadog.Trace.Util.ProcessHelpers.GetCurrentProcessRuntimeMetrics(System.TimeSpan@,System.TimeSpan@,System.Int32@,System.Int64@)">
             <summary>
             Wrapper around <see cref="M:System.Diagnostics.Process.GetCurrentProcess"/> and its property accesses
            
             On .NET Framework the <see cref="T:System.Diagnostics.Process"/> class is guarded by a
             LinkDemand for FullTrust, so partial trust callers will throw an exception.
             This exception is thrown when the caller method is being JIT compiled, NOT
             when Process.GetCurrentProcess is called, so this wrapper method allows
             us to catch the exception.
             </summary>
             <param name="userProcessorTime">CPU time in user mode</param>
             <param name="systemCpuTime">CPU time in kernel mode</param>
             <param name="threadCount">Number of threads</param>
             <param name="privateMemorySize">Committed memory size</param>
        </member>
        <member name="M:Datadog.Trace.Util.PropertyFetcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Util.PropertyFetcher"/> class.
            </summary>
            <param name="propertyName">The name of the property that this instance will fetch.</param>
        </member>
        <member name="M:Datadog.Trace.Util.PropertyFetcher.Fetch``1(System.Object)">
            <summary>
            Gets the value of the property on the specified object.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="obj">The object that contains the property.</param>
            <returns>The value of the property on the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Util.PropertyFetcher.Fetch``1(System.Object,System.Type)">
            <summary>
            Gets the value of the property on the specified object.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="obj">The object that contains the property.</param>
            <param name="objType">Type of the object</param>
            <returns>The value of the property on the specified object.</returns>
        </member>
        <member name="T:Datadog.Trace.Util.PropertyFetcher.PropertyFetch`1">
            <summary>
            PropertyFetch is a helper class. It takes a PropertyInfo and then knows how
            to efficiently fetch that property from a .NET object (See Fetch method).
            It hides some slightly complex generic code.
            </summary>
            <typeparam name="T">Return type of the property.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Util.PropertyFetcher.PropertyFetch`1.FetcherForProperty(System.Reflection.PropertyInfo)">
            <summary>
            Create a property fetcher from a .NET Reflection <see cref="T:System.Reflection.PropertyInfo"/> class that
            represents a property of a particular type.
            </summary>
            <param name="propertyInfo">The property that this instance will fetch.</param>
            <returns>The new property fetcher.</returns>
        </member>
        <member name="M:Datadog.Trace.Util.PropertyFetcher.PropertyFetch`1.Fetch(System.Object)">
            <summary>
            Gets the value of the property on the specified object.
            </summary>
            <param name="obj">The object that contains the property.</param>
            <returns>The value of the property on the specified object.</returns>
        </member>
        <member name="T:Datadog.Trace.Util.StringBuilderCache">
            <summary>
            Provide a cached reusable instance of StringBuilder per thread.
            </summary>
            <remarks>
            Based on https://source.dot.net/#System.Private.CoreLib/StringBuilderCache.cs,a6dbe82674916ac0
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Util.UriHelpers.CleanUri(System.Uri,System.Boolean,System.Boolean)">
            <summary>
            Remove the querystring, user information, and fragment from a URL.
            Optionally reduce cardinality by replacing segments that look like IDs with <c>?</c>.
            </summary>
            <param name="uri">The URI to clean</param>
            <param name="removeScheme">Should the scheme be removed?</param>
            <param name="tryRemoveIds">Should IDs be replaced with <c>?</c></param>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2">
            <summary>
            Provides general helpers for creating collections (including dictionaries).
            </summary>
            <typeparam name="TCollection">The concrete type of collection to create.</typeparam>
            <typeparam name="TEqualityComparer">The type of equality comparer that we would hope to pass into the collection's constructor.</typeparam>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2.collectionCreator">
            <summary>
            The delegate that will create the collection, if the typical (int count, IEqualityComparer{T} equalityComparer) constructor was found.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2"/> class.
            </summary>
            <remarks>
            Initializes a delegate that is optimized to create a collection of a given size and using the given equality comparer, if possible.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Formatters.CollectionHelpers`2.CreateHashCollection(System.Int32,`1)">
            <summary>
            Initializes a new instance of the <typeparamref name="TCollection"/> collection.
            </summary>
            <param name="count">The number of elements the collection should be prepared to receive.</param>
            <param name="equalityComparer">The equality comparer to initialize the collection with.</param>
            <returns>The newly initialized collection.</returns>
            <remarks>
            Use of the <paramref name="count"/> and <paramref name="equalityComparer"/> are a best effort.
            If we can't find a constructor on the collection in the expected shape, we'll just instantiate the collection with its default constructor.
            </remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Formatters.NativeDateTimeFormatter">
            <summary>
            Serialize by .NET native DateTime binary format.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Formatters.OldSpecStringFormatter">
            <summary>
            Old-MessagePack spec's string formatter.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Formatters.OldSpecBinaryFormatter">
            <summary>
            Old-MessagePack spec's binary formatter.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Get MethodInfo from Expression for Static(with result) method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Get MethodInfo from Expression for Static(void) method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get MethodInfo from Expression for Instance(with result) method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Get MethodInfo from Expression for Instance(void) method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.Internal.ExpressionUtility.GetMethodInfo``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Get MethodInfo from Expression for Instance(with result) method.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec">
            <summary>Safe LZ4 codec.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.MEMORY_USAGE">
            <summary>
            Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; etc.)
            Increasing memory usage improves compression ratio
            Reduced memory usage can improve speed, due to cache effect
            Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.NOTCOMPRESSIBLE_DETECTIONLEVEL">
            <summary>
            Decreasing this value will make the algorithm skip faster data segments considered "incompressible"
            This may decrease compression ratio dramatically, but will be faster on incompressible data
            Increasing this value will make the algorithm search more before declaring a segment "incompressible"
            This could improve compression a bit, but will be slower on incompressible data
            The default value (6) is recommended
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.MaximumOutputLength(System.Int32)">
            <summary>Gets maximum the length of the output.</summary>
            <param name="inputLength">Length of the input.</param>
            <returns>Maximum number of bytes needed for compressed buffer.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.Encode32Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.Encode64Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Encodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.Decode32Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4.LZ4Codec.Decode64Safe(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Decodes the specified input.</summary>
            <param name="input">The input.</param>
            <param name="inputOffset">The input offset.</param>
            <param name="inputLength">Length of the input.</param>
            <param name="output">The output.</param>
            <param name="outputOffset">The output offset.</param>
            <param name="outputLength">Length of the output.</param>
            <returns>Number of bytes written.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer">
            <summary>
            LZ4 Compressed special serializer.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.Serialize``1(``0)">
            <summary>
            Serialize to binary with default resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.Serialize``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to binary with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.Serialize``1(System.IO.Stream,``0)">
            <summary>
            Serialize to stream.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.Serialize``1(System.IO.Stream,``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to stream with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.DecodeUnsafe(System.Byte[])">
            <summary>
            Get the war memory pool byte[]. The result can not share across thread and can not hold and can not call LZ4Deserialize before use it.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.DecodeUnsafe(System.ArraySegment{System.Byte})">
            <summary>
            Get the war memory pool byte[]. The result can not share across thread and can not hold and can not call LZ4Deserialize before use it.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.ToJson``1(``0)">
            <summary>
            Dump to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.ToJson``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Dump to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.ToJson(System.Byte[])">
            <summary>
            Dump message-pack binary to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.LZ4MessagePackSerializer.FromJson(System.IO.TextReader)">
            <summary>
            From Json String to LZ4MessagePack binary
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackBinary">
            <summary>
            Encode/Decode Utility of MessagePack Spec.
            https://github.com/msgpack/msgpack/blob/master/spec.md
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.MaxArrayAllocationSize">
            <summary>
            A maximum allowable element count for any array or map allocated by this class
            when reading from non-seekable streams.
            The default is <see cref="F:System.Int32.MaxValue"/>.
            </summary>
            <remarks>
            When reading from a byte array or seekable streams, the actual length
            of the remaining buffer or stream is used to calculate a safe limit.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackRange.MaxFixMapCount(15), can use this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeader(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Write map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeader(System.Byte[]@,System.Int32,System.UInt32)">
            <summary>
            Write map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeaderForceMap32Block(System.Byte[]@,System.Int32,System.UInt32)">
            <summary>
            Write map format header, always use map32 format(length is fixed, 5).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMapHeader(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Return map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMapHeaderRaw(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Return map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedArrayHeaderUnsafe(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackRange.MaxFixArrayCount(15), can use this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeader(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Write array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeader(System.Byte[]@,System.Int32,System.UInt32)">
            <summary>
            Write array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeaderForceArray32Block(System.Byte[]@,System.Int32,System.UInt32)">
            <summary>
            Write array format header, always use array32 format(length is fixed, 5).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadArrayHeader(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Return array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadArrayHeaderRaw(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Return array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WritePositiveFixedIntUnsafe(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackCode.MaxFixInt(127), can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteInt32ForceInt32Block(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Acquire static message block(always 5 bytes).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedStringUnsafe(System.Byte[]@,System.Int32,System.String,System.Int32)">
            <summary>
            Unsafe. If value is guranteed length is 0 ~ 31, can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteStringUnsafe(System.Byte[]@,System.Int32,System.String,System.Int32)">
            <summary>
            Unsafe. If pre-calculated byteCount of target string, can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteExtensionFormatHeaderForceExt32Block(System.Byte[]@,System.Int32,System.SByte,System.Int32)">
            <summary>
            Write extension format header, always use ext32 format(length is fixed, 6).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadExtensionFormatHeader(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            return byte length of ExtensionFormat.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ThrowNotEnoughBytesException">
            <summary>
            Throws an exception indicating that there aren't enough bytes remaining in the buffer to store
            the promised data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMessageBlockFromStreamUnsafe(System.IO.Stream,System.Boolean,System.Int32@)">
            <summary>
            Read MessageBlock, returns byte[] block is in MemoryPool so careful to use.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedMapHeaderUnsafe(System.IO.Stream,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackRange.MaxFixMapCount(15), can use this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeader(System.IO.Stream,System.Int32)">
            <summary>
            Write map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeader(System.IO.Stream,System.UInt32)">
            <summary>
            Write map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteMapHeaderForceMap32Block(System.IO.Stream,System.UInt32)">
            <summary>
            Write map format header, always use map32 format(length is fixed, 5).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMapHeader(System.IO.Stream)">
            <summary>
            Return map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadMapHeaderRaw(System.IO.Stream)">
            <summary>
            Return map count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedArrayHeaderUnsafe(System.IO.Stream,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackRange.MaxFixArrayCount(15), can use this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeader(System.IO.Stream,System.Int32)">
            <summary>
            Write array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeader(System.IO.Stream,System.UInt32)">
            <summary>
            Write array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteArrayHeaderForceArray32Block(System.IO.Stream,System.UInt32)">
            <summary>
            Write array format header, always use array32 format(length is fixed, 5).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadArrayHeader(System.IO.Stream)">
            <summary>
            Return array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadArrayHeaderRaw(System.IO.Stream)">
            <summary>
            Return array count.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WritePositiveFixedIntUnsafe(System.IO.Stream,System.Int32)">
            <summary>
            Unsafe. If value is guranteed 0 ~ MessagePackCode.MaxFixInt(127), can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteInt32ForceInt32Block(System.IO.Stream,System.Int32)">
            <summary>
            Acquire static message block(always 5 bytes).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteFixedStringUnsafe(System.IO.Stream,System.String,System.Int32)">
            <summary>
            Unsafe. If value is guranteed length is 0 ~ 31, can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteStringUnsafe(System.IO.Stream,System.String,System.Int32)">
            <summary>
            Unsafe. If pre-calculated byteCount of target string, can use this method.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.WriteExtensionFormatHeaderForceExt32Block(System.IO.Stream,System.SByte,System.Int32)">
            <summary>
            Write extension format header, always use ext32 format(length is fixed, 6).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackBinary.ReadExtensionFormatHeader(System.IO.Stream)">
            <summary>
            return byte length of ExtensionFormat.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackType">
            <summary>
            https://github.com/msgpack/msgpack/blob/master/spec.md#serialization-type-to-format-conversion
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackCode">
            <summary>
            https://github.com/msgpack/msgpack/blob/master/spec.md#overview
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity">
            <summary>
            Settings related to security, particularly relevant when deserializing data from untrusted sources.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.ObjectGraphDepth">
            <summary>
            The thread-local value tracking recursion for an ongoing deserialization operation.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.TrustedData">
            <summary>
            Gets an instance preconfigured with settings that omit all protections. Useful for deserializing fully-trusted and valid msgpack sequences.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.UntrustedData">
            <summary>
            Gets an instance preconfigured with protections applied with reasonable settings for deserializing untrusted msgpack sequences.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.Active">
            <summary>
            The <see cref="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity"/> instance that is active for all deserialization operations within this AppDomain or process.
            </summary>
            <value>Defaults to <see cref="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.TrustedData"/>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.#ctor(Datadog.Trace.Vendors.MessagePack.MessagePackSecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity"/> class
            with properties copied from a provided template.
            </summary>
            <param name="copyFrom">The template to copy from.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant">
            <summary>
            Gets a value indicating whether data to be deserialized is untrusted and thus should not be allowed to create
            dictionaries or other hash-based collections unless the hashed type has a hash collision resistant implementation available.
            This can mitigate some denial of service attacks when deserializing untrusted code.
            </summary>
            <value>
            The value is <c>false</c> for <see cref="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.TrustedData"/> and <c>true</c> for <see cref="F:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.UntrustedData"/>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.MaximumObjectGraphDepth">
            <summary>
            Gets the maximum depth of an object graph that may be deserialized.
            </summary>
            <remarks>
            <para>
            This value can be reduced to avoid a stack overflow that would crash the process when deserializing a msgpack sequence designed to cause deep recursion.
            A very short callstack on a thread with 1MB of total stack space might deserialize ~2000 nested arrays before crashing due to a stack overflow.
            Since stack space occupied may vary by the kind of object deserialized, a conservative value for this property to defend against stack overflow attacks might be 500.
            </para>
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.WithMaximumObjectGraphDepth(System.Int32)">
            <summary>
            Gets a copy of these options with the <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.MaximumObjectGraphDepth"/> property set to a new value.
            </summary>
            <param name="maximumObjectGraphDepth">The new value for the <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.MaximumObjectGraphDepth"/> property.</param>
            <returns>The new instance; or the original if the value is unchanged.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.WithHashCollisionResistant(System.Boolean)">
            <summary>
            Gets a copy of these options with the <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> property set to a new value.
            </summary>
            <param name="hashCollisionResistant">The new value for the <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> property.</param>
            <returns>The new instance; or the original if the value is unchanged.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.GetEqualityComparer``1">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is suitable to use with a hash-based collection.
            </summary>
            <typeparam name="T">The type of key that will be hashed in the collection.</typeparam>
            <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use.</returns>
            <remarks>
            When <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> is active, this will be a collision resistant instance which may reject certain key types.
            When <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> is not active, this will be <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.GetEqualityComparer">
            <summary>
            Gets an <see cref="T:System.Collections.IEqualityComparer"/> that is suitable to use with a hash-based collection.
            </summary>
            <returns>The <see cref="T:System.Collections.IEqualityComparer"/> to use.</returns>
            <remarks>
            When <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> is active, this will be a collision resistant instance which may reject certain key types.
            When <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.HashCollisionResistant"/> is not active, this will be <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.GetHashCollisionResistantEqualityComparer``1">
            <summary>
            Returns a hash collision resistant equality comparer.
            </summary>
            <typeparam name="T">The type of key that will be hashed in the collection.</typeparam>
            <returns>A hash collision resistant equality comparer.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.DepthStep">
            <summary>
            Should be called within the expression of a <c>using</c> statement around which a <see cref="M:Datadog.Trace.Vendors.MessagePack.Formatters.IMessagePackFormatter`1.Deserialize(System.Byte[],System.Int32,Datadog.Trace.Vendors.MessagePack.IFormatterResolver,System.Int32@)"/> method
            deserializes a sub-element.
            </summary>
            <returns>A value to be disposed of when deserializing the sub-element is complete.</returns>
            <exception cref="T:System.InsufficientExecutionStackException">Thrown when the depth of the object graph being deserialized exceeds <see cref="P:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.MaximumObjectGraphDepth"/>.</exception>
            <remarks>
            Rather than wrap the body of every <see cref="M:Datadog.Trace.Vendors.MessagePack.Formatters.IMessagePackFormatter`1.Deserialize(System.Byte[],System.Int32,Datadog.Trace.Vendors.MessagePack.IFormatterResolver,System.Int32@)"/> method,
            this should wrap *calls* to these methods. They need not appear in pure "thunk" methods that simply delegate the deserialization to another formatter.
            In this way, we can avoid repeatedly incrementing and decrementing the counter when deserializing each element of a collection.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.GetHashCollisionResistantEqualityComparer">
            <summary>
            Returns a hash collision resistant equality comparer.
            </summary>
            <returns>A hash collision resistant equality comparer.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.Clone">
            <summary>
            Creates a new instance that is a copy of this one.
            </summary>
            <remarks>
            Derived types should override this method to instantiate their own derived type.
            </remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.ObjectGraphDepthStep">
            <summary>
            The struct returned from <see cref="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.DepthStep"/>
            that when disposed will decrement the object graph depth counter to reverse
            the effect of the call to <see cref="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.DepthStep"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.ObjectGraphDepthStep.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.CollisionResistantHasher`1">
            <summary>
            A hash collision resistant implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
            <typeparam name="T">The type of key that will be hashed.</typeparam>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSecurity.ObjectFallbackEqualityComparer">
            <summary>
            A special hash-resistent equality comparer that defers picking the actual implementation
            till it can check the runtime type of each value to be hashed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer">
            <summary>
            High-Level API of MessagePack for C#.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.DefaultResolver">
            <summary>
            FormatterResolver that used resolver less overloads. If does not set it, used StandardResolver.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.IsInitialized">
            <summary>
            Is resolver decided?
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SetDefaultResolver(Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Set default resolver of MessagePackSerializer APIs.
            </summary>
            <param name="resolver"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(``0)">
            <summary>
            Serialize to binary with default resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to binary with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SerializeUnsafe``1(``0)">
            <summary>
            Serialize to binary. Get the raw memory pool byte[]. The result can not share across thread and can not hold, so use quickly.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SerializeUnsafe``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to binary with specified resolver. Get the raw memory pool byte[]. The result can not share across thread and can not hold, so use quickly.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(System.IO.Stream,``0)">
            <summary>
            Serialize to stream.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(System.IO.Stream,``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to stream with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Serialize``1(System.Byte[]@,System.Int32,``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Reflect of resolver.GetFormatterWithVerify[T].Serialize.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SerializeAsync``1(System.IO.Stream,``0)">
            <summary>
            Serialize to stream(async).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.SerializeAsync``1(System.IO.Stream,``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Serialize to stream(async) with specified resolver.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.Deserialize``1(System.Byte[],System.Int32,Datadog.Trace.Vendors.MessagePack.IFormatterResolver,System.Int32@)">
            <summary>
            Reflect of resolver.GetFormatterWithVerify[T].Deserialize.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.ToJson``1(``0)">
            <summary>
            Dump to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.ToJson``1(``0,Datadog.Trace.Vendors.MessagePack.IFormatterResolver)">
            <summary>
            Dump to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.ToJson(System.Byte[])">
            <summary>
            Dump message-pack binary to JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.FromJson(System.IO.TextReader)">
            <summary>
            From Json String to MessagePack binary
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.MessagePack.MessagePackSerializer.FromJsonUnsafe(System.IO.TextReader)">
            <summary>
            return buffer is from memory pool, be careful to use. 
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Resolvers.AttributeFormatterResolver">
            <summary>
            Get formatter from [MessaegPackFromatter] attribute.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.MessagePack.Resolvers.StandardResolver">
            <summary>
            Default composited resolver, builtin -> attribute -> dynamic enum -> dynamic generic -> dynamic union -> dynamic object -> primitive.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized BSON data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should be compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the BSON data to read.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> containing the BSON data to read.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream"/> is also closed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating BSON data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write to.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to write to.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.Stream"/> and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream"/> is also closed.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to a single parameterized constructor, then to the non-public default constructor.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Creates a custom object.
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework <see cref="T:System.Data.EntityKeyMember"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>
            Converts an <see cref="T:System.Dynamic.ExpandoObject"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. <c>"2008-04-12T12:53Z"</c>).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript <c>Date</c> constructor (e.g. <c>new Date(52231943)</c>).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.RegexConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.RegexConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how enum text is written.
            </summary>
            <value>The naming strategy used to resolve how enum text is written.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed when serializing and deserializing.
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="camelCaseText"><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="namingStrategy">The naming strategy used to resolve how enum text is written.</param>
            <param name="allowIntegerValues"><c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="namingStrategyType">The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> used to write enum text.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="namingStrategyType">The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> used to write enum text.</param>
            <param name="namingStrategyParameters">
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <paramref name="namingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Type,System.Object[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="namingStrategyType">The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> used to write enum text.</param>
            <param name="namingStrategyParameters">
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <paramref name="namingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </param>
            <param name="allowIntegerValues"><c>true</c> if integers are allowed when serializing and deserializing; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.UnixDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from Unix epoch time
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.UnixDateTimeConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.UnixDateTimeConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. <c>"1.2.3.4"</c>).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.VersionConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.VersionConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produced multiple root elements.
            </summary>
            <value>The name of the deserialized root element.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the array attribute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.EncodeSpecialCharacters">
            <summary>
            Gets or sets a value indicating whether to encode special characters when converting JSON to XML.
            If <c>true</c>, special characters like ':', '@', '?', '#' and '$' in JSON property names aren't used to specify
            XML namespaces, attributes or processing directives. Instead special characters are encoded and written
            as part of the XML element name.
            </summary>
            <value><c>true</c> if special characters are encoded; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the <paramref name="attributeName"/> is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns><c>true</c> if attribute name is for a namespace attribute, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. <c>"2012-03-21T05:40Z"</c>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. <c>"\/Date(1198908717056)\/"</c>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable">
            <summary>
            The default JSON name table implementation.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets a string containing the same characters as the specified range of characters in the given array.
            </summary>
            <param name="key">The character array containing the name to find.</param>
            <param name="start">The zero-based index into the array specifying the first character of the name.</param>
            <param name="length">The number of characters in the name.</param>
            <returns>A string containing the same characters as the specified range of characters in the given array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultJsonNameTable.Add(System.String)">
            <summary>
            Adds the specified string into name table.
            </summary>
            <param name="key">The string to add.</param>
            <remarks>This method is not thread-safe.</remarks>
            <returns>The resolved string.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that it is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and set members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/> with <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. <c>"NaN"</c>, <c>"Infinity"</c>, <c>"-Infinity"</c>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. <c>NaN</c>, <c>Infinity</c>, <c>-Infinity</c>.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double"/> property, <c>null</c> for a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> property.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Double"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Decimal"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.Indentation"/> and <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.IArrayPool`1">
            <summary>
            Provides an interface for using pooled arrays.
            </summary>
            <typeparam name="T">The array type content.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>
            Rent an array from the pool. This array must be returned when it is no longer needed.
            </summary>
            <param name="minimumLength">The minimum required length of the array. The returned array may be longer.</param>
            <returns>The rented array from the pool. This array must be returned when it is no longer needed.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>
            Return an array to the pool.
            </summary>
            <param name="array">The array that is being returned.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.LineNumber"/> and <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.LinePosition"/> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, when <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.HasLineInfo"/> returns <c>false</c>).</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, when <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.IJsonLineInfo.HasLineInfo"/> returns <c>false</c>).</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items.
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets or sets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemConverterType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between .NET types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            Default settings are automatically used by serialization methods on <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert"/>,
            and <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject``1"/> and <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/> on <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            To serialize without using any default settings create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> with
            <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Create"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value <c>true</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value <c>false</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's <c>null</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's <c>undefined</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's <c>NaN</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling,Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation using the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <param name="stringEscapeHandling">The string escape handling.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Auto"/> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Auto"/> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the <see cref="T:System.Xml.XmlNode"/> to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.XmlNode"/> to a JSON string using formatting.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.XmlNode"/> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode"/> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode"/> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode"/> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName"/>
            and writes a Json.NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode"/> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName"/>,
            writes a Json.NET array attribute for collections, and encodes special characters.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A value to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <param name="encodeSpecialCharacters">
            A value to indicate whether to encode special characters when converting JSON to XML.
            If <c>true</c>, special characters like ':', '@', '?', '#' and '$' in JSON property names aren't used to specify
            XML namespaces, attributes or processing directives. Instead special characters are encoded and written
            as part of the XML element name.
            </param>
            <returns>The deserialized <see cref="T:System.Xml.XmlNode"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1">
            <summary>
            Converts an object to and from JSON.
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.WriteJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,`0,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.ReadJson(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type,`0,System.Boolean,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read. If there is no existing value then <c>null</c> will be used.</param>
            <param name="hasExistingValue">The existing value has a value.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to use the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.ConverterType"/>.
            If <c>null</c>, the default constructor is used.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.</param>
            <param name="converterParameters">Parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>. Can be <c>null</c>.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonExtensionDataAttribute"/> class.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonNameTable">
            <summary>
            Base class for a table of atomized string objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets a string containing the same characters as the specified range of characters in the given array.
            </summary>
            <param name="key">The character array containing the name to find.</param>
            <param name="start">The zero-based index into the array specifying the first character of the name.</param>
            <param name="length">The number of characters in the name.</param>
            <returns>A string containing the same characters as the specified range of characters in the given array.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> type used when serializing the property's collection items.
            </summary>
            <value>The collection's items <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> type.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SkipAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously skips the children of the current token.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Byte"/>[].
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Byte"/>[]. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsInt32Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.String"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.String"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> read method has not been called.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Close"/> method has been called.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader is in a constructor.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the source should be closed when this reader is closed.
            </summary>
            <value>
            <c>true</c> to close the source when this reader is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            <c>true</c> to support reading multiple pieces of JSON content; otherwise <c>false</c>.
            The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled when reading JSON.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>
            Gets or sets how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the source.
            </summary>
            <returns><c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SetToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SetToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SetToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object,System.Boolean)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
            <param name="updateIndex">A flag indicating whether the position index inside an array should be updated.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the source is also closed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonRequiredAttribute">
            <summary>
            Instructs the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to always serialize the member, and to require that the member has a value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.SerializationBinder"/>
            when deserializing with a value other than <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None"/>.
            </remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/>.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Create(Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.CreateDefault(Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to read values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Populate(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to read values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Deserialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Deserialize``1(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Deserialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="jsonWriter">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Auto"/> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="jsonWriter">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) are handled.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> collection that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.SerializationBinder"/>
            when deserializing with a value other than <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None"/>.
            </remarks>
            <value>The type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            Gets or sets a function that creates the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>A function that creates the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/>.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Byte"/>[].
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Byte"/>[]. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsInt32Async(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsStringAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.String"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns the <see cref="T:System.String"/>. This result will be <c>null</c> at the end of an array.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the JSON data to read.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.PropertyNameTable">
            <summary>
            Gets or sets the reader's property name table.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>
            Gets or sets the reader's character buffer pool.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextReader"/> is also closed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.LineNumber"/> and <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.LinePosition"/> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.HasLineInfo"/> returns <c>false</c>).
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextReader.HasLineInfo"/> returns <c>false</c>).
            </value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the JSON value delimiter.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the destination is also closed.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of the current JSON object or array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteIndentAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes indent characters.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an indent space.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteNullAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a null value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an undefined value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Object"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of an array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a constructor.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>
            Gets or sets the writer's character array pool.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.IndentChar"/>s to write for each level in the hierarchy when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Formatting"/> is set to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.Indented"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Formatting"/> is set to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Formatting.Indented"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter"/> class using the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> to write to.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.TextWriter"/> and also flushes the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextWriter"/> is also closed.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteEnd(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> if a read method has not been called.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader">
            <summary>
            <para>
            Represents a reader that provides <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> validation.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> used to construct this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> is also closed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>
            A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the destination is also closed.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.FlushAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteIndentAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes indent characters.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the JSON value delimiter.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an indent space.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of the current JSON object or array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of an array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a constructor.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the end of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteNullAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a null value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON array.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the beginning of a JSON object.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteTokenAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the current <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteTokenAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the current <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteTokenAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteTokenAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String"/> property name for <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.PropertyName"/>.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartObject"/>.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Object"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value to write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes an undefined value.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.SetWriteStateAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
            <summary>
            Asynchronously ets the state of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> being written.</param>
            <param name="value">The value being written.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
            <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the destination should be closed when this writer is closed.
            </summary>
            <value>
            <c>true</c> to close the destination when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose">
            <summary>
            Gets or sets a value indicating whether the JSON should be auto-completed when this writer is closed.
            </summary>
            <value>
            <c>true</c> to auto-complete the JSON when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Gets or sets a value indicating how JSON text output should be formatted.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled when writing JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the destination is also closed.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String"/> property name for <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.PropertyName"/>.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken.StartObject"/>.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteToken(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> token.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteEnd(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.SetWriteState(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="token">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken"/> being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while writing JSON text.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message, JSON path and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.CommentHandling">
            <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>
            Ignore comments.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>
            Load comments as a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> with type <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Comment"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling">
            <summary>
            Specifies how duplicate property names are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Replace">
            <summary>
            Replace the existing value when there is a duplicate property. The value of the last property in the JSON object will be used.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Ignore">
            <summary>
            Ignore the new value when there is a duplicate property. The value of the first property in the JSON object will be used.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Error">
            <summary>
            Throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException"/> when a duplicate property is encountered.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/> property contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/> property contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Parse(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.IndexOf(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Add(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Contains(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.CopyTo(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> to an array, starting at a particular array index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> is read-only.
            </summary>
            <returns><c>true</c> if the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/> is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray.Remove(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> was successfully removed from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>; otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item"/> is not found in the original <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JArray"/>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the descendant tokens of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing this token, and all the descendant tokens of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the child nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>
            Merge the specified content into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be merged.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings"/>.
            </summary>
            <param name="content">The content to be merged.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings"/> used to merge the content.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.IJEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.Equals(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> of this object's properties.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> with the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> with the specified name or <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Property(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> with the specified name.
            The exact name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="name">The property name.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> matched with the specified name or <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> of this object's property values.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> of this object's property values.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
                <paramref name="reader"/> is not valid JSON.
            </exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
                <paramref name="reader"/> is not valid JSON.
            </exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
                <paramref name="json"/> is not valid JSON.
            </exception>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Parse(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <exception cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReaderException">
                <paramref name="json"/> is not valid JSON.
            </exception>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> with the values of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject"/> with the values of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Add(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.ContainsKey(System.String)">
            <summary>
            Determines whether the JSON object has the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the JSON object has the specified property name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.PropertyChanging"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JProperty"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            <c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component to test for reset capability.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            <c>true</c> if the property should be persisted; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component with the property to be examined for persistence.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to.
            When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or
            <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/>
            methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            <c>true</c> if the property is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw.CreateAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates an instance of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns an instance of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw.Create(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>
            Specifies the settings used when loading JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.CommentHandling.Ignore" />.
            </summary>
            <value>The JSON comment handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.LineInfoHandling.Load" />.
            </summary>
            <value>The JSON line info handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings.DuplicatePropertyNameHandling">
            <summary>
            Gets or sets how duplicate property names in JSON objects are handled when loading JSON.
            The default value is <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.DuplicatePropertyNameHandling.Replace" />.
            </summary>
            <value>The JSON duplicate property name handling.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            Gets or sets how null value properties are merged.
            </summary>
            <value>How null value properties are merged.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonMergeSettings.PropertyNameComparison">
            <summary>
            Gets or sets the comparison used to match property names while merging.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <value>The comparison used to match property names while merging.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ReadFromAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous creation. The
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains 
            the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ReadFromAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous creation. The
            <see cref="P:System.Threading.Tasks.Task`1.Result"/> property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains 
            the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.LoadAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result"/>
            property returns a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.DeepEquals(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns><c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Replace(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToString(Datadog.Trace.Vendors.Newtonsoft.Json.Formatting,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>s which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Explicit(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTimeOffset"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/>[] to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> to <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> for this token.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from an object using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject``1(Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ReadFrom(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.ReadFrom(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Parse(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Load(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>
            Gets the first annotation object of the specified type from this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Type"/> of the annotation to retrieve.</param>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the annotations for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Type"/> of the annotations to retrieve.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Object"/> that contains the annotations that match the specified type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken.Type"/> of annotations to remove.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>
            <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> at the reader's current position.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> at the writer's current position.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being written.
            </summary>
            <value>The token being written.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
            <remarks>
            Setting <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.CloseOutput"/> to <c>true</c> has no additional effect, since the underlying <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JContainer"/> is a type that cannot be closed.
            </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Datadog.Trace.Vendors.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will be raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.WriteToAsync(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> asynchronously.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class from another <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> null value.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> null value.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> undefined value.
            </summary>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue"/> undefined value.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/>s which will be used when writing the token.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.Equals(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue.CompareTo(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not of the same type as this instance.
            </exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>
            Ignore line information.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>
            Load line information.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>Concatenate arrays.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>Union arrays, skipping items that already exist.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>Replace all array items.</summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>Merge array items together, matched by index.</summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>
            Specifies how null value properties are merged.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>
            The content's null value properties will be ignored during merging.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>
            The content's null value properties will be merged.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members marked with <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver"/> to <c>false</c>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />       
            </example>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Required.DisallowNull">
            <summary>
            The property is not required but it cannot be a null value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions">
            <summary>
            <para>
            Contains the JSON schema extension methods.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions.IsValid(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            Determines whether the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> is valid.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions.IsValid(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            <para>
            Determines whether the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> is valid.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions.Validate(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            Validates the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.Extensions.Validate(Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            <para>
            Validates the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            <para>
            An in-memory representation of a JSON Schema.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read-only.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisible by.
            </summary>
            <value>A number that the value should be divisible by.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Minimum"/>).
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Minimum"/>).</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Maximum"/>).
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Maximum"/>).</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> instance at their array position from <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Items"/>.
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallowed types.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Read(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Read(Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains JSON Schema.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON Schema.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON Schema.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Load a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains JSON Schema using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON Schema.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON Schema.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> using the specified <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            <para>
            Returns detailed information about the schema exception.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is <c>null</c>.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult"/> is zero (0).</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            <para>
            Generates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            <para>
            Resolves <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> from an id.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            <para>
            The value types allowed by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchema"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            <para>
            Specifies undefined schema Id handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaGenerator"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            <para>
            Returns detailed information related to the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventHandler"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.JsonSchemaException"/> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            <para>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Schema.ValidationEventArgs"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="https://www.newtonsoft.com/jsonschema">https://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>
            A camel case naming strategy.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
            <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to resolve a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute"/> attribute when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.SerializableAttribute"/> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreIsSpecifiedMembers">
            <summary>
            Gets or sets a value indicating whether to ignore IsSpecified members when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the IsSpecified members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreShouldSerializeMembers">
            <summary>
            Gets or sets a value indicating whether to ignore ShouldSerialize members when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the ShouldSerialize members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
            <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" />.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Resolved name of the property.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(System.String)">
            <summary>
            Resolves the name of the extension data. By default no changes are made to extension data names.
            </summary>
            <param name="extensionDataName">Name of the extension data.</param>
            <returns>Resolved name of the extension data.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            Resolves the key of the dictionary. By default <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)"/> is used to resolve dictionary keys.
            </summary>
            <param name="dictionaryKey">Key of the dictionary.</param>
            <returns>Resolved key of the dictionary.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>
            The default naming strategy. Property names and dictionary keys are unchanged.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
            <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener"/> instances.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info"/> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info"/>,
            <see cref="F:System.Diagnostics.TraceLevel.Warning"/> and <see cref="F:System.Diagnostics.TraceLevel.Error"/> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>
            Provides methods to get attributes.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> to resolve a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that was resolved from the reference.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder">
            <summary>
            Allows users to control class loading and mandate what class to load.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ISerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info"/> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info"/>,
            <see cref="F:System.Diagnostics.TraceLevel.Warning"/> and <see cref="F:System.Diagnostics.TraceLevel.Error"/> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non-public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            Gets or sets the dictionary key resolver.
            </summary>
            <value>The dictionary key resolver.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonDynamicContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.ISerializable"/> object constructor.
            </summary>
            <value>The <see cref="T:System.Runtime.Serialization.ISerializable"/> object constructor.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonISerializableContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> instances that define the parameters used with <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            This function is called with a collection of arguments which are defined by the <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters"/> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>
            Gets or sets the extension data value type.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataNameResolver">
            <summary>
            Gets or sets the extension data name resolver.
            </summary>
            <value>The extension data name resolver.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider"/> for this property.
            </summary>
            <value>The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.IAttributeProvider"/> for this property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes precedence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be deserialized.
            </summary>
            <value>A predicate used to determine whether the property should be deserialized.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of <paramref name="propertyName"/> and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            Lookup and create an instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> type described by the argument.
            </summary>
            <param name="converterType">The <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConverter"/> type to create.</param>
            <param name="args">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If <c>null</c>, the default constructor is used.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info"/> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose"/> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info"/>,
            <see cref="F:System.Diagnostics.TraceLevel.Warning"/> and <see cref="F:System.Diagnostics.TraceLevel.Error"/> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String"/> of the most recent trace messages.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.ProcessExtensionDataNames">
            <summary>
            A flag indicating whether extension data names should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>, should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            Gets the serialized name for a given property name.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specified.</param>
            <returns>The serialized property name.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.GetExtensionDataName(System.String)">
            <summary>
            Gets the serialized name for a given extension data name.
            </summary>
            <param name="name">The initial extension data name.</param>
            <returns>The serialized extension data name.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
            <param name="key">The initial dictionary key.</param>
            <returns>The serialized dictionary key.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary>
            Provides methods to get attributes from a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider"/> class.
            </summary>
            <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>
            A snake case naming strategy.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
            <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling">
            <summary>
            Indicates the method that will be used during deserialization for locating and loading assemblies.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple">
            <summary>
            In simple mode, the assembly used during deserialization need not match exactly the assembly used during serialization. Specifically, the version numbers need not match as the <c>LoadWithPartialName</c> method of the <see cref="T:System.Reflection.Assembly"/> class is used to load the assembly.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Full">
            <summary>
            In full mode, the assembly used during deserialization must match exactly the assembly used during serialization. The <c>Load</c> method of the <see cref="T:System.Reflection.Assembly"/> class is used to load the assembly.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <remarks>
            <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.SerializationBinder"/>
            when deserializing with a value other than <see cref="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None"/>.
            </remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            Note that this doesn't include the root serialized object by default. To include the root object's type name in JSON
            you must specify a root type object with <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializerSettings)"/>
            or <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonSerializer.Serialize(Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter,System.Object,System.Type)"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is <c>null</c> or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is <c>null</c> or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ImmutableCollectionsUtils">
            <summary>
            Helper class for serializing immutable collections.
            Note that this is used by all builds, even those that don't support immutable collections, in case the DLL is GACed
            https://github.com/JamesNK/Newtonsoft.Json/issues/652
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike <see cref="T:System.Text.StringBuilder"/> this class lets you reuse its internal buffer.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return <c>false</c>.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> method calls result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter.Close"/> method has been called.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Array">
            <summary>
            An array is being written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Newtonsoft.Json.WriteState.Start">
            <summary>
            A <see cref="T:Datadog.Trace.Vendors.Newtonsoft.Json.JsonWriter"/> write method has not been called.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions">
            <summary>Extends <see cref="T:Datadog.Trace.Vendors.Serilog.LoggerConfiguration"/> with methods to add file sinks.</summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan})"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <param name="rollingInterval">The interval at which logging will roll over to a new file.</param>
            <param name="rollOnFileSizeLimit">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames
            will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>
            <param name="retainedFileCountLimit">The maximum number of log files that will be retained,
            including the current log file. For unlimited retention, pass null. The default is 31.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <param name="rollingInterval">The interval at which logging will roll over to a new file.</param>
            <param name="rollOnFileSizeLimit">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames
            will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>
            <param name="retainedFileCountLimit">The maximum number of log files that will be retained,
            including the current log file. For unlimited retention, pass null. The default is 31.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <param name="rollingInterval">The interval at which logging will roll over to a new file.</param>
            <param name="rollOnFileSizeLimit">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames
            will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>
            <param name="retainedFileCountLimit">The maximum number of log files that will be retained,
            including the current log file. For unlimited retention, pass null. The default is 31.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="hooks">Optionally enables hooking into log file lifecycle events.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,System.Nullable{System.Int64},Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Boolean,System.Boolean,System.Nullable{System.TimeSpan},Datadog.Trace.Vendors.Serilog.RollingInterval,System.Boolean,System.Nullable{System.Int32},System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <param name="shared">Allow the log file to be shared by multiple processes. The default is false.</param>
            <param name="flushToDiskInterval">If provided, a full disk flush will be performed periodically at the specified interval.</param>
            <param name="rollingInterval">The interval at which logging will roll over to a new file.</param>
            <param name="rollOnFileSizeLimit">If <code>true</code>, a new file will be created when the file size limit is reached. Filenames
            will have a number appended in the format <code>_NNN</code>, with the first filename given no number.</param>
            <param name="retainedFileCountLimit">The maximum number of log files that will be retained,
            including the current log file. For unlimited retention, pass null. The default is 31.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="hooks">Optionally enables hooking into log file lifecycle events.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)">
            <summary>
            Write audit log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <param name="outputTemplate">A message template describing the format used to write to the sink.
            the default is "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}".</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="hooks">Optionally enables hooking into log file lifecycle events.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)">
            <summary>
            Write audit log events to the specified file.
            </summary>
            <param name="sinkConfiguration">Logger sink configuration.</param>
            <param name="formatter">A formatter, such as <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>, to convert the log events into
            text for the file. If control of regular text formatting is required, use the other
            overload of <see cref="M:Datadog.Trace.Vendors.Serilog.FileLoggerConfigurationExtensions.File(Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration,System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.IFormatProvider,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Text.Encoding,Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks)"/>
            and specify the outputTemplate parameter instead.
            </param>
            <param name="path">Path to the file.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="hooks">Optionally enables hooking into log file lifecycle events.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.RollingInterval">
            <summary>
            Specifies the frequency at which the log file should roll.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Infinite">
            <summary>
            The log file will never roll; no time period information will be appended to the log file name.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Year">
            <summary>
            Roll every year. Filenames will have a four-digit year appended in the pattern <code>yyyy</code>.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Month">
            <summary>
            Roll every calendar month. Filenames will have <code>yyyyMM</code> appended.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Day">
            <summary>
            Roll every day. Filenames will have <code>yyyyMMdd</code> appended.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Hour">
            <summary>
            Roll every hour. Filenames will have <code>yyyyMMddHH</code> appended.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.RollingInterval.Minute">
            <summary>
            Roll every minute. Filenames will have <code>yyyyMMddHHmm</code> appended.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks">
            <summary>
            Enables hooking into log file lifecycle events.
            Hooks run synchronously and therefore may affect responsiveness of the application if long operations are performed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks.OnFileOpened(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initialize or wrap the <paramref name="underlyingStream"/> opened on the log file. This can be used to write
            file headers, or wrap the stream in another that adds buffering, compression, encryption, etc. The underlying
            file may or may not be empty when this method is called.
            </summary>
            <remarks>
            A value must be returned from overrides of this method. Serilog will flush and/or dispose the returned value, but will not
            dispose the stream initially passed in unless it is itself returned.
            </remarks>
            <param name="underlyingStream">The underlying <see cref="T:System.IO.Stream"/> opened on the log file.</param>
            <param name="encoding">The encoding to use when reading/writing to the stream.</param>
            <returns>The <see cref="T:System.IO.Stream"/> Serilog should use when writing events to the log file.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileLifecycleHooks.OnFileDeleting(System.String)">
            <summary>
            Called before an obsolete (rolling) log file is deleted.
            This can be used to copy old logs to an archive location or send to a backup server.
            </summary>
            <param name="path">The full path to the file being deleted.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink">
            <summary>
            Write log events to a disk file.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink.#ctor(System.String,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.Nullable{System.Int64},System.Text.Encoding,System.Boolean)">
            <summary>Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink"/>.</summary>
            <param name="path">Path to the file.</param>
            <param name="textFormatter">Formatter used to convert log events to text.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <param name="buffered">Indicates if flushing to the output file can be buffered or not. The default
            is false.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>This constructor preserves compatibility with early versions of the public API. New code should not depend on this type.</remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink.Emit(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Emit the provided log event to the sink.
            </summary>
            <param name="logEvent">The log event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink.FlushToDisk">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.IFileSink">
            <summary>
            Exists only for the convenience of <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.RollingFileSink"/>, which
            switches implementations based on sharing. Would refactor, but preserving
            backwards compatibility.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.IFlushableFileSink">
            <summary>
            Supported by (file-based) sinks that can be explicitly flushed.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.IFlushableFileSink.FlushToDisk">
            <summary>
            Flush buffered contents to disk.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.NullSink">
            <summary>
            An instance of this sink may be substituted when an instance of the
            <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink"/> is unable to be constructed.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink">
            <summary>
            A sink wrapper that periodically flushes the wrapped sink to disk.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink.#ctor(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,System.TimeSpan)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink"/> that wraps
            <paramref name="sink"/> and flushes it at the specified <paramref name="flushInterval"/>.
            </summary>
            <param name="sink">The sink to wrap.</param>
            <param name="flushInterval">The interval at which to flush the underlying sink.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink.Emit(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.PeriodicFlushToDiskSink.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink">
            <summary>
            Write log events to a disk file.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink.#ctor(System.String,Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter,System.Nullable{System.Int64},System.Text.Encoding)">
            <summary>Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Sinks.File.FileSink"/>.</summary>
            <param name="path">Path to the file.</param>
            <param name="textFormatter">Formatter used to convert log events to text.</param>
            <param name="fileSizeLimitBytes">The approximate maximum size, in bytes, to which a log file will be allowed to grow.
            For unrestricted growth, pass null. The default is 1 GB. To avoid writing partial events, the last event within the limit
            will be written in full even if it exceeds the limit.</param>
            <param name="encoding">Character encoding used to write the text file. The default is UTF-8 without BOM.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>The file will be written using the UTF-8 character set.</remarks>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink.Emit(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Emit the provided log event to the sink.
            </summary>
            <param name="logEvent">The log event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Sinks.File.SharedFileSink.FlushToDisk">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Capturing.PropertyBinder.ConstructProperties(Datadog.Trace.Vendors.Serilog.Events.MessageTemplate,System.Object[])">
            <summary>
            Create properties based on an ordered list of provided values.
            </summary>
            <param name="messageTemplate">The template that the parameters apply to.</param>
            <param name="messageTemplateParameters">Objects corresponding to the properties
            represented in the message template.</param>
            <returns>A list of properties; if the template is malformed then
            this will be empty.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.ILoggerSettings">
            <summary>
            Implemented on types that apply settings to a logger configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.ILoggerSettings.Configure(Datadog.Trace.Vendors.Serilog.LoggerConfiguration)">
            <summary>
            Apply the settings to the logger configuration.
            </summary>
            <param name="loggerConfiguration">The logger configuration to apply settings to.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration">
            <summary>
            Controls audit sink configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Sink(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Audit log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <param name="logEventSink">The sink.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Sink``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Audit log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <typeparam name="TSink">The sink.</typeparam>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Logger(System.Action{Datadog.Trace.Vendors.Serilog.LoggerConfiguration},Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Audit log events to a sub-logger, where further processing may occur. Events through
            the sub-logger will be constrained by filters and enriched by enrichers that are
            active in the parent. A sub-logger cannot be used to log at a more verbose level, but
            a less verbose level is possible.
            </summary>
            <param name="configureLogger">An action that configures the sub-logger.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Logger(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Audit log events to a sub-logger, where further processing may occur. Events through
            the sub-logger will be constrained by filters and enriched by enrichers that are
            active in the parent. A sub-logger cannot be used to log at a more verbose level, but
            a less verbose level is possible.
            </summary>
            <param name="logger">The sub-logger. This will <em>not</em> be shut down automatically when the
            parent logger is disposed.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration">
            <summary>
            Controls template parameter destructuring configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.AsScalar(System.Type)">
            <summary>
            Treat objects of the specified type as scalar values, i.e., don't break
            them down into properties event when destructuring complex types.
            </summary>
            <param name="scalarType">Type to treat as scalar.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="scalarType"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.AsScalar``1">
            <summary>
            Treat objects of the specified type as scalar values, i.e., don't break
            them down into properties event when destructuring complex types.
            </summary>
            <typeparam name="TScalar">Type to treat as scalar.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.With(Datadog.Trace.Vendors.Serilog.Core.IDestructuringPolicy[])">
            <summary>
            When destructuring objects, transform instances with the provided policies.
            </summary>
            <param name="destructuringPolicies">Policies to apply when destructuring.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="destructuringPolicies"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When any element of <paramref name="destructuringPolicies"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.With``1">
            <summary>
            When destructuring objects, transform instances with the provided policy.
            </summary>
            <typeparam name="TDestructuringPolicy">Policy to apply when destructuring.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ByTransforming``1(System.Func{``0,System.Object})">
            <summary>
            When destructuring objects, transform instances of the specified type with
            the provided function.
            </summary>
            <param name="transformation">Function mapping instances of <typeparamref name="TValue"/>
            to an alternative representation.</param>
            <typeparam name="TValue">Type of values to transform.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="transformation"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ByTransformingWhere``1(System.Func{System.Type,System.Boolean},System.Func{``0,System.Object})">
            <summary>
            When destructuring objects, transform instances of the specified type with
            the provided function, if the predicate returns true. Be careful to avoid any
            intensive work in the predicate, as it can slow down the pipeline significantly.
            </summary>
            <param name="predicate">A predicate used to determine if the transform applies to
            a specific type of value</param>
            <param name="transformation">Function mapping instances of <typeparamref name="TValue"/>
            to an alternative representation.</param>
            <typeparam name="TValue">Type of values to transform.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="predicate"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="transformation"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ToMaximumDepth(System.Int32)">
            <summary>
            When destructuring objects, depth will be limited to 10 property traversals deep to
            guard against ballooning space when recursive/cyclic structures are accidentally passed. To
            change this limit pass a new maximum depth.
            </summary>
            <param name="maximumDestructuringDepth">The maximum depth to use.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="maximumDestructuringDepth"/> is negative</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ToMaximumStringLength(System.Int32)">
            <summary>
            When destructuring objects, string values can be restricted to specified length
            thus avoiding bloating payload. Limit is applied to each value separately,
            sum of length of strings can exceed limit.
            </summary>
            <param name="maximumStringLength">The maximum string length.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="maximumStringLength"/> is less than 2</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerDestructuringConfiguration.ToMaximumCollectionCount(System.Int32)">
            <summary>
            When destructuring objects, collections be restricted to specified count
            thus avoiding bloating payload. Limit is applied to each collection separately,
            sum of length of collection can exceed limit.
            Applies limit to all <see cref="T:System.Collections.IEnumerable"/> including dictionaries.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="maximumCollectionCount"/> is less than 1</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration">
            <summary>
            Controls enrichment configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.With(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])">
            <summary>
            Specifies one or more enrichers that may add properties dynamically to
            log events.
            </summary>
            <param name="enrichers">Enrichers to apply to all events passing through
            the logger.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="enrichers"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When any element of <paramref name="enrichers"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.With``1">
            <summary>
            Specifies an enricher that may add properties dynamically to
            log events.
            </summary>
            <typeparam name="TEnricher">Enricher type to apply to all events passing through
            the logger.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.WithProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Include the specified property value in all events logged to the logger.
            </summary>
            <param name="name">The name of the property to add.</param>
            <param name="value">The property value to add.</param>
            <param name="destructureObjects">If true, objects of unknown type will be logged as structures; otherwise they will be converted using <see cref="M:System.Object.ToString"/>.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.FromLogContext">
            <summary>
            Enrich log events with properties from <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/>.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.When(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration})">
            <summary>
            Apply an enricher only when <paramref name="condition"/> evaluates to <c>true</c>.
            </summary>
            <param name="condition">A predicate that evaluates to <c>true</c> when the supplied <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>
            should be enriched.</param>
            <param name="configureEnricher">An action that configures the wrapped enricher.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="condition"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureEnricher"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.AtLevel(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration})">
            <summary>
            Apply an enricher only to events with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel"/> greater than or equal to <paramref name="enrichFromLevel"/>.
            </summary>
            <param name="enrichFromLevel">The level from which the enricher will be applied.</param>
            <param name="configureEnricher">An action that configures the wrapped enricher.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>This method permits additional information to be attached to e.g. warnings and errors, that might be too expensive
            to collect or store at lower levels.</remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureEnricher"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.AtLevel(Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch,System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration})">
            <summary>
            Apply an enricher only to events with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel"/> greater than or equal to the level specified by <paramref name="levelSwitch"/>.
            </summary>
            <param name="levelSwitch">A <see cref="T:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch"/> that specifies the level from which the enricher will be applied.</param>
            <param name="configureEnricher">An action that configures the wrapped enricher.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>This method permits additional information to be attached to e.g. warnings and errors, that might be too expensive
            to collect or store at lower levels.</remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureEnricher"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.Wrap(Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration,System.Func{Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher,Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration})">
            <summary>
            Helper method for wrapping sinks.
            </summary>
            <param name="loggerEnrichmentConfiguration">The parent enrichment configuration.</param>
            <param name="wrapEnricher">A function that allows for wrapping <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher"/>s
            added in <paramref name="configureWrappedEnricher"/>.</param>
            <param name="configureWrappedEnricher">An action that configures enrichers to be wrapped in <paramref name="wrapEnricher"/>.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="loggerEnrichmentConfiguration"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="wrapEnricher"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureWrappedEnricher"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration">
            <summary>
            Controls filter configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration.With(Datadog.Trace.Vendors.Serilog.Core.ILogEventFilter[])">
            <summary>
            Filter out log events from the stream based on the provided filter.
            </summary>
            <param name="filters">The filters to apply.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="filters"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When any element of <paramref name="filters"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration.With``1">
            <summary>
            Filter out log events from the stream based on the provided filter.
            </summary>
            <typeparam name="TFilter">The filters to apply.</typeparam>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration.ByExcluding(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean})">
            <summary>
            Filter out log events that match a predicate.
            </summary>
            <param name="exclusionPredicate">Function that returns true when an event
            should be excluded (silenced).</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerFilterConfiguration.ByIncludingOnly(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean})">
            <summary>
            Filter log events to include only those that match a predicate.
            </summary>
            <param name="inclusionPredicate">Function that returns true when an event
            should be included (emitted).</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration">
            <summary>
            Controls sink configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Is(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Sets the minimum level at which events will be passed to sinks.
            </summary>
            <param name="minimumLevel">The minimum level to set.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.ControlledBy(Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Sets the minimum level to be dynamically controlled by the provided switch.
            </summary>
            <param name="levelSwitch">The switch.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="levelSwitch"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Verbose">
            <summary>
            Anything and everything you might want to know about
            a running block of code.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Debug">
            <summary>
            Internal system events that aren't necessarily
            observable from the outside.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Information">
            <summary>
            The lifeblood of operational intelligence - things
            happen.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Warning">
            <summary>
            Service is degraded or endangered.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Error">
            <summary>
            Functionality is unavailable, invariants are broken
            or data is lost.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Fatal">
            <summary>
            If you have a pager, it goes off when one of these
            occurs.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Override(System.String,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Override the minimum level for events from a specific namespace or type name.
            This API is not supported for configuring sub-loggers (created through <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Logger(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)"/>). Use <see cref="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Filter"/> or <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Conditional(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration})"/> instead.
            You also might consider using https://github.com/serilog/serilog-filters-expressions.
            </summary>
            <param name="source">The (partial) namespace or type name to set the override for.</param>
            <param name="levelSwitch">The switch controlling loggers for matching sources.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When a trimmed <paramref name="source"/> is empty</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="levelSwitch"/> is <code>null</code></exception> 
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerMinimumLevelConfiguration.Override(System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Override the minimum level for events from a specific namespace or type name.
            This API is not supported for configuring sub-loggers (created through <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Logger(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)"/>). Use <see cref="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Filter"/> or <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Conditional(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration})"/> instead.
            You also might consider using https://github.com/serilog/serilog-filters-expressions.
            </summary>
            <param name="source">The (partial) namespace or type name to set the override for.</param>
            <param name="minimumLevel">The minimum level applied to loggers for matching sources.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSettingsConfiguration">
            <summary>
            Allows additional setting sources to drive the logger configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSettingsConfiguration.Settings(Datadog.Trace.Vendors.Serilog.Configuration.ILoggerSettings)">
            <summary>
            Apply external settings to the logger configuration.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="settings"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSettingsConfiguration.KeyValuePairs(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Apply settings specified in the Serilog key-value setting format to the logger configuration.
            </summary>
            <param name="settings">A list of key-value pairs describing logger settings.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>In case of duplicate keys, the last value for the key is kept and the previous ones are ignored.</remarks>
            <exception cref="T:System.ArgumentNullException">When <paramref name="settings"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration">
            <summary>
            Controls sink configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Sink(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Write log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <param name="logEventSink">The sink.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <remarks>Provided for binary compatibility for earlier versions,
            should be removed in 3.0. Not marked obsolete because warnings
            would be syntactically annoying to avoid.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Sink(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <param name="logEventSink">The sink.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Sink``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to the specified <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>.
            </summary>
            <typeparam name="TSink">The sink.</typeparam>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Logger(System.Action{Datadog.Trace.Vendors.Serilog.LoggerConfiguration},Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Write log events to a sub-logger, where further processing may occur. Events through
            the sub-logger will be constrained by filters and enriched by enrichers that are
            active in the parent. A sub-logger cannot be used to log at a more verbose level, but
            a less verbose level is possible.
            </summary>
            <param name="configureLogger">An action that configures the sub-logger.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime. Can be <code>null</code></param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureLogger"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Logger(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Write log events to a sub-logger, where further processing may occur. Events through
            the sub-logger will be constrained by filters and enriched by enrichers that are
            active in the parent. A sub-logger cannot be used to log at a more verbose level, but
            a less verbose level is possible.
            </summary>
            <param name="logger">The sub-logger. This will <em>not</em> be shut down automatically when the
            parent logger is disposed.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logger"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Conditional(System.Func{Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.Boolean},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration})">
            <summary>
            Write to a sink only when <paramref name="condition"/> evaluates to <c>true</c>.
            </summary>
            <param name="condition">A predicate that evaluates to <c>true</c> when the supplied <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>
            should be written to the configured sink.</param>
            <param name="configureSink">An action that configures the wrapped sink.</param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="condition"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureSink"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Wrap(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.Func{Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Core.ILogEventSink},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration})">
            <summary>
            Helper method for wrapping sinks.
            </summary>
            <param name="loggerSinkConfiguration">The parent sink configuration.</param>
            <param name="wrapSink">A function that allows for wrapping <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>s
            added in <paramref name="configureWrappedSink"/>.</param>
            <param name="configureWrappedSink">An action that configures sinks to be wrapped in <paramref name="wrapSink"/>.</param>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration.Wrap(Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration,System.Func{Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Core.ILogEventSink},System.Action{Datadog.Trace.Vendors.Serilog.Configuration.LoggerSinkConfiguration},Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)">
            <summary>
            Helper method for wrapping sinks.
            </summary>
            <param name="loggerSinkConfiguration">The parent sink configuration.</param>
            <param name="wrapSink">A function that allows for wrapping <see cref="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink"/>s
            added in <paramref name="configureWrappedSink"/>.</param>
            <param name="configureWrappedSink">An action that configures sinks to be wrapped in <paramref name="wrapSink"/>.</param>
            <param name="restrictedToMinimumLevel">The minimum level for
            events passed through the sink. Ignored when <paramref name="levelSwitch"/> is specified.</param>
            <param name="levelSwitch">A switch allowing the pass-through minimum level
            to be changed at runtime. Can be <code>null</code></param>
            <returns>Configuration object allowing method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="loggerSinkConfiguration"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="wrapSink"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="configureWrappedSink"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Context.LogContext">
            <summary>
            Holds ambient properties that can be attached to log events. To
            configure, use the <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerEnrichmentConfiguration.FromLogContext"/> method.
            </summary>
            <example>
            Configuration:
            <code lang="C#">
            var log = new LoggerConfiguration()
                .Enrich.FromLogContext()
                ...
            </code>
            Usage:
            <code lang="C#">
            using (LogContext.PushProperty("MessageId", message.Id))
            {
                Log.Information("The MessageId property will be attached to this event");
            }
            </code>
            </example>
            <remarks>The scope of the context is the current logical thread, using AsyncLocal
            (and so is preserved across async/await calls).</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.PushProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Push a property onto the context, returning an <see cref="T:System.IDisposable"/>
            that must later be used to remove the property, along with any others that
            may have been pushed on top of it and not yet popped. The property must
            be popped from the same thread/logical call context.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns>A handle to later remove the property from the context.</returns>
            <param name="destructureObjects">If true, and the value is a non-primitive, non-array type,
            then the value will be converted to a structure; otherwise, unknown types will
            be converted to scalars, which are generally stored as strings.</param>
            <returns>A token that must be disposed, in order, to pop properties back off the stack.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Push(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher)">
            <summary>
            Push an enricher onto the context, returning an <see cref="T:System.IDisposable"/>
            that must later be used to remove the property, along with any others that
            may have been pushed on top of it and not yet popped. The property must
            be popped from the same thread/logical call context.
            </summary>
            <param name="enricher">An enricher to push onto the log context</param>
            <returns>A token that must be disposed, in order, to pop properties back off the stack.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="enricher"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Push(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])">
            <summary>
            Push multiple enrichers onto the context, returning an <see cref="T:System.IDisposable"/>
            that must later be used to remove the property, along with any others that
            may have been pushed on top of it and not yet popped. The property must
            be popped from the same thread/logical call context.
            </summary>
            <seealso cref="T:Datadog.Trace.Vendors.Serilog.Core.Enrichers.PropertyEnricher"/>.
            <param name="enrichers">Enrichers to push onto the log context</param>
            <returns>A token that must be disposed, in order, to pop properties back off the stack.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="enrichers"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.PushProperties(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])">
            <summary>
            Push enrichers onto the log context. This method is obsolete, please
            use <see cref="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Push(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])"/> instead.
            </summary>
            <param name="properties">Enrichers to push onto the log context</param>
            <returns>A token that must be disposed, in order, to pop properties back off the stack.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Clone">
            <summary>
            Obtain an enricher that represents the current contents of the <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/>. This
            can be pushed back onto the context in a different location/thread when required.
            </summary>
            <returns>An enricher that represents the current contents of the <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Suspend">
            <summary>
            Remove all enrichers from the <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/>, returning an <see cref="T:System.IDisposable"/>
            that must later be used to restore enrichers that were on the stack before <see cref="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Suspend"/> was called.
            </summary>
            <returns>A token that must be disposed, in order, to restore properties back to the stack.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Context.LogContext.Reset">
            <summary>
            Remove all enrichers from <see cref="T:Datadog.Trace.Vendors.Serilog.Context.LogContext"/> for the current async scope.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.Constants">
            <summary>
            Constants used in the core logging pipeline and associated types.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Core.Constants.SourceContextPropertyName">
            <summary>
            The name of the property included in the emitted log events
            when <code>ForContext&lt;T&gt;()</code> and overloads are
            applied.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.Enrichers.PropertyEnricher">
            <summary>
            Adds a new property enricher to the log event.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Enrichers.PropertyEnricher.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Create a new property enricher.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <returns>A handle to later remove the property from the context.</returns>
            <param name="destructureObjects">If true, and the value is a non-primitive, non-array type,
            then the value will be converted to a structure; otherwise, unknown types will
            be converted to scalars, which are generally stored as strings.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When <paramref name="name"/> is empty or only contains whitespace</exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Enrichers.PropertyEnricher.Enrich(Datadog.Trace.Vendors.Serilog.Events.LogEvent,Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enrich the log event.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logEvent"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyFactory"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.IDestructuringPolicy">
            <summary>
            Determine how, when destructuring, a supplied value is represented
            as a complex log event property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.IDestructuringPolicy.TryDestructure(System.Object,Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyValueFactory,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue@)">
            <summary>
            If supported, destructure the provided value.
            </summary>
            <param name="value">The value to destructure.</param>
            <param name="propertyValueFactory">Recursively apply policies to destructure additional values.</param>
            <param name="result">The destructured value, or null.</param>
            <returns>True if the value could be destructured under this policy.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher">
            <summary>
            Applied during logging to add additional information to log events.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher.Enrich(Datadog.Trace.Vendors.Serilog.Events.LogEvent,Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyFactory)">
            <summary>
            Enrich the log event.
            </summary>
            <param name="logEvent">The log event to enrich.</param>
            <param name="propertyFactory">Factory for creating new properties to add to the event.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventFilter">
            <summary>
            Provides filtering of the log event stream.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventFilter.IsEnabled(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Returns true if the provided event is enabled. Otherwise, false.
            </summary>
            <param name="logEvent">The event to test.</param>
            <returns>True if the event is enabled by this filter. If false
            is returned, the event will not be emitted.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyFactory">
            <summary>
            Creates log event properties from regular .NET objects, applying policies as
            required.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyFactory.CreateProperty(System.String,System.Object,System.Boolean)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> with the specified name and value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="destructureObjects">If true, and the value is a non-primitive, non-array type,
            then the value will be converted to a structure; otherwise, unknown types will
            be converted to scalars, which are generally stored as strings.</param>
            <returns></returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyValueFactory">
            <summary>
            Supports the policy-driven construction of <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue"/>s given
            regular .NET objects.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventPropertyValueFactory.CreatePropertyValue(System.Object,System.Boolean)">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue"/> given a .NET object and destructuring
            strategy.
            </summary>
            <param name="value">The value of the property.</param>
            <param name="destructureObjects">If true, and the value is a non-primitive, non-array type,
            then the value will be converted to a structure; otherwise, unknown types will
            be converted to scalars, which are generally stored as strings.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink">
            <summary>
            A destination for log events.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.ILogEventSink.Emit(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Emit the provided log event to the sink.
            </summary>
            <param name="logEvent">The log event to write.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.IScalarConversionPolicy">
            <summary>
            Determine how a simple value is carried through the logging
            pipeline as an immutable <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.IScalarConversionPolicy.TryConvertToScalar(System.Object,Datadog.Trace.Vendors.Serilog.Events.ScalarValue@)">
            <summary>
            If supported, convert the provided value into an immutable scalar.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="result">The converted value, or null.</param>
            <returns>True if the value could be converted under this policy.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.Logger">
            <summary>
            The core Serilog logging pipeline. A <see cref="T:Datadog.Trace.Vendors.Serilog.Core.Logger"/> must
            be disposed to flush any events buffered within it. Most application
            code should depend on <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/>, not this class.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher)">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enricher">Enricher that applies in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher})">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enrichers">Enrichers that apply in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext(System.String,System.Object,System.Boolean)">
            <summary>
            Create a logger that enriches log events with the specified property.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext(System.Type)">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <param name="source">Type generating log messages in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.ForContext``1">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <typeparam name="TSource">Type generating log messages in the context.</typeparam>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.IsEnabled(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Determine if events at the specified level, and higher, will be passed through
            to the log sinks.
            </summary>
            <param name="level">Level to check.</param>
            <returns>True if the level is enabled; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Write an event to the log.
            </summary>
            <param name="logEvent">The event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.BindMessageTemplate(System.String,System.Object[],Datadog.Trace.Vendors.Serilog.Events.MessageTemplate@,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty}@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a set of properties to a
            message template. Returns false if the template or values are invalid (<c>ILogger</c>
            methods never throw exceptions).
            </summary>
            <param name="messageTemplate">Message template describing an event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <param name="parsedTemplate">The internal representation of the template, which may be used to
            render the <paramref name="boundProperties"/> as text.</param>
            <param name="boundProperties">Captured properties from the template and <paramref name="propertyValues"/>.</param>
            <example>
            MessageTemplate template;
            IEnumerable&lt;LogEventProperty&gt; properties>;
            if (Log.BindMessageTemplate("Hello, {Name}!", new[] { "World" }, out template, out properties)
            {
                var propsByName = properties.ToDictionary(p => p.Name, p => p.Value);
                Console.WriteLine(template.Render(propsByName, null));
                // -> "Hello, World!"
            }
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.BindProperty(System.String,System.Object,System.Boolean,Datadog.Trace.Vendors.Serilog.Events.LogEventProperty@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a property value to its captured
            representation.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <param name="property">The resulting property.</param>
            <returns>True if the property could be bound, otherwise false (<summary>ILogger</summary>
            methods never throw exceptions).</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.Logger.Dispose">
            <summary>
            Close and flush the logging pipeline.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Core.Logger.None">
            <summary>
            An <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/> instance that efficiently ignores all method calls.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch">
            <summary>
            Dynamically controls logging level.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch.#ctor(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch"/> at the initial
            minimum level.
            </summary>
            <param name="initialMinimumLevel">The initial level to which the switch is set.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch.MinimumLevel">
            <summary>
            The current minimum level, below which no events
            should be generated.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.MessageTemplateFormatMethodAttribute">
             <summary>
             Indicates that the marked method logs data using a message template and (optional) arguments.
             The name of the parameter which contains the message template should be given in the constructor.
             </summary>
             <example>
             <code>
             [LoggerMethod("messageTemplate")]
             public void Information(string messageTemplate, params object[] propertyValues)
             {
                 // Do something
             }
            
             public void Foo()
             {
                 Information("Hello, {Name}!") // Warning: Non-existing argument in message template.
             }
             </code>
             </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Core.MessageTemplateFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.Serilog.Core.MessageTemplateFormatMethodAttribute"/> class.
            </summary>
            <param name="messageTemplateParameterName">Name of the message template parameter.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Core.MessageTemplateFormatMethodAttribute.MessageTemplateParameterName">
            <summary>
            Gets the name of the message template parameter.
            </summary>
            <value>The name of the message template parameter.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Core.Sinks.SecondaryLoggerSink">
            <summary>
            Forwards log events to another logging pipeline. Copies the events so
            that mutations performed on the copies do not affect the originals.
            </summary>
            <remarks>The properties dictionary is copied, however the values within
            the dictionary (of type <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> are expected to
            be immutable.</remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1">
            <summary>
            A base class for visitors that rewrite the value with modifications. For example, implementations
            might remove all structure properties with a certain name, apply size/length limits, or convert scalar properties of
            one type into scalar properties of another.
            </summary>
            <typeparam name="TState"></typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitScalarValue(`0,Datadog.Trace.Vendors.Serilog.Events.ScalarValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="scalar">The value to visit.</param>
            <returns>The result of visiting <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="scalar"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitSequenceValue(`0,Datadog.Trace.Vendors.Serilog.Events.SequenceValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="sequence">The value to visit.</param>
            <returns>The result of visiting <paramref name="sequence"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="sequence"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitStructureValue(`0,Datadog.Trace.Vendors.Serilog.Events.StructureValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="structure">The value to visit.</param>
            <returns>The result of visiting <paramref name="structure"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="structure"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitDictionaryValue(`0,Datadog.Trace.Vendors.Serilog.Events.DictionaryValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="dictionary">The value to visit.</param>
            <returns>The result of visiting <paramref name="dictionary"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="dictionary"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueRewriter`1.VisitUnsupportedValue(`0,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Visit a value of an unsupported type. Returns the value unchanged.
            </summary>
            <param name="state">Operation state.</param>
            <param name="value">The value to visit.</param>
            <returns>The result of visiting <paramref name="value"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2">
            <summary>
            An abstract base class for visitors that walk data in the
            <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue"/> format. Subclasses, by
            overriding appropriate methods, may search for, transform,
            or print the value structures being visited.
            </summary>
            <remarks>
            Stateless, designed to accommodate allocation-free visiting of multiple
            values by the same visitor instance.
            </remarks>
            <typeparam name="TState">The type of a state object passed through
            the visiting process.</typeparam>
            <typeparam name="TResult">The type of the result generated by visiting
            a node.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.Visit(`0,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Visit the root node type. This method delegates to
            a concrete Visit*Value() method appropriate for the value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="value">The value to visit.</param>
            <returns>The result of visiting <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitScalarValue(`0,Datadog.Trace.Vendors.Serilog.Events.ScalarValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="scalar">The value to visit.</param>
            <returns>The result of visiting <paramref name="scalar"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitSequenceValue(`0,Datadog.Trace.Vendors.Serilog.Events.SequenceValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="sequence">The value to visit.</param>
            <returns>The result of visiting <paramref name="sequence"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitStructureValue(`0,Datadog.Trace.Vendors.Serilog.Events.StructureValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="structure">The value to visit.</param>
            <returns>The result of visiting <paramref name="structure"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitDictionaryValue(`0,Datadog.Trace.Vendors.Serilog.Events.DictionaryValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="dictionary">The value to visit.</param>
            <returns>The result of visiting <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Data.LogEventPropertyValueVisitor`2.VisitUnsupportedValue(`0,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Visit a value of an unsupported type. Always throws <see cref="T:System.NotSupportedException"/>, when is not overridden.
            </summary>
            <param name="state">Operation state.</param>
            <param name="value">The value to visit.</param>
            <returns>The result of visiting <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Debugging.LoggingFailedException">
            <summary>
            May be thrown by log event sinks when a failure occurs. Should not be used in cases
            where the exception would propagate out to callers.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.LoggingFailedException.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Debugging.LoggingFailedException"/> to communicate a logging failure.
            </summary>
            <param name="message">A message describing the logging failure.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog">
            <summary>
            A simple source of information generated by Serilog itself,
            for example when exceptions are thrown and caught internally.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.Out">
            <summary>
            The output mechanism for self-log messages.
            </summary>
            <example>
            SelfLog.Out = Console.Error;
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.Enable(System.IO.TextWriter)">
            <summary>
            Set the output mechanism for self-log messages.
            </summary>
            <param name="output">A synchronized <see cref="T:System.IO.TextWriter"/> to which
            self-log messages will be written.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.Enable(System.Action{System.String})">
            <summary>
            Set the output mechanism for self-log messages.
            </summary>
            <param name="output">An action to invoke with self-log messages.</param>
            // ReSharper disable once MemberCanBePrivate.Global
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.Disable">
            <summary>
            Clear the output mechanism and disable self-log events.
            </summary>
            // ReSharper disable once MemberCanBePrivate.Global
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Debugging.SelfLog.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write a message to the self-log.
            </summary>
            <param name="format">Standard .NET format string containing the message.</param>
            <param name="arg0">First argument, if supplied.</param>
            <param name="arg1">Second argument, if supplied.</param>
            <param name="arg2">Third argument, if supplied.</param>
            <remarks>
            The name is historical; because this is used from third-party sink packages, removing the "Line"
            suffix as would seem sensible isn't worth the breakage.
            </remarks>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue">
            <summary>
            A value represented as a mapping from keys to values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Datadog.Trace.Vendors.Serilog.Events.ScalarValue,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue}})">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue"/> with the provided <paramref name="elements"/>.
            </summary>
            <param name="elements">The key-value mappings represented in the dictionary.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="elements"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue.Elements">
            <summary>
            The dictionary mapping.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.EventProperty">
            <summary>
            A property associated with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>.
            </summary>
            <remarks>This type is currently internal, while we consider future directions for the logging pipeline, but should end up public
            in future.</remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.EventProperty.None">
            <summary>
            No property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.#ctor(System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> with the specified name and value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When <paramref name="name"/> is empty or only contains whitespace</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Deconstruct(System.String@,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue@)">
            <summary>
            Permit deconstruction of the property into a name/value pair.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.Equals(Datadog.Trace.Vendors.Serilog.Events.EventProperty)">
            <summary>Indicates whether this instance and a specified <see cref="T:Datadog.Trace.Vendors.Serilog.Events.EventProperty"/> are equal.</summary>
            <param name="other">The <see cref="T:Datadog.Trace.Vendors.Serilog.Events.EventProperty"/> to compare with the current instance. </param>
            <returns>
            <see langword="true" /> if <paramref name="other" /> and this instance represent the same value; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.EventProperty.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LevelAlias">
            <summary>
            Descriptive aliases for <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel"/>.
            </summary>
            <remarks>These do not appear as members of the enumeration
            as duplicated underlying values result in issues when presenting
            enum values with <see cref="M:System.Object.ToString"/>.</remarks>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LevelAlias.Minimum">
            <summary>
            The least significant level of event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LevelAlias.Maximum">
            <summary>
            The most significant level of event.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent">
            <summary>
            A log event.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.#ctor(System.DateTimeOffset,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,Datadog.Trace.Vendors.Serilog.Events.MessageTemplate,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty})">
            <summary>
            Construct a new <seealso cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>.
            </summary>
            <param name="timestamp">The time at which the event occurred.</param>
            <param name="level">The level of the event.</param>
            <param name="exception">An exception associated with the event, or null.</param>
            <param name="messageTemplate">The message template describing the event.</param>
            <param name="properties">Properties associated with the event, including those presented in <paramref name="messageTemplate"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="messageTemplate"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.#ctor(System.DateTimeOffset,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,Datadog.Trace.Vendors.Serilog.Events.MessageTemplate,Datadog.Trace.Vendors.Serilog.Events.EventProperty[])">
            <summary>
            Construct a new <seealso cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>.
            </summary>
            <param name="timestamp">The time at which the event occurred.</param>
            <param name="level">The level of the event.</param>
            <param name="exception">An exception associated with the event, or null.</param>
            <param name="messageTemplate">The message template describing the event.</param>
            <param name="properties">Properties associated with the event, including those presented in <paramref name="messageTemplate"/>.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="messageTemplate"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.Timestamp">
            <summary>
            The time at which the event occurred.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.Level">
            <summary>
            The level of the event.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.MessageTemplate">
            <summary>
            The message template describing the event.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.RenderMessage(System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Render the message template to the specified output, given the properties associated
            with the event.
            </summary>
            <param name="output">The output.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.RenderMessage(System.IFormatProvider)">
            <summary>
            Render the message template given the properties associated
            with the event, and return the result.
            </summary>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.Properties">
            <summary>
            Properties associated with the event, including those presented in <see cref="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.MessageTemplate"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEvent.Exception">
            <summary>
            An exception associated with the event, or null.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.AddOrUpdateProperty(Datadog.Trace.Vendors.Serilog.Events.LogEventProperty)">
            <summary>
            Add a property to the event if not already present, otherwise, update its value.
            </summary>
            <param name="property">The property to add or update.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.AddOrUpdateProperty(Datadog.Trace.Vendors.Serilog.Events.EventProperty@)">
            <summary>
            Add a property to the event if not already present, otherwise, update its value.
            </summary>
            <param name="property">The property to add or update.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>default</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.AddPropertyIfAbsent(Datadog.Trace.Vendors.Serilog.Events.LogEventProperty)">
            <summary>
            Add a property to the event if not already present.
            </summary>
            <param name="property">The property to add.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.AddPropertyIfAbsent(Datadog.Trace.Vendors.Serilog.Events.EventProperty@)">
            <summary>
            Add a property to the event if not already present.
            </summary>
            <param name="property">The property to add.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>default</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEvent.RemovePropertyIfPresent(System.String)">
            <summary>
            Remove a property from the event, if present. Otherwise no action
            is performed.
            </summary>
            <param name="propertyName">The name of the property to remove.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel">
            <summary>
            Specifies the meaning and relative importance of a log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose">
            <summary>
            Anything and everything you might want to know about
            a running block of code.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug">
            <summary>
            Internal system events that aren't necessarily
            observable from the outside.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information">
            <summary>
            The lifeblood of operational intelligence - things
            happen.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning">
            <summary>
            Service is degraded or endangered.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error">
            <summary>
            Functionality is unavailable, invariants are broken
            or data is lost.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal">
            <summary>
            If you have a pager, it goes off when one of these
            occurs.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty">
            <summary>
            A property associated with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.#ctor(System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> with the specified name and value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When <paramref name="name"/> is empty or only contains whitespace</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.#ctor(Datadog.Trace.Vendors.Serilog.Events.EventProperty)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/> from an existing <see cref="T:Datadog.Trace.Vendors.Serilog.Events.EventProperty"/> instance.
            </summary>
            <param name="property">The existing property.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <code>default</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.IsValidName(System.String)">
            <summary>
            Test <paramref name="name" /> to determine if it is a valid property name.
            </summary>
            <param name="name">The name to check.</param>
            <returns>True if the name is valid; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty.EnsureValidName(System.String)">
            <exception cref="T:System.ArgumentNullException">When <paramref name="name"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentException">When <paramref name="name"/> is empty or only contains whitespace</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue">
            <summary>
            The value associated with a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEventProperty"/>. Divided into scalar,
            sequence and structure values to direct serialization into various formats.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats the value of the current instance using the specified format.
            </summary>
            <returns>
            The value of the current instance in the specified format.
            </returns>
            <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use
            the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation. </param>
            <param name="formatProvider">The provider to use to format the value.-or- A null reference
            (Nothing in Visual Basic) to obtain the numeric format information from the current locale
            setting of the operating system. </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate">
            <summary>
            Represents a message template passed to a log method. The template
            can subsequently render the template in textual form given the list
            of properties.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Empty">
            <summary>
            Represents the empty message template.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.#ctor(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken})">
            <summary>
            Construct a message template using manually-defined text and property tokens.
            </summary>
            <param name="tokens">The text and property tokens defining the template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.#ctor(System.String,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken})">
            <summary>
            Construct a message template using manually-defined text and property tokens.
            </summary>
            <param name="text">The full text of the template; used by Serilog internally to avoid unneeded
            string concatenation.</param>
            <param name="tokens">The text and property tokens defining the template.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="text"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="tokens"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.GetElementsOfTypeToArray``1(Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken[])">
            <summary>
            Similar to <see cref="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)"/>, but faster.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Text">
            <summary>
            The raw text describing the template.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.ToString">
            <summary>
            Render the template as a string.
            </summary>
            <returns>The string representation of the template.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Tokens">
            <summary>
            The tokens parsed from the template.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IFormatProvider)">
            <summary>
            Convert the message template into a textual message, given the
            properties matching the tokens in the message template.
            </summary>
            <param name="properties">Properties matching template tokens.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <returns>The message created from the template and properties. If the
            properties are mismatched with the template, the template will be
            returned with incomplete substitution.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.MessageTemplate.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Convert the message template into a textual message, given the
            properties matching the tokens in the message template.
            </summary>
            <param name="properties">Properties matching template tokens.</param>
            <param name="output">The message created from the template and properties. If the
            properties are mismatched with the template, the template will be
            returned with incomplete substitution.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue">
            <summary>
            A property value corresponding to a simple, scalar type.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.#ctor(System.Object)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/> with the specified
            value.
            </summary>
            <param name="value">The value, which may be <code>null</code>.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.Value">
            <summary>
            The value, which may be <code>null</code>.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.Render(System.Object,System.IO.TextWriter,System.String,System.IFormatProvider)">
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.Equals(System.Object)">
            <summary>
            Determine if this instance is equal to <paramref name="obj"/>.
            </summary>
            <param name="obj">The instance to compare with.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.ScalarValue.GetHashCode">
            <summary>
            Get a hash code representing the value.
            </summary>
            <returns>The instance's hash code.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue">
            <summary>
            A value represented as an ordered sequence of values.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.SequenceValue.#ctor(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue})">
            <summary>
            Create a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue"/> with the provided <paramref name="elements"/>.
            </summary>
            <param name="elements">The elements of the sequence.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="elements"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.SequenceValue.Elements">
            <summary>
            The elements of the sequence.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.SequenceValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue">
            <summary>
            A value represented as a collection of name-value properties.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.StructureValue.#ctor(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty},System.String)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue"/> with the provided properties.
            </summary>
            <param name="typeTag">Optionally, a piece of metadata describing the "type" of the
            structure. Can be <code>null</code>.</param>
            <param name="properties">The properties of the structure.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.StructureValue.TypeTag">
            <summary>
            A piece of metadata describing the "type" of the
            structure, or null.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Events.StructureValue.Properties">
            <summary>
            The properties of the structure.
            </summary>
            <remarks>Not presented as a dictionary because dictionary construction is
            relatively expensive; it is cheaper to build a dictionary over properties only
            when the structure is of interest.</remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Events.StructureValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            Render the value to the output.
            </summary>
            <param name="output">The output.</param>
            <param name="format">A format string applied to the value, or null.</param>
            <param name="formatProvider">A format provider to apply to the value, or null to use the default.</param>
            <seealso cref="M:Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue.ToString(System.String,System.IFormatProvider)"/>.
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Filters.Matching">
            <summary>
            Predicates applied to log events that can be used
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.FromSource``1">
            <summary>
            Matches events from the specified source type.
            </summary>
            <typeparam name="TSource">The source type.</typeparam>
            <returns>A predicate for matching events.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.FromSource(System.String)">
            <summary>
            Matches events from the specified source type or namespace and
            nested types or namespaces.
            </summary>
            <param name="source">A dotted source type or namespace identifier.</param>
            <returns>A function that matches log events emitted by the source.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="source"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.WithProperty(System.String)">
            <summary>
            Matches events with the specified property attached,
            regardless of its value.
            </summary>
            <param name="propertyName">The name of the property to match.</param>
            <returns>A predicate for matching events.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyName"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.WithProperty(System.String,System.Object)">
            <summary>
            Matches events with the specified property value.
            </summary>
            <param name="propertyName">The name of the property to match.</param>
            <param name="scalarValue">The property value to match; must be a scalar type.
            Null is allowed.</param>
            <returns>A predicate for matching events.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyName"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Filters.Matching.WithProperty``1(System.String,System.Func{``0,System.Boolean})">
            <summary>
            Matches events with the specified property value.
            </summary>
            <param name="propertyName">The name of the property to match.</param>
            <param name="predicate">A predicate for testing </param>
            <typeparam name="TScalar">The type of scalar values to match.</typeparam>
            <returns>A predicate for matching events.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyName"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="predicate"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Display.LevelOutputFormat">
            <summary>
            Implements the {Level} element.
            can now have a fixed width applied to it, as well as casing rules.
            Width is set through formats like "u3" (uppercase three chars),
            "w1" (one lowercase char), or "t4" (title case four chars).
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Display.MessageTemplateTextFormatter">
            <summary>
            A <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter"/> that supports the Serilog
            message template format. Formatting log events for display
            has a different set of requirements and expectations from
            rendering the data within them. To meet this, the formatter
            overrides some behavior: First, strings are always output
            as literals (not quoted) unless some other format is applied
            to them. Second, tokens without matching properties are skipped
            rather than being written as raw text.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.MessageTemplateTextFormatter.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Display.MessageTemplateTextFormatter"/>.
            </summary>
            <param name="outputTemplate">A message template describing the
            output messages.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="outputTemplate"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.MessageTemplateTextFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logEvent"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.Obsolete.LogEventLevelValue.Render(System.IO.TextWriter,System.String,System.IFormatProvider)">
            <summary>
            This method will apply only upper or lower case formatting, not fixed width
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties">
            <summary>
            Describes the properties available in standard message template-based
            output format strings.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.MessagePropertyName">
            <summary>
            The message rendered from the log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.TimestampPropertyName">
            <summary>
            The timestamp of the log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.LevelPropertyName">
            <summary>
            The level of the log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.NewLinePropertyName">
            <summary>
            A new line.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.ExceptionPropertyName">
            <summary>
            The exception associated with the log event.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.PropertiesPropertyName">
            <summary>
            The properties of the log event.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.GetOutputProperties(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Create properties from the provided log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>A dictionary with properties representing the log event.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Display.OutputProperties.GetOutputProperties(Datadog.Trace.Vendors.Serilog.Events.LogEvent,Datadog.Trace.Vendors.Serilog.Events.MessageTemplate)">
            <summary>
            Create properties from the provided log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <param name="outputTemplate">The output template.</param>
            <returns>A dictionary with properties representing the log event.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter">
            <summary>
            Formats log events in a textual representation.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.ITextFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter">
            <summary>
            Formats log events in a simple JSON structure. Instances of this class
            are safe for concurrent access by multiple threads.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.#ctor(System.String,System.Boolean,System.IFormatProvider)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>.
            </summary>
            <param name="closingDelimiter">A string that will be written after each log event is formatted.
            If null, <see cref="P:System.Environment.NewLine"/> will be used.</param>
            <param name="renderMessage">If true, the message will be rendered and written to the output as a
            property named RenderedMessage.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.#ctor(System.Boolean,System.String,System.Boolean,System.IFormatProvider)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>.
            </summary>
            <param name="omitEnclosingObject">If true, the properties of the event will be written to
            the output without enclosing braces. Otherwise, if false, each event will be written as a well-formed
            JSON object.</param>
            <param name="closingDelimiter">A string that will be written after each log event is formatted.
            If null, <see cref="P:System.Environment.NewLine"/> will be used. Ignored if <paramref name="omitEnclosingObject"/>
            is true.</param>
            <param name="renderMessage">If true, the message will be rendered and written to the output as a
            property named RenderedMessage.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logEvent"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.AddLiteralWriter(System.Type,System.Action{System.Object,System.IO.TextWriter})">
            <summary>
            Adds a writer function for a given type.
            </summary>
            <param name="type">The type of values, which <paramref name="writer" /> handles.</param>
            <param name="writer">The function, which writes the values.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="type"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="writer"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteRenderings(System.Linq.IGrouping{System.String,Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken}[],System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out individual renderings of attached properties
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteRenderingsValues(System.Linq.IGrouping{System.String,Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken}[],System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out the values of individual renderings of attached properties
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteProperties(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out the attached properties
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WritePropertiesValues(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out the attached properties values
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteException(System.Exception,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out the attached exception
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteRenderedMessage(System.String,System.String@,System.IO.TextWriter)">
            <summary>
            (Optionally) writes out the rendered message
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteMessageTemplate(System.String,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out the message template for the logevent.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteLevel(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out the log level
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteTimestamp(System.DateTimeOffset,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out the log timestamp
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteStructure(System.String,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty},System.IO.TextWriter)">
            <summary>
            Writes out a structure property
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteSequence(System.Collections.IEnumerable,System.IO.TextWriter)">
            <summary>
            Writes out a sequence property
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteDictionary(System.Collections.Generic.IReadOnlyDictionary{Datadog.Trace.Vendors.Serilog.Events.ScalarValue,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter)">
            <summary>
            Writes out a dictionary
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteJsonProperty(System.String,System.Object,System.String@,System.IO.TextWriter)">
            <summary>
            Writes out a json property with the specified value on output writer
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.WriteLiteralValue(System.Object,System.IO.TextWriter)">
            <summary>
            Allows a subclass to write out objects that have no configured literal writer.
            </summary>
            <param name="value">The value to be written as a json construct</param>
            <param name="output">The writer to write on</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter.Escape(System.String)">
            <summary>
            Perform simple JSON string escaping on <paramref name="s"/>.
            </summary>
            <param name="s">A raw string.</param>
            <returns>A JSON-escaped version of <paramref name="s"/>.</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter">
            <summary>
            Converts Serilog's structured property value format into JSON.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.#ctor(System.String)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonFormatter"/>.
            </summary>
            <param name="typeTagName">When serializing structured (object) values,
            the property name to use for the Serilog <see cref="P:Datadog.Trace.Vendors.Serilog.Events.StructureValue.TypeTag"/> field
            in the resulting JSON. If null, no type tag field will be written. The default is
            "_typeTag".</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue,System.IO.TextWriter)">
            <summary>
            Format <paramref name="value"/> as JSON to <paramref name="output"/>.
            </summary>
            <param name="value">The value to format</param>
            <param name="output">The output</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.VisitScalarValue(System.IO.TextWriter,Datadog.Trace.Vendors.Serilog.Events.ScalarValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.ScalarValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="scalar">The value to visit.</param>
            <returns>The result of visiting <paramref name="scalar"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="scalar"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.VisitSequenceValue(System.IO.TextWriter,Datadog.Trace.Vendors.Serilog.Events.SequenceValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.SequenceValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="sequence">The value to visit.</param>
            <returns>The result of visiting <paramref name="sequence"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="sequence"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.VisitStructureValue(System.IO.TextWriter,Datadog.Trace.Vendors.Serilog.Events.StructureValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.StructureValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="structure">The value to visit.</param>
            <returns>The result of visiting <paramref name="structure"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.VisitDictionaryValue(System.IO.TextWriter,Datadog.Trace.Vendors.Serilog.Events.DictionaryValue)">
            <summary>
            Visit a <see cref="T:Datadog.Trace.Vendors.Serilog.Events.DictionaryValue"/> value.
            </summary>
            <param name="state">Operation state.</param>
            <param name="dictionary">The value to visit.</param>
            <returns>The result of visiting <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.FormatLiteralValue(System.Object,System.IO.TextWriter)">
            <summary>
            Write a literal as a single JSON value, e.g. as a number or string. Override to
            support more value types. Don't write arrays/structures through this method - the
            active destructuring policies have already indicated the value should be scalar at
            this point.
            </summary>
            <param name="value">The value to write.</param>
            <param name="output">The output</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Json.JsonValueFormatter.WriteQuotedJsonString(System.String,System.IO.TextWriter)">
            <summary>
            Write a valid JSON string literal, escaping as necessary.
            </summary>
            <param name="str">The string value to write.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Formatting.Raw.RawFormatter">
            <summary>
            Formats log events as a raw dump of the message template and properties.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Formatting.Raw.RawFormatter.Format(Datadog.Trace.Vendors.Serilog.Events.LogEvent,System.IO.TextWriter)">
            <summary>
            Format the log event into the output.
            </summary>
            <param name="logEvent">The event to format.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.ILogger">
             <summary>
             The core Serilog logging API, used for writing log events.
             </summary>
             <example>
             var log = new LoggerConfiguration()
                 .WriteTo.Console()
                 .CreateLogger();
            
             var thing = "World";
             log.Information("Hello, {Thing}!", thing);
             </example>
             <remarks>
             The methods on <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/> (and its static sibling <see cref="T:Datadog.Trace.Vendors.Serilog.Log"/>) are guaranteed
             never to throw exceptions. Methods on all other types may.
             </remarks>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher)">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enricher">Enricher that applies in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext(System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher})">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enrichers">Enrichers that apply in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext(System.String,System.Object,System.Boolean)">
            <summary>
            Create a logger that enriches log events with the specified property.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext``1">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <typeparam name="TSource">Type generating log messages in the context.</typeparam>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.ForContext(System.Type)">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <param name="source">Type generating log messages in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Write an event to the log.
            </summary>
            <param name="logEvent">The event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate"></param>
            <param name="propertyValues"></param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.IsEnabled(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Determine if events at the specified level will be passed through
            to the log sinks.
            </summary>
            <param name="level">Level to check.</param>
            <returns>True if the level is enabled; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.BindMessageTemplate(System.String,System.Object[],Datadog.Trace.Vendors.Serilog.Events.MessageTemplate@,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty}@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a set of properties to a
            message template. Returns false if the template or values are invalid (<c>ILogger</c>
            methods never throw exceptions).
            </summary>
            <param name="messageTemplate">Message template describing an event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <param name="parsedTemplate">The internal representation of the template, which may be used to
            render the <paramref name="boundProperties"/> as text.</param>
            <param name="boundProperties">Captured properties from the template and <paramref name="propertyValues"/>.</param>
            <example>
            MessageTemplate template;
            IEnumerable&lt;LogEventProperty&gt; properties>;
            if (Log.BindMessageTemplate("Hello, {Name}!", new[] { "World" }, out template, out properties)
            {
                var propsByName = properties.ToDictionary(p => p.Name, p => p.Value);
                Console.WriteLine(template.Render(propsByName, null));
                // -> "Hello, World!"
            }
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.ILogger.BindProperty(System.String,System.Object,System.Boolean,Datadog.Trace.Vendors.Serilog.Events.LogEventProperty@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a property value to its captured
            representation.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <param name="property">The resulting property.</param>
            <returns>True if the property could be bound, otherwise false (<summary>ILogger</summary>
            methods never throw exceptions).</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Log">
             <summary>
             An optional static entry point for logging that can be easily referenced
             by different parts of an application. To configure the <see cref="T:Datadog.Trace.Vendors.Serilog.Log"/>
             set the Logger static property to a logger instance.
             </summary>
             <example>
             Log.Logger = new LoggerConfiguration()
                 .WithConsoleSink()
                 .CreateLogger();
            
             var thing = "World";
             Log.Logger.Information("Hello, {Thing}!", thing);
             </example>
             <remarks>
             The methods on <see cref="T:Datadog.Trace.Vendors.Serilog.Log"/> (and its dynamic sibling <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/>) are guaranteed
             never to throw exceptions. Methods on all other types may.
             </remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Log.Logger">
            <summary>
            The globally-shared logger.
            </summary>
            <exception cref="T:System.ArgumentNullException">When <paramref name="value"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.CloseAndFlush">
            <summary>
            Resets <see cref="P:Datadog.Trace.Vendors.Serilog.Log.Logger"/> to the default and disposes the original if possible
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher)">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enricher">Enricher that applies in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext(Datadog.Trace.Vendors.Serilog.Core.ILogEventEnricher[])">
            <summary>
            Create a logger that enriches log events via the provided enrichers.
            </summary>
            <param name="enrichers">Enrichers that apply in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext(System.String,System.Object,System.Boolean)">
            <summary>
            Create a logger that enriches log events with the specified property.
            </summary>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext``1">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <typeparam name="TSource">Type generating log messages in the context.</typeparam>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.ForContext(System.Type)">
            <summary>
            Create a logger that marks log events as being from the specified
            source type.
            </summary>
            <param name="source">Type generating log messages in the context.</param>
            <returns>A logger that will enrich log events as specified.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEvent)">
            <summary>
            Write an event to the log.
            </summary>
            <param name="logEvent">The event to write.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``1(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``2(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write``3(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Write(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the specified level and associated exception.
            </summary>
            <param name="level">The level of the event.</param>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.IsEnabled(Datadog.Trace.Vendors.Serilog.Events.LogEventLevel)">
            <summary>
            Determine if events at the specified level will be passed through
            to the log sinks.
            </summary>
            <param name="level">Level to check.</param>
            <returns>True if the level is enabled; otherwise, false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose("Staring into space, wondering if we're alone.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Verbose(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Verbose"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Verbose(ex, "Staring into space, wondering where this comet came from.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug("Starting up at {StartedAt}.", DateTime.Now);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Debug"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Debug(ex, "Swallowing a mundane exception.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information("Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Information(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Information(ex, "Processed {RecordCount} records in {TimeMS}.", records.Length, sw.ElapsedMilliseconds);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning("Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Warning(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Warning"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Warning(ex, "Skipped {SkipCount} records.", skippedRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error("Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Error(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Error"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Error(ex, "Failed {ErrorCount} records.", brokenRecords.Length);
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal(System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``1(System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``2(System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal(System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level.
            </summary>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal("Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal(System.Exception,System.String)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``1(System.Exception,System.String,``0)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``2(System.Exception,System.String,``0,``1)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal``3(System.Exception,System.String,``0,``1,``2)">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValue0">Object positionally formatted into the message template.</param>
            <param name="propertyValue1">Object positionally formatted into the message template.</param>
            <param name="propertyValue2">Object positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            Write a log event with the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Fatal"/> level and associated exception.
            </summary>
            <param name="exception">Exception related to the event.</param>
            <param name="messageTemplate">Message template describing the event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <example>
            Log.Fatal(ex, "Process terminating.");
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.BindMessageTemplate(System.String,System.Object[],Datadog.Trace.Vendors.Serilog.Events.MessageTemplate@,System.Collections.Generic.IEnumerable{Datadog.Trace.Vendors.Serilog.Events.LogEventProperty}@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a set of properties to a
            message template. Returns false if the template or values are invalid (<summary>ILogger</summary>
            methods never throw exceptions).
            </summary>
            <param name="messageTemplate">Message template describing an event.</param>
            <param name="propertyValues">Objects positionally formatted into the message template.</param>
            <param name="parsedTemplate">The internal representation of the template, which may be used to
            render the <paramref name="boundProperties"/> as text.</param>
            <param name="boundProperties">Captured properties from the template and <paramref name="propertyValues"/>.</param>
            <example>
            MessageTemplate template;
            IEnumerable&lt;LogEventProperty&gt; properties>;
            if (Log.BindMessageTemplate("Hello, {Name}!", new[] { "World" }, out template, out properties)
            {
                var propsByName = properties.ToDictionary(p => p.Name, p => p.Value);
                Console.WriteLine(template.Render(propsByName, null));
                // -> "Hello, World!"
            }
            </example>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Log.BindProperty(System.String,System.Object,System.Boolean,Datadog.Trace.Vendors.Serilog.Events.LogEventProperty@)">
            <summary>
            Uses configured scalar conversion and destructuring rules to bind a property value to its captured
            representation.
            </summary>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <param name="property">The resulting property.</param>
            <returns>True if the property could be bound, otherwise false (<summary>ILogger</summary>
            methods never throw exceptions).</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.LoggerConfiguration">
            <summary>
            Configuration object for creating <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger"/> instances.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.#ctor">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.LoggerConfiguration"/>.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.WriteTo">
            <summary>
            Configures the sinks that log events will be emitted to.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.AuditTo">
            <summary>
            Configures sinks for auditing, instead of regular (safe) logging. When auditing is used,
            exceptions from sinks and any intermediate filters propagate back to the caller. Most callers
            should use <see cref="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.WriteTo"/> instead.
            </summary>
            <remarks>
            Not all sinks are compatible with transactional auditing requirements (many will use asynchronous
            batching to improve write throughput and latency). Sinks need to opt-in to auditing support by
            extending <see cref="T:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration"/>, though the generic <see cref="M:Datadog.Trace.Vendors.Serilog.Configuration.LoggerAuditSinkConfiguration.Sink(Datadog.Trace.Vendors.Serilog.Core.ILogEventSink,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,Datadog.Trace.Vendors.Serilog.Core.LoggingLevelSwitch)"/>
            method allows any sink class to be adapted for auditing.
            </remarks>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.MinimumLevel">
            <summary>
            Configures the minimum level at which events will be passed to sinks. If
            not specified, only events at the <see cref="F:Datadog.Trace.Vendors.Serilog.Events.LogEventLevel.Information"/>
            level and above will be passed through.
            </summary>
            <returns>Configuration object allowing method chaining.</returns>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Enrich">
            <summary>
            Configures enrichment of <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>s. Enrichers can add, remove and
            modify the properties associated with events.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Filter">
            <summary>
            Configures global filtering of <see cref="T:Datadog.Trace.Vendors.Serilog.Events.LogEvent"/>s.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.Destructure">
            <summary>
            Configures destructuring of message template parameters.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.ReadFrom">
            <summary>
            Apply external settings to the logger configuration.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.LoggerConfiguration.CreateLogger">
            <summary>
            Create a logger using the configured sinks, enrichers and minimum level.
            </summary>
            <returns>The logger.</returns>
            <remarks>To free resources held by sinks ahead of program shutdown,
            the returned logger may be cast to <see cref="T:System.IDisposable"/> and
            disposed.</remarks>
            <exception cref="T:System.InvalidOperationException">When the logger is already created</exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.LoggerExtensions">
            <summary>
            Extends <see cref="T:Datadog.Trace.Vendors.Serilog.ILogger" /> with additional methods.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.LoggerExtensions.ForContext``1(Datadog.Trace.Vendors.Serilog.ILogger,Datadog.Trace.Vendors.Serilog.Events.LogEventLevel,System.String,``0,System.Boolean)">
            <summary>
            Create a logger that enriches log events when the specified level is enabled.
            </summary>
            <typeparam name="TValue"> The type of the property value. </typeparam>
            <param name="logger">The logger.</param>
            <param name="level">The log event level used to determine if log is enriched with property.</param>
            <param name="propertyName">The name of the property. Must be non-empty.</param>
            <param name="value">The property value.</param>
            <param name="destructureObjects">If true, the value will be serialized as a structured
            object if possible; if false, the object will be recorded as a scalar or simple array.</param>
            <returns>A logger that will enrich log events as specified.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="logger"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.Alignment">
            <summary>
            A structure representing the alignment settings to apply when rendering a property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.Alignment.#ctor(Datadog.Trace.Vendors.Serilog.Parsing.AlignmentDirection,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.Alignment"/>.
            </summary>
            <param name="direction">The text alignment direction.</param>
            <param name="width">The width of the text, in characters.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.Alignment.Direction">
            <summary>
            The text alignment direction.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.Alignment.Width">
            <summary>
            The width of the text.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.AlignmentDirection">
            <summary>
            Defines the direction of the alignment.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.AlignmentDirection.Left">
            <summary>
            Text will be left-aligned.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.AlignmentDirection.Right">
            <summary>
            Text will be right-aligned.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.Destructuring">
            <summary>
            Instructs the logger on how to store information about provided
            parameters.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.Destructuring.Default">
            <summary>
            Convert known types and objects to scalars, arrays to sequences.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.Destructuring.Stringify">
            <summary>
            Convert all types to scalar strings. Prefix name with '$'.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.Serilog.Parsing.Destructuring.Destructure">
            <summary>
            Convert known types to scalars, destructure objects and collections
            into sequences and structures. Prefix name with '@'.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateParser">
            <summary>
            Parses message template strings into sequences of text or property
            tokens.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateParser.Parse(System.String)">
            <summary>
            Parse the supplied message template.
            </summary>
            <param name="messageTemplate">The message template to parse.</param>
            <returns>A sequence of text or property tokens. Where the template
            is not syntactically valid, text tokens will be returned. The parser
            will make a best effort to extract valid property tokens even in the
            presence of parsing issues.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="messageTemplate"/> is <code>null</code></exception>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken">
            <summary>
            An element parsed from a message template string.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken.#ctor(System.Int32)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken"/>.
            </summary>
            <param name="startIndex">The token's start index in the template.</param>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken.StartIndex">
            <summary>
            The token's start index in the template.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken.Length">
            <summary>
            The token's length.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.MessageTemplateToken.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Render the token to the output.
            </summary>
            <param name="properties">Properties that may be represented by the token.</param>
            <param name="output">Output for the rendered string.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken">
            <summary>
            A message template token representing a log event property.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.#ctor(System.String,System.String,System.String,Datadog.Trace.Vendors.Serilog.Parsing.Destructuring)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken"/>.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="rawText">The token as it appears in the message template.</param>
            <param name="formatObsolete">The format applied to the property, if any.</param>
            <param name="destructuringObsolete">The destructuring strategy applied to the property, if any.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.#ctor(System.String,System.String,System.String,System.Nullable{Datadog.Trace.Vendors.Serilog.Parsing.Alignment},Datadog.Trace.Vendors.Serilog.Parsing.Destructuring,System.Int32)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken"/>.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="rawText">The token as it appears in the message template.</param>
            <param name="format">The format applied to the property, if any.</param>
            <param name="alignment">The alignment applied to the property, if any.</param>
            <param name="destructuring">The destructuring strategy applied to the property, if any.</param>
            <param name="startIndex">The token's start index in the template.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="propertyName"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="rawText"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Length">
            <summary>
            The token's length.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Render the token to the output.
            </summary>
            <param name="properties">Properties that may be represented by the token.</param>
            <param name="output">Output for the rendered string.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="properties"/> is <code>null</code></exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.PropertyName">
            <summary>
            The property name.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Destructuring">
            <summary>
            Destructuring strategy applied to the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Format">
            <summary>
            Format applied to the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Alignment">
            <summary>
            Alignment applied to the property.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.IsPositional">
            <summary>
            True if the property name is a positional index; otherwise, false.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.TryGetPositionalValue(System.Int32@)">
            <summary>
            Try to get the integer value represented by the property name.
            </summary>
            <param name="position">The integer value, if present.</param>
            <returns>True if the property is positional, otherwise false.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.PropertyToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Parsing.TextToken">
            <summary>
            A message template token representing literal text.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.#ctor(System.String,System.Int32)">
            <summary>
            Construct a <see cref="T:Datadog.Trace.Vendors.Serilog.Parsing.TextToken"/>.
            </summary>
            <param name="text">The text of the token.</param>
            <param name="startIndex">The token's start index in the template.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="text"/> is <code>null</code></exception>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.Length">
            <summary>
            The token's length.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.Render(System.Collections.Generic.IReadOnlyDictionary{System.String,Datadog.Trace.Vendors.Serilog.Events.LogEventPropertyValue},System.IO.TextWriter,System.IFormatProvider)">
            <summary>
            Render the token to the output.
            </summary>
            <param name="properties">Properties that may be represented by the token.</param>
            <param name="output">Output for the rendered string.</param>
            <param name="formatProvider">Supplies culture-specific formatting information, or null.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="output"/> is <code>null</code></exception>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Datadog.Trace.Vendors.Serilog.Parsing.TextToken.Text">
            <summary>
            The text of the token.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Rendering.Casing.Format(System.String,System.String)">
            <summary>
            Apply upper or lower casing to <paramref name="value"/> when <paramref name="format"/> is provided.
            Returns <paramref name="value"/> when no or invalid format provided
            </summary>
            <returns>The provided <paramref name="value"/> with formatting applied</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.Serilog.Rendering.Padding.Apply(System.IO.TextWriter,System.String,System.Nullable{Datadog.Trace.Vendors.Serilog.Parsing.Alignment})">
            <summary>
            Writes the provided value to the output, applying direction-based padding when <paramref name="alignment"/> is provided.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.Serilog.Settings.KeyValuePairs.SurrogateConfigurationMethods">
             <summary>
             Contains "fake extension" methods for the Serilog configuration API.
             By default the settings knows how to find extension methods, but some configuration
             are actually "regular" method calls and would not be found otherwise.
            
             This static class contains internal methods that can be used instead.
            
             See also <seealso cref="T:Datadog.Trace.Vendors.Serilog.Settings.KeyValuePairs.CallableConfigurationMethodFinder"/>
             </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig">
            <summary>
            The advanced configuration options for DogStatsdService.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxMetricsInAsyncQueue">
            <summary>
            Gets or sets a value defining the maximum number of metrics in the queue
            (Metrics are sent asynchronously using a queue).
            A small value reduces memory usage whereas an higher value reduces
            latency (When <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> is null) or the number of messages
            dropped (When <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> is not null).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration">
            <summary>
            Gets or sets a value defining the maximum duration a call can block.
            If there are more metrics than `MaxMetricsInAsyncQueue` waiting to be sent:
                - if <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> is null, the metric send by a call to a
                  <see cref="T:Datadog.Trace.Vendors.StatsdClient.DogStatsd"/> or <see cref="T:Datadog.Trace.Vendors.StatsdClient.DogStatsdService"/> method will be dropped.
                - If <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> is not null, the metric send by a call to a
                  <see cref="T:Datadog.Trace.Vendors.StatsdClient.DogStatsd"/> or <see cref="T:Datadog.Trace.Vendors.StatsdClient.DogStatsdService"/> method will block for at most
                  <see cref="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.MaxBlockDuration"/> duration.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.DurationBeforeSendingNotFullBuffer">
            <summary>
            Gets or sets a value defining how long
            DogStatsD waits before sending a not full buffer (Metrics are buffered before sent).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.UDSBufferFullBlockDuration">
            <summary>
            Gets or sets a value defining how long to wait when the UDS buffer is full
            (SocketError.NoBufferSpaceAvailable). A null value results in
            dropping the metric.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.TelemetryFlushInterval">
            <summary>
            Gets or sets a value defining the duration between two telemetry flushes.
            When this value is set at null, telemetry is disabled.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.AdvancedStatsConfig.OptionalTelemetryEndPoint">
            <summary>
            Gets or sets a value defining the telemetry endpoint. INTERNAL USAGE ONLY.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.AggregatorFlusher`1">
            <summary>
            AggregatorFlusher is responsible for flushing the aggregated `MetricStats` instances.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.Aggregators">
            <summary>
            Store all aggregators
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.CountAggregator">
            <summary>
            Aggregate <see cref="T:Datadog.Trace.Vendors.StatsdClient.Statistic.StatsMetric"/> instances of type <see cref="F:Datadog.Trace.Vendors.StatsdClient.MetricType.Count"/>
            by summing the value by <see cref="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.MetricStatsKey"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.GaugeAggregator">
            <summary>
            Aggregate `StatsMetric` instances of type `Gauge` by by keeping the last value.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.MetricStatsKey">
            <summary>
            Dictionary Key for `MetricStats`.
            It is more efficient to use `MetricStatsKey` than creating a string from metric name and tags.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.SetAggregator">
            <summary>
            Aggregate `StatsMetric` instances of type `Set` by keeping the unique values.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.BufferBuilder">
            <summary>
            Append string values to a fixed size bytes buffer.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.BufferBuilderHandler">
            <summary>
            BufferBuilderHandler forwards metrics to ITransport and update telemetry.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.IStatsBufferizeFactory">
            <summary>
            IStatsBufferizeFactory is a factory for StatsBufferize.
            It is used to test StatsBufferize.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.StatsBufferize">
            <summary>
            StatsBufferize bufferizes metrics before sending them.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.ClientSideAggregationConfig">
            <summary>
            Define the configuration for the client side aggregation.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ClientSideAggregationConfig.MaxUniqueStatsBeforeFlush">
            <summary>
            Gets or sets the maximum number of unique stats before flushing.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ClientSideAggregationConfig.FlushInterval">
            <summary>
            Gets or sets the maximum interval duration between two flushes.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Status">
            <summary>
            The status of the service check.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.Status.OK">
            <summary>
            Status OK
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.Status.WARNING">
            <summary>
            Status Warning
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.Status.CRITICAL">
            <summary>
            Status Critical
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.Status.UNKNOWN">
            <summary>
            Status Unknown
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.DogStatsd">
            <summary>
            DogStatsd is a collection of static methods that provide the same feature as DogStatsdService.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsd.TelemetryCounters">
            <summary>
            Gets the telemetry counters
            </summary>
            <value>The telemetry counters.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Configure(Datadog.Trace.Vendors.StatsdClient.StatsdConfig)">
            <summary>
            Configures the instance.
            Must be called before any other methods.
            </summary>
            <param name="config">The value of the config.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Event(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String[])">
            <summary>
            Records an event.
            </summary>
            <param name="title">The title of the event.</param>
            <param name="text">The text body of the event.</param>
            <param name="alertType">error, warning, success, or info (defaults to info).</param>
            <param name="aggregationKey">A key to use for aggregating events.</param>
            <param name="sourceType">The source type name.</param>
            <param name="dateHappened">The epoch timestamp for the event (defaults to the current time from the DogStatsD server).</param>
            <param name="priority">Specifies the priority of the event (normal or low).</param>
            <param name="hostname">The name of the host.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Counter(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Adjusts the specified counter by a given delta.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">A given delta.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Increment(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Increments the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of increment.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Decrement(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Decrements the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of decrement.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Gauge(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records the latest fixed value for the specified named gauge.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the gauge.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Histogram(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named histogram.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the histogram.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Distribution(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named distribution.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the distribution.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Set``1(System.String,``0,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Set(System.String,System.String,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Timer(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records an execution time in milliseconds.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The time in millisecond.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.StartTimer(System.String,System.Double,System.String[])">
            <summary>
            Creates a timer that records the execution time until Dispose is called on the returned value.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <returns>A disposable object that records the execution time until Dispose is called.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Time(System.Action,System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given action.
            </summary>
            <param name="action">The given action.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Time``1(System.Func{``0},System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given function.
            </summary>
            <param name="func">The given function.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the returned value of <paramref name="func"/>.</typeparam>
            <returns>The returned value of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.ServiceCheck(System.String,Datadog.Trace.Vendors.StatsdClient.Status,System.Nullable{System.Int32},System.String,System.String[],System.String)">
            <summary>
            Records a run status for the specified named service check.
            </summary>
            <param name="name">The name of the service check.</param>
            <param name="status">A constant describing the service status.</param>
            <param name="timestamp">The epoch timestamp for the service check (defaults to the current time from the DogStatsD server).</param>
            <param name="hostname">The hostname to associate with the service check.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <param name="message">Additional information or a description of why the status occurred.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Flush">
            <summary>
            Flushes all metrics.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsd.Dispose">
            <summary>
            Disposes the instance of DogStatsdService.
            Flushes all metrics.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint">
            <summary>
            DogStatsdEndPoint is a DogStatsd endpoint (UDP or UDS).
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint.ServerName">
            <summary>
            Gets or sets a value defining the name of the endpoint
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint.Port">
            <summary>
            Gets or sets a value defining the port number if any
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint.PipeName">
            <summary>
            Gets or sets the name of the pipe. INTERNAL USAGE ONLY.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint.AreEquals(Datadog.Trace.Vendors.StatsdClient.DogStatsdEndPoint)">
            <summary>
            AreEquals returns whether `this` and `endPoint` have the same values
            </summary>
            <param name="endPoint">The endpoint to compare with `this`</param>
            <returns>Returns whether `this` and `endPoint` have the same values</returns>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.DogStatsdService">
            <summary>
            DogStatsdService is a <a href="https://docs.datadoghq.com/developers/dogstatsd/?tab=net">DogStatsD client</a>.
            Dispose must be called to flush all the metrics.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.TelemetryCounters">
            <summary>
            Gets the telemetry counters
            </summary>
            <value>The telemetry counters.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Configure(Datadog.Trace.Vendors.StatsdClient.StatsdConfig)">
            <summary>
            Configures the instance.
            Must be called before any other methods.
            </summary>
            <param name="config">The value of the config.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Event(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String[])">
            <summary>
            Records an event.
            </summary>
            <param name="title">The title of the event.</param>
            <param name="text">The text body of the event.</param>
            <param name="alertType">error, warning, success, or info (defaults to info).</param>
            <param name="aggregationKey">A key to use for aggregating events.</param>
            <param name="sourceType">The source type name.</param>
            <param name="dateHappened">The epoch timestamp for the event (defaults to the current time from the DogStatsD server).</param>
            <param name="priority">Specifies the priority of the event (normal or low).</param>
            <param name="hostname">The name of the host.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Counter(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Adjusts the specified counter by a given delta.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">A given delta.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Increment(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Increments the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of increment.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Decrement(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Decrements the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of decrement.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Gauge(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records the latest fixed value for the specified named gauge.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the gauge.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Histogram(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named histogram.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the histogram.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Distribution(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named distribution.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the distribution.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Set``1(System.String,``0,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Set(System.String,System.String,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Timer(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records an execution time in milliseconds.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The time in millisecond.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.StartTimer(System.String,System.Double,System.String[])">
            <summary>
            Creates a timer that records the execution time until Dispose is called on the returned value.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <returns>A disposable object that records the execution time until Dispose is called.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Time(System.Action,System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given action.
            </summary>
            <param name="action">The given action.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Time``1(System.Func{``0},System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given function.
            </summary>
            <param name="func">The given function.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the returned value of <paramref name="func"/>.</typeparam>
            <returns>The returned value of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.ServiceCheck(System.String,Datadog.Trace.Vendors.StatsdClient.Status,System.Nullable{System.Int32},System.String,System.String[],System.String)">
            <summary>
            Records a run status for the specified named service check.
            </summary>
            <param name="name">The name of the service check.</param>
            <param name="status">A constant describing the service status.</param>
            <param name="timestamp">The epoch timestamp for the service check (defaults to the current time from the DogStatsD server).</param>
            <param name="hostname">The hostname to associate with the service check.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <param name="message">Additional information or a description of why the status occurred.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Flush">
            <summary>
            Flushes all metrics.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.DogStatsdService.Dispose">
            <summary>
            Disposes an instance of DogStatsdService.
            Flushes all metrics.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.IDogStatsd">
            <summary>
            IDogStatsd is an interface over DogStatsdService.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.TelemetryCounters">
            <summary>
            Gets the telemetry counters
            </summary>
            <value>The telemetry counters.</value>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Configure(Datadog.Trace.Vendors.StatsdClient.StatsdConfig)">
            <summary>
            Configures the instance.
            Must be called before any other methods.
            </summary>
            <param name="config">The value of the config.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Counter(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Adjusts the specified counter by a given delta.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">A given delta.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Decrement(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Decrements the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of decrement.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Event(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String[])">
            <summary>
            Records an event.
            </summary>
            <param name="title">The title of the event.</param>
            <param name="text">The text body of the event.</param>
            <param name="alertType">error, warning, success, or info (defaults to info).</param>
            <param name="aggregationKey">A key to use for aggregating events.</param>
            <param name="sourceType">The source type name.</param>
            <param name="dateHappened">The epoch timestamp for the event (defaults to the current time from the DogStatsD server).</param>
            <param name="priority">Specifies the priority of the event (normal or low).</param>
            <param name="hostname">The name of the host.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Gauge(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records the latest fixed value for the specified named gauge.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the gauge.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Histogram(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named histogram.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the histogram.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Distribution(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records a value for the specified named distribution.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value of the distribution.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Increment(System.String,System.Int32,System.Double,System.String[])">
            <summary>
            Increments the specified counter.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The amount of increment.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Set``1(System.String,``0,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Set(System.String,System.String,System.Double,System.String[])">
            <summary>
            Records a value for the specified set.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The value to set.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.StartTimer(System.String,System.Double,System.String[])">
            <summary>
            Creates a timer that records the execution time until Dispose is called on the returned value.
            </summary>
            <param name="name">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <returns>A disposable object that records the execution time until Dispose is called.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Time(System.Action,System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given action.
            </summary>
            <param name="action">The given action.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Time``1(System.Func{``0},System.String,System.Double,System.String[])">
            <summary>
            Records an execution time for the given function.
            </summary>
            <param name="func">The given function.</param>
            <param name="statName">The name of the metric.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <typeparam name="T">The type of the returned value of <paramref name="func"/>.</typeparam>
            <returns>The returned value of <paramref name="func"/>.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.Timer(System.String,System.Double,System.Double,System.String[])">
            <summary>
            Records an execution time in milliseconds.
            </summary>
            <param name="statName">The name of the metric.</param>
            <param name="value">The time in millisecond.</param>
            <param name="sampleRate">Percentage of metric to be sent.</param>
            <param name="tags">Array of tags to be added to the data.</param>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.IDogStatsd.ServiceCheck(System.String,Datadog.Trace.Vendors.StatsdClient.Status,System.Nullable{System.Int32},System.String,System.String[],System.String)">
            <summary>
            Records a run status for the specified named service check.
            </summary>
            <param name="name">The name of the service check.</param>
            <param name="status">A constant describing the service status.</param>
            <param name="timestamp">The epoch timestamp for the service check (defaults to the current time from the DogStatsD server).</param>
            <param name="hostname">The hostname to associate with the service check.</param>
            <param name="tags">Array of tags to be added to the data.</param>
            <param name="message">Additional information or a description of why the status occurred.</param>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters">
            <summary>
            ITelemetryCounters contains the telemetry counters.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.MetricsSent">
            <summary>
            Gets the number of metrics sent.
            </summary>
            <value>The number of metrics sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.EventsSent">
            <summary>
            Gets the number of events sent.
            </summary>
            <value>The number of events sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.ServiceChecksSent">
            <summary>
            Gets the number of service checks sent.
            </summary>
            <value>The number of service checks sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.BytesSent">
            <summary>
            Gets the total number of bytes sent.
            </summary>
            <value>The total number of bytes sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.BytesDropped">
            <summary>
            Gets the total number of bytes dropped.
            </summary>
            <value>The total number of bytes dropped.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.PacketsSent">
            <summary>
            Gets the number of packets (UDP or UDS) sent.
            </summary>
            <value>The number of packets (UDP or UDS) sent.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.PacketsDropped">
            <summary>
            Gets the number of packets (UDP or UDS) dropped.
            </summary>
            <value>The number of packets (UDP or UDS) dropped.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.ITelemetryCounters.PacketsDroppedQueue">
            <summary>
            Gets the number of packets (UDP or UDS) dropped because the queue is full.
            </summary>
            <value>The number of packets (UDP or UDS) dropped because the queue is full.</value>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Statistic.Stats">
            <summary>
            Stats stores the data for a metric or a service check or an event.
            The field `Metric`, `ServiceCheck` and `Event` are structures for performance reasons. These
            fields are embeded inside Stats and so do not require extra allocations.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Statistic.StatsEvent">
            <summary>
            Store the data for an event.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Statistic.StatsMetric">
            <summary>
            Store the data for a metric.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Statistic.StatsServiceCheck">
            <summary>
            Store the data for a service check.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.StatsdBuilder">
            <summary>
            StatsdBuilder builds an instance of `Statsd` from StatsdConfig.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.StatsdConfig">
            <summary>
            The configuration options for DogStatsdService.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.DefaultStatsdPort">
            <summary>
            The default port for UDP.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.DefaultStatsdMaxUDPPacketSize">
            <summary>
            The default UDP maximum packet size.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.EntityIdEnvVar">
            <summary>
            The name of the environment variable defining the global tags to be applied to every metric, event, and service check.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.DogStatsdPortEnvVar">
            <summary>
            The name of the environment variable defining the port of the targeted StatsD server.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.AgentHostEnvVar">
            <summary>
            The name of the environment variable defining the host name of the targeted StatsD server.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.AgentPipeNameEnvVar">
            <summary>
            The name of the environment variable defining the name of the pipe. INTERNAL USAGE ONLY.
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ServiceEnvVar">
            <summary>
            The name of the environment variable defining the service name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.EnvironmentEnvVar">
            <summary>
            The name of the environment variable defining the environment name
            </summary>
        </member>
        <member name="F:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.VersionEnvVar">
            <summary>
            The name of the environment variable defining the version of the service
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Datadog.Trace.Vendors.StatsdClient.StatsdConfig"/> class.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdServerName">
            <summary>
            Gets or sets the host name of the targeted StatsD server.
            </summary>
            <value>The host name of the targeted StatsD server.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.PipeName">
            <summary>
            Gets or sets the name of the pipe. INTERNAL USAGE ONLY.
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdPort">
            <summary>
            Gets or sets the port of the targeted StatsD server.
            </summary>
            <value>The port of the targeted StatsD server.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdMaxUDPPacketSize">
            <summary>
            Gets or sets the maximum UDP packet size.
            </summary>
            <value>The maximum UDP packet size.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdMaxUnixDomainSocketPacketSize">
            <summary>
            Gets or sets the maximum Unix domain socket packet size.
            </summary>
            <value>The maximum Unix domain socket packet size.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.StatsdTruncateIfTooLong">
            <summary>
            Gets or sets a value indicating whether we truncate the metric if it is too long.
            </summary>
            <value>The value indicating whether we truncate the metric if it is too long.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.Prefix">
            <summary>
            Gets or sets the prefix to apply to every metric, event, and service check.
            </summary>
            <value>The prefix to apply to every metric, event, and service check.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.Advanced">
            <summary>
            Gets the advanced configuration.
            </summary>
            <value>The advanced configuration</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.Environment">
            <summary>
            Gets or sets the environment tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ServiceVersion">
            <summary>
            Gets or sets the service version tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ServiceName">
            <summary>
            Gets or sets the service name tag
            </summary>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ConstantTags">
            <summary>
            Gets or sets the global tags to be applied to every metric, event, and service check.
            </summary>
            <value>The global tags to be applied to every metric, event, and service check.</value>
        </member>
        <member name="P:Datadog.Trace.Vendors.StatsdClient.StatsdConfig.ClientSideAggregation">
            <summary>
            Gets or sets a value defining the client side aggregation config.
            If the value is null, the client side aggregation is not enabled.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.StatsRouter">
            <summary>
            Route `Stats` instances.
            Route a metric of type <see cref="F:Datadog.Trace.Vendors.StatsdClient.MetricType.Count"/>, <see cref="F:Datadog.Trace.Vendors.StatsdClient.MetricType.Gauge"/>
            and <see cref="F:Datadog.Trace.Vendors.StatsdClient.MetricType.Set"/> respectively to <see cref="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.CountAggregator"/>,
            <see cref="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.GaugeAggregator"/> and <see cref="T:Datadog.Trace.Vendors.StatsdClient.Aggregator.SetAggregator"/>.
            Others stats are routed to <see cref="T:Datadog.Trace.Vendors.StatsdClient.Bufferize.BufferBuilder"/>.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Telemetry">
            <summary>
            Telemetry sends telemetry metrics.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Transport.ITransport.Send(System.Byte[],System.Int32)">
            <summary>
            Send the buffer.
            Must be thread safe as it is called to send metrics and the telemetry.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Transport.UDPTransport.Send(System.Byte[],System.Int32)">
            <summary>
            Send the buffer.
            Must be thread safe.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Transport.UnixDomainSocketTransport.Send(System.Byte[],System.Int32)">
            <summary>
            Send the buffer.
            Must be thread safe.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Worker.AsynchronousWorker`1">
            <summary>
            AsynchronousWorker performs tasks asynchronously.
            `handler` must be thread safe if `workerThreadCount` > 1.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Worker.ConcurrentBoundedBlockingQueue`1">
            <summary>
            ConcurrentBoundedBlockingQueue is the same as ConcurrentBoundedQueue but
            it waits for `waitTimeout` before dropping the value when the queue is full.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Worker.ConcurrentBoundedQueue`1">
            <summary>
            ConcurrentBoundedQueue is a ConcurrentQueue with a bounded number of items.
            Note: Value is not enqueued when the queue is full.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Worker.IAsynchronousWorkerHandler`1.OnNewValue(`0)">
            <summary>
            Called when a new value is ready to be handled by the worker.
            </summary>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Worker.IAsynchronousWorkerHandler`1.OnIdle">
            <summary>
            Called when the worker is waiting for new value to handle.
            </summary>
            <returns>Return true to make the worker in a sleep state, false otherwise.</returns>
        </member>
        <member name="M:Datadog.Trace.Vendors.StatsdClient.Worker.IAsynchronousWorkerHandler`1.Flush">
            <summary>
            Called when AsynchronousWorker request a flush operation.
            </summary>
        </member>
        <member name="T:Datadog.Trace.Vendors.StatsdClient.Worker.ManualResetEventWrapper">
            <summary>
            Simple wrapper arround ManualResetEventSlim.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute">
            <summary>
            This attribute is recognized by the CLR and allow us to disable visibility checks for certain assemblies (only from 4.6+)
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute"/> class.
            </summary>
            <param name="assemblyName">Assembly name</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.AssemblyName">
            <summary>
            Gets the assembly name
            </summary>
        </member>
    </members>
</doc>
